{
  // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "ad-onSaveInstanceState": {
    "scope": "java",
    "prefix": "ad-onSaveInstanceState",
    "body": [
      "【推荐】Activity#onSaveInstanceState()方法不是 Activity 生命周期方法，也不保证",
      "一定会被调用。它是用来在 Activity 被意外销毁时保存 UI 状态的，只能用于保存临",
      "时性数据，例如 UI 控件的属性等，不能跟数据的持久化存储混为一谈。持久化存储",
      "应该在 Activity#onPause()/onStop()中实行。"
    ]
  },
  "ad-resolveActivity": {
    "scope": "java",
    "prefix": "ad-resolveActivity",
    "body": [
      "【强制】Activity 间通过隐式 Intent 的跳转，在发出 Intent 之前必须通过 resolveActivity",
      "检查，避免找不到合适的调用组件，造成 ActivityNotFoundException 的异常。",
      "正例：",
      "public void viewUrl(String url, String mimeType) {",
      " Intent intent = new Intent(Intent.ACTION_VIEW);",
      " intent.setDataAndType(Uri.parse(url), mimeType);",
      " if (getPackageManager().resolveActivity(intent, PackageManager.MATCH_DEFAULT_",
      "ONLY) != null) {",
      " try {",
      " startActivity(intent);",
      " } catch (ActivityNotFoundException e) {",
      " if (Config.LOGD) {",
      " Log.d(LOGTAG, \"activity not found for \" + mimeType + \" over \" +",
      "Uri.parse(url). getScheme(), e);",
      " }",
      " }",
      " }",
      "}"
    ]
  },
  "ad-耗时": {
    "scope": "java",
    "prefix": "ad-耗时",
    "body": []
  },
  "ad-LocalBroadcastManager": {
    "scope": "java",
    "prefix": "ad-LocalBroadcastManager",
    "body": [
      "如果广播仅限于应用内，则可以使用 LocalBroadcastManager#sendBroadcast()实",
      "现，避免敏感信息外泄和 Intent 拦截的风险。",
      "正例：",
      "Intent intent = new Intent(\"my-sensitive-event\");",
      "intent.putExtra(\"event\", \"this is a test event\");",
      "LocalBroadcastManager.getInstance(this).sendBroadcast(intent)"
    ]
  },
  "ad-FragmentTransaction#commit": {
    "scope": "java",
    "prefix": "ad-FragmentTransaction#commit",
    "body": [
      " 【推荐】 添 加 Fragment 时 ， 确 保 FragmentTransaction#commit() 在",
      "Activity#onPostResume()或者 FragmentActivity#onResumeFragments()内调用。",
      "不要随意使用 FragmentTransaction#commitAllowingStateLoss()来代替，任何",
      "commitAllowingStateLoss()的使用必须经过 code review，确保无负面影响。"
    ]
  },
  "ad-onStop": {
    "scope": "java",
    "prefix": "ad-onStop",
    "body": [
      "【推荐】不要在 Activity#onDestroy()内执行释放资源的工作，例如一些工作线程的",
      "销毁和停止，因为 onDestroy()执行的时机可能较晚。可根据实际需要，在",
      "Activity#onPause()/onStop()中结合 isFinishing()的判断来执行。"
    ]
  },
  "ad-IntentService": {
    "scope": "java",
    "prefix": "ad-IntentService",
    "body": [
      "public class SingleIntentService extends IntentService {",
      " public SingleIntentService() {",
      " super(\"single-service thread\");",
      " }",
      " @Override",
      " protected void onHandleIntent(Intent intent) {",
      " try {",
      " ......",
      " } catch (InterruptedException e) {",
      " e.printStackTrace();",
      " }",
      " }",
      "}"
    ]
  },
  "ad-onPause": {
    "scope": "java",
    "prefix": "ad-onPause",
    "body": [
      ".【推荐】当前Activity的onPause方法执行结束后才会执行下一个Activity的onCreate",
      "方法，所以在 onPause 方法中不适合做耗时较长的工作，这会影响到页面之间的跳",
      "转效率。"
    ]
  },
  "ad-DialogFragment": {
    "scope": "java",
    "prefix": "ad-DialogFragment",
    "body": [
      " 【推荐】在 Activity 中显示对话框或弹出浮层时，尽量使用 DialogFragment，而非",
      "Dialog/AlertDialog，这样便于随Activity生命周期管理对话框/弹出浮层的生命周期。",
      "正例：",
      "public void showPromptDialog(String text){",
      " DialogFragment promptDialog = new DialogFragment() {",
      " @Override",
      " public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle",
      "savedInstanceState) {",
      " getDialog().requestWindowFeature(Window.FEATURE_NO_TITLE);",
      " View view = inflater.inflate(R.layout.fragment_prompt, container);",
      " return view;",
      " }",
      " };",
      " promptDialog.show(getFragmentManager(), text);",
      "}"
    ]
  },
  "ad-AnimationDrawable": {
    "scope": "java",
    "prefix": "ad-AnimationDrawable",
    "body": [
      "0.【推荐】尽量不要使用 AnimationDrawable，它在初始化的时候就将所有图片加载",
      "到内存中，特别占内存，并且还不能释放，释放之后下次进入再次加载时会报错。",
      "说明：",
      "Android 的帧动画可以使用 AnimationDrawable 实现，但是如果你的帧动画中如果",
      "包含过多帧图片，一次性加载所有帧图片所导致的内存消耗会使低端机发生 OOM",
      "异常。帧动画所使用的图片要注意降低内存消耗，当图片比较大时，容易出现 OOM。"
    ]
  },
  "ad-ScrollView 中嵌套 List": {
    "scope": "java",
    "prefix": "ad-ScrollView 中嵌套 List",
    "body": [
      ".【强制】不能使用 ScrollView 包裹 ListView/GridView/ExpandableListVIew;因为这",
      "样会把 ListView 的所有 Item 都加载到内存中，要消耗巨大的内存和 cpu 去绘制图",
      "面。",
      "说明：",
      "ScrollView 中嵌套 List 或 RecyclerView 的做法官方明确禁止。除了开发过程中遇到",
      "的各种视觉和交互问题，这种做法对性能也有较大损耗。ListView 等 UI 组件自身有",
      "垂直滚动功能，也没有必要在嵌套一层 ScrollView。目前为了较好的 UI 体验，更贴",
      "近 Material Design 的设计，推荐使用 NestedScrollView。"
    ]
  },
  "ad-MEDIA_MOUNTED": {
    "scope": "java",
    "prefix": "ad-MEDIA_MOUNTED",
    "body": [
      "【强制】当使用外部存储时，必须检查外部存储的可用性。",
      "正例：",
      "// 读/写检查",
      "public boolean isExternalStorageWritable() {",
      " String state = Environment.getExternalStorageState();",
      " if (Environment.MEDIA_MOUNTED.equals(state)) {",
      " return true;",
      " }",
      " return false;",
      "}",
      "// 只读检查",
      "public boolean isExternalStorageReadable() {",
      " String state = Environment.getExternalStorageState();",
      " if (Environment.MEDIA_MOUNTED.equals(state) ||",
      " Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {",
      " return true;",
      " }",
      " return false;",
      "}"
    ]
  },
  "ad-sql-setTransactionSuccessful": {
    "scope": "java",
    "prefix": "ad-sql-setTransactionSuccessful",
    "body": [
      "public void insertUserPhoto(SQLiteDatabase db, String userId, String content) {",
      " ContentValues cv = new ContentValues();",
      " cv.put(\"userId\", userId);",
      " cv.put(\"content\", content);",
      " db.beginTransaction();",
      " try {",
      " db.insert(TUserPhoto, null, cv);",
      " // 其他操作",
      " db.setTransactionSuccessful();",
      " } catch (Exception e) {",

      " } finally {",
      " db.endTransaction();",
      " }",
      "}"
    ]
  },
  "ad-事务": {
    "scope": "java",
    "prefix": "ad-事务",
    "body": [
      "public void insertBulk(SQLiteDatabase db, ArrayList<UserInfo> users) {",
      " db.beginTransaction();",
      " try {",
      " for (int i = 0; i < users.size; i++) {",
      " ContentValues cv = new ContentValues();",
      " cv.put(\"userId\", users[i].userId);",
      " cv.put(\"content\", users[i].content);",
      " db.insert(TUserPhoto, null, cv);",
      " }",
      " // 其他操作",
      " db.setTransactionSuccessful();",
      " } catch (Exception e) {",
      " } finally {",
      " db.endTransaction();",
      " }",
      "}"
    ]
  },
  "ad-execSQL": {
    "scope": "java",
    "prefix": "ad-execSQL",
    "body": [
      " 【强制】执行 SQL 语句时，应使用 SQLiteDatabase#insert()、update()、delete()，",
      "不要使用 SQLiteDatabase#execSQL()，以免 SQL 注入风险。",
      "正例：",
      "public int updateUserPhoto(SQLiteDatabase db, String userId, String content) {",
      " ContentValues cv = new ContentValues();",
      " cv.put(\"content\", content);",
      " String[] args = {String.valueOf(userId)};",
      " return db.update(TUserPhoto, cv, \"userId=?\", args);",
      "}",
      "反例：",
      "public void updateUserPhoto(SQLiteDatabase db, String userId, String content) {",
      " String sqlStmt = String.format(\"UPDATE %s SET content=%s WHERE userId=%s\",",
      "TUserPhoto, userId, content);",
      " //请提高安全意识，不要直接执行字符串作为 SQL 语句",
      " db.execSQL(sqlStmt);",
      "}"
    ]
  },
  "ad-decodeFile": {
    "scope": "java",
    "prefix": "ad-decodeFile",
    "body": [
      " 【强制】加载大图片或者一次性加载多张图片，应该在异步线程中进行。图片的加",
      "载，涉及到 IO 操作，以及 CPU 密集操作，很可能引起卡顿。",
      "正例：",
      "class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {",
      " ...",
      " // 在后台进行图片解码",
      " @Override",
      " protected Bitmap doInBackground(Integer... params) {",
      " final Bitmap bitmap = BitmapFactory.decodeFile(\"some path\");",
      " return bitmap;",
      " }",
      " ...",
      "}"
    ]
  },
  "ad-inSampleSize": {
    "scope": "java",
    "prefix": "ad-inSampleSize",
    "body": [
      "public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,",
      "int reqWidth, int reqHeight) {",
      " // 首先通过 inJustDecodeBounds=true 获得图片的尺寸",
      " final BitmapFactory.Options options = new BitmapFactory.Options();",
      " options.inJustDecodeBounds = true;",
      " BitmapFactory.decodeResource(res, resId, options);",
      " // 然后根据图片分辨率以及我们实际需要展示的大小，计算压缩率",
      " options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);",
      " // 设置压缩率，并解码",
      " options.inJustDecodeBounds = false;",
      " return BitmapFactory.decodeResource(res, resId, options);",
      "}"
    ]
  },
  "ad-bitmap.recycle": {
    "scope": "java",
    "prefix": "ad-bitmap.recycle",
    "body": [
      "【强制】使用完毕的图片，应该及时回收，释放宝贵的内存。",
      "正例：",
      "Bitmap bitmap = null;",
      "loadBitmapAsync(new OnResult(result){",
      " bitmap = result;",
      "});",
      "...使用该 bitmap...",
      "// 使用结束，在 2.3.3 及以下需要调用 recycle()函数，在 2.3.3 以上 GC 会自动管理，除非你明",
      "确不需要再用。",
      "if (Build.VERSION.SDK_INT <= 10) {",
      " bitmap.recycle();",
      "}",
      "bitmap = null;"
    ]
  },
  "ad-clearAnimation": {
    "scope": "java",
    "prefix": "ad-clearAnimation",
    "body": [
      "public class MyActivity extends Activity {",
      " ImageView mImageView;",
      " Animation mAnimation;",
      " Button mBtn;",
      "/** 首次创建 activity 时调用 */",
      " @Override",
      " public void onCreate(Bundle savedInstanceState) {",
      " super.onCreate(savedInstanceState);",
      " setContentView(R.layout.main);",
      " mImageView = (ImageView)findViewById(R.id.ImageView01);",
      " mAnimation = AnimationUtils.loadAnimation(this, R.anim.anim);",
      " mBtn= (Button)findViewById(R.id.Button01);",
      " mBtn.setOnClickListener(new View.OnClickListener() {",
      " @Override",
      " public void onClick(View v) {",
      " mImageView.startAnimation(mAnimation);",
      " }",
      " });",
      " }",
      " public void onPause() {",
      " //页面退出，及时清理动画资源",
      " mImageView.clearAnimation()",
      " }",
      "}"
    ]
  },
  "ad-onAnimationEnd": {
    "scope": "java",
    "prefix": "ad-onAnimationEnd",
    "body": [
      "【推荐】在动画或者其他异步任务结束时，应该考虑回调时刻的环境是否还支持业",
      "务处理。例如 Activity 的 onStop()函数已经执行，且在该函数中主动释放了资源，",
      "此时回调中如果不做判断就会空指针崩溃。",
      "public class MyActivity extends Activity {",
      " private ImageView mImageView;",
      " private Animation mAnimation;",
      " /** 首次创建 activity 时调用 */",
      " @Override",
      " public void onCreate(Bundle savedInstanceState) {",
      " super.onCreate(savedInstanceState);",
      " setContentView(R.layout.main);",
      " mImageView = (ImageView)findViewById(R.id.ImageView01);",
      " mAnimation = AnimationUtils.loadAnimation(this, R.anim.anim);",
      " mAnimation.setAnimationListener(new AnimationListener() {",
      " @Override",
      " public void onAnimationEnd(Animation arg0) {",
      " //判断一下资源是否被释放了",
      " if (mImageView != null) {",
      " mImageView.clearAnimation();",
      " }",
      " }",
      " });",
      " mImageView.startAnimation(mAnimation);",
      " }",
      "}"
    ]
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-onAnimationEnd2": {
    "scope": "java",
    "prefix": "ad-onAnimationEnd2",
    "body": [
      "【推荐】在有强依赖 onAnimationEnd 回调的交互时，如动画播放完毕才能操作页",
      "面 ， onAnimationEnd 可 能 会 因 各 种 异 常 没 被 回 调 （ 参 考 ：",
      "https://stackoverflow.com/questions/5474923/onanimationend-is-not-getting-calle",
      "d-onanimationstart-works-fine ）， 建 议 加 上 超 时 保 护 或 通 过 postDelay 替 代",
      "onAnimationEnd。",
      "正例：",
      "View v = findViewById(R.id.xxxViewID);",
      "final FadeUpAnimation anim = new FadeUpAnimation(v);",
      "anim.setInterpolator(new AccelerateInterpolator());",
      "anim.setDuration(1000);",
      "anim.setFillAfter(true);",
      "new Handler().postDelayed(new Runnable() {",
      " public void run() {",
      " if (v != null) {",
      " v.clearAnimation();",
      " }",
      " }",
      "}, anim.getDuration());",
      "v.startAnimation(anim);"
    ]
  },
  "ad-allowbackup": {
    "scope": "java",
    "prefix": "ad-allowbackup",
    "body": [
      "【强制】将 android:allowbackup 属性设置为 false，防止 adb backup 导出数据。",
      "说明：",
      "在 AndroidManifest.xml 文件中为了方便对程序数据的备份和恢复在 Android API",
      "level 8 以后增加了 android:allowBackup 属性值。默认情况下这个属性值为 true,故",
      "当 allowBackup 标志值为 true 时，即可通过 adb backup 和 adb restore 来备份和恢",
      "复应用程序数据。",
      "正例：",
      "<application",
      " android:allowBackup=\"false\"",
      " android:largeHeap=\"true\"",
      " android:icon=\"@drawable/test_launcher\"",
      " android:label=\"@string/app_name\"",
      " android:theme=\"@style/AppTheme\" >"
    ]
  },
  "ad-X509TrustManager": {
    "scope": "java",
    "prefix": "ad-X509TrustManager",
    "body": [
      " 【强制】利用 X509TrustManager 子类中的 checkServerTrusted 函数效验服务器端",
      "证书的合法性。",
      "说明：",
      "在实现的 X509TrustManager 子类中未对服务端的证书做检验，这样会导致不被信",
      "任的证书绕过证书效验机制。",
      "反例：",
      "TrustManager tm = new X509TrustManager() {",
      " public void checkClientTrusted(X509Certificate[] chain, String authType)",
      " throws CertificateException {",
      " //do nothing，接受任意客户端证书",
      " }",
      " public void checkServerTrusted(X509Certificate[] chain, String authType)",
      " throws CertificateException {",
      " //do nothing，接受任意服务端证书",
      " }",
      " public X509Certificate[] getAcceptedIssuers() {",
      " return null;",
      " }",
      "};",
      "sslContext.init(null, new TrustManager[] { tm }, null);"
    ]
  },
  "ad-addJavascriptInterface": {
    "scope": "java",
    "prefix": "ad-addJavascriptInterface",
    "body": [
      "【强制】除非 min API level >=17，请注意 addJavascriptInterface 的使用。",
      "说明：",
      "API level>=17，允许 js 被调用的函数必须以@JavascriptInterface 进行注解，因此",
      "不受影响； 对于 API level < 17，尽量不要使用 addJavascriptInterface，如果一定",
      "要用，那么："
    ]
  },
  "ad-禁止录屏": {
    "scope": "java",
    "prefix": "ad-禁止录屏",
    "body": [
      "【推荐】Android5.0 以后安全性要求 较高的应用 应该使 用 window.setFlag",
      "(LayoutParam.FLAG_SECURE) 禁止录屏。"
    ]
  },
  "ad-equals": {
    "scope": "java",
    "prefix": "ad-equals",
    "body": [
      "  @Override",
      "59    public boolean equals(Object o) {",
      "60        if (this == o) {",
      "61            return true;",
      "62        }",
      "63        if (o == null || o.getClass() != Song.class) {",
      "64            return false;",
      "65        }",
      "66",
      "67        Song that = (Song) o;",
      "68",
      "69        return mSongId == that.getSongId();",
      "70    }",
      "71",
      "72    @Override",
      "73    public int hashCode() {",
      "74        return Long.hashCode(mSongId);",
      "75    }"
    ]
  },
  "ad-eventbus": {
    "scope": "java",
    "prefix": "ad-eventbus",
    "body": [
      "EventBus in 3 steps",
      "Define events:",
      "",
      "public static class MessageEvent { /* Additional fields if needed */ }",
      "Prepare subscribers: Declare and annotate your subscribing method, optionally specify a thread mode:",
      "",
      "@Subscribe(threadMode = ThreadMode.MAIN)  ",
      "public void onMessageEvent(MessageEvent event) {/* Do something */};",
      "Register and unregister your subscriber. For example on Android, activities and fragments should usually register according to their life cycle:",
      "",
      " @Override",
      " public void onStart() {",
      "     super.onStart();",
      "     EventBus.getDefault().register(this);",
      " }",
      "",
      " @Override",
      " public void onStop() {",
      "     super.onStop();",
      "     EventBus.getDefault().unregister(this);",
      " }",
      "Post events:",
      "",
      " EventBus.getDefault().post(new MessageEvent());",
      "Read the full getting started guide.",
      "",
      "There are also some examples.",
      "",
      "Note: we highly recommend the EventBus annotation processor with its subscriber index. This will avoid some reflection related problems seen in the wild.",
      "",
      "Add EventBus to your project",
      "",
      "",
      "Available on Maven Central.",
      "",
      "Via Gradle:",
      "",
      "implementation 'org.greenrobot:eventbus:3.2.0'",
      "Via Maven:",
      "",
      "<dependency>",
      "    <groupId>org.greenrobot</groupId>",
      "    <artifactId>eventbus</artifactId>",
      "    <version>3.2.0</version>",
      "</dependency>"
    ]
  },
  "ad-Fresco": {
    "scope": "java",
    "prefix": "ad-Fresco",
    "body": [
      "如果你仅仅是想简单下载一张网络图片，在下载完成之前，显示一张占位图，那么简单使用 SimpleDraweeView 即可。",
      "",
      "在加载图片之前，你必须初始化Fresco类。你只需要调用Fresco.initialize一次即可完成初始化，在 Application 里面做这件事再适合不过了（如下面的代码），注意多次的调用初始化是无意义的。",
      "",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "[MyApplication.java]",
      "public class MyApplication extends Application {",
      "	@Override",
      "	public void onCreate() {",
      "		super.onCreate();",
      "		Fresco.initialize(this);",
      "	}",
      "}",
      "做完上面的工作后，你需要在 AndroidManifest.xml 中指定你的 Application 类。为了下载网络图片，请确认你声明了网络请求的权限。",
      "",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "10",
      "11",
      "12",
      "13",
      "  <manifest",
      "    ...",
      "    >",
      "    <uses-permission android:name=\"android.permission.INTERNET\" />",
      "    <application",
      "      ...",
      "      android:label=\"@string/app_name\"",
      "      android:name=\".MyApplication\"",
      "      >",
      "      ...",
      "    </application>",
      "    ...",
      "  </manifest>",
      "在xml布局文件中, 加入命名空间：",
      "",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "<!-- 其他元素-->",
      "<LinearLayout",
      "    xmlns:android=\"http://schemas.android.com/apk/res/android\"",
      "    xmlns:fresco=\"http://schemas.android.com/apk/res-auto\"",
      "    android:layout_height=\"match_parent\"",
      "    android:layout_width=\"match_parent\">",
      "加入SimpleDraweeView:",
      "",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "<com.facebook.drawee.view.SimpleDraweeView",
      "    android:id=\"@+id/my_image_view\"",
      "    android:layout_width=\"130dp\"",
      "    android:layout_height=\"130dp\"",
      "    fresco:placeholderImage=\"@drawable/my_drawable\"",
      "  />",
      "开始加载图片:",
      "",
      "1",
      "2",
      "3",
      "Uri uri = Uri.parse(\"https://raw.githubusercontent.com/facebook/fresco/gh-pages/static/logo.png\");",
      "SimpleDraweeView draweeView = (SimpleDraweeView) findViewById(R.id.my_image_view);",
      "draweeView.setImageURI(uri);",
      "剩下的，Fresco会替你完成:",
      "",
      "显示占位图直到加载完成；",
      "下载图片；",
      "缓存图片；",
      "图片不再显示时，从内存中移除；",
      "等等等等。",
      "Fresco 支持许多URI格式。",
      "",
      "特别注意：Fresco 不支持 相对路径的URI. 所有的 URI 都必须是绝对路径，并且带上该 URI 的 scheme。",
      "",
      "如下：",
      "",
      "类型 SCHEME 示例",
      "远程图片 http://, https://  HttpURLConnection 或者参考 使用其他网络加载方案",
      "本地文件 file:// FileInputStream",
      "Content provider content:// ContentResolver",
      "asset目录下的资源 asset:// AssetManager",
      "res目录下的资源 res:// Resources.openRawResource",
      "Uri中指定图片数据 data:mime/type;base64, 数据类型必须符合 rfc2397规定 (仅支持 UTF-8)",
      "res 示例:",
      "",
      "1",
      "Uri uri = Uri.parse(\"res://包名(实际可以是任何字符串甚至留空)/\" + R.drawable.ic_launcher);",
      "",
      "注意，只有图片资源才能使用在Image pipeline中，比如(PNG)。其他资源类型，比如字符串，或者XML Drawable在Image pipeline中没有意义。所以加载的资源不支持这些类型。",
      "",
      "像ShapeDrawable这样声明在XML中的drawable可能引起困惑。注意到这毕竟不是图片。如果想把这样的drawable作为图像显示，那么把这个drawable设置为占位图，然后把URI设置为null。",
      "下面的例子给出了可以配置的各种选项：",
      "",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "10",
      "11",
      "12",
      "13",
      "14",
      "15",
      "16",
      "17",
      "18",
      "19",
      "20",
      "21",
      "22",
      "23",
      "24",
      "25",
      "26",
      "27",
      "28",
      "<com.facebook.drawee.view.SimpleDraweeView",
      "  android:id=\"@+id/my_image_view\"",
      "  android:layout_width=\"20dp\"",
      "  android:layout_height=\"20dp\"",
      "  fresco:fadeDuration=\"300\"",
      "  fresco:actualImageScaleType=\"focusCrop\"",
      "  fresco:placeholderImage=\"@color/wait_color\"",
      "  fresco:placeholderImageScaleType=\"fitCenter\"",
      "  fresco:failureImage=\"@drawable/error\"",
      "  fresco:failureImageScaleType=\"centerInside\"",
      "  fresco:retryImage=\"@drawable/retrying\"",
      "  fresco:retryImageScaleType=\"centerCrop\"",
      "  fresco:progressBarImage=\"@drawable/progress_bar\"",
      "  fresco:progressBarImageScaleType=\"centerInside\"",
      "  fresco:progressBarAutoRotateInterval=\"1000\"",
      "  fresco:backgroundImage=\"@color/blue\"",
      "  fresco:overlayImage=\"@drawable/watermark\"",
      "  fresco:pressedStateOverlayImage=\"@color/red\"",
      "  fresco:roundAsCircle=\"false\"",
      "  fresco:roundedCornerRadius=\"1dp\"",
      "  fresco:roundTopLeft=\"true\"",
      "  fresco:roundTopRight=\"false\"",
      "  fresco:roundBottomLeft=\"false\"",
      "  fresco:roundBottomRight=\"true\"",
      "  fresco:roundWithOverlayColor=\"@color/corner_color\"",
      "  fresco:roundingBorderWidth=\"2dp\"",
      "  fresco:roundingBorderColor=\"@color/border_color\"",
      "/>",
      "强制性的宽高",
      "你必须声明 android:layout_width 和 android:layout_height。如果没有在XML中声明这两个属性，将无法正确加载图像。",
      "",
      "wrap_content",
      "Drawees 不支持 wrap_content 属性。",
      "",
      "所下载的图像可能和占位图尺寸不一致，如果设置出错图或者重试图的话，这些图的尺寸也可能和所下载的图尺寸不一致。",
      "",
      "如果大小不一致，假设使用的是 wrap_content，图像下载完之后，View将会重新layout，改变大小和位置。这将会导致界面跳跃。关于它的更多信息，请参考wrap_content",
      "",
      "固定宽高比",
      "只有希望显示固定的宽高比时，可以使用wrap_content。",
      "",
      "如果希望图片以特定的宽高比例显示，例如 4:3，可以在XML中指定:",
      "",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "<com.facebook.drawee.view.SimpleDraweeView",
      "    android:id=\"@+id/my_image_view\"",
      "    android:layout_width=\"20dp\"",
      "    android:layout_height=\"wrap_content\"",
      "    fresco:viewAspectRatio=\"1.33\"",
      "    <!-- other attributes -->",
      "也可以在代码中指定显示比例：",
      "",
      "1",
      "mSimpleDraweeView.setAspectRatio(1.33f);",
      "可用的缩放类型",
      "类型 描述",
      "center 居中，无缩放。",
      "centerCrop  保持宽高比缩小或放大，使得两边都大于或等于显示边界，且宽或高契合显示边界。居中显示。",
      "focusCrop 同centerCrop, 但居中点不是中点，而是指定的某个点。",
      "centerInside 缩放图片使两边都在显示边界内，居中显示。和 fitCenter 不同，不会对图片进行放大。",
      "如果图尺寸大于显示边界，则保持长宽比缩小图片。",
      "fitCenter 保持宽高比，缩小或者放大，使得图片完全显示在显示边界内，且宽或高契合显示边界。居中显示。",
      "fitStart 同上。但不居中，和显示边界左上对齐。",
      "fitEnd 同fitCenter， 但不居中，和显示边界右下对齐。",
      "fitXY 不保存宽高比，填充满显示边界。",
      "none 如要使用tile mode显示, 需要设置为none",
      "监听下载事件",
      "动机",
      "你也许想在图片下载完成后执行一些动作，比如使某个别的 View 可见，或者显示一些文字。你也许还想在下载失败后做一些事，比如向用户显示一条失败信息。",
      "",
      "图片是后台线程异步加载的，所以你需要某一方式来监听 DraweeController 传递的事件。我们可以使用一个 ControllerListener 实现事件的监听。",
      "",
      "在监听事件回调时，无法修改图片，如果需要修改图片，可使用后处理器(Postprocessor)",
      "",
      "使用方法",
      "简单定义一个ControllerListener即可，推荐继承BaseControllerListener:",
      "",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "10",
      "11",
      "12",
      "13",
      "14",
      "15",
      "16",
      "17",
      "18",
      "19",
      "20",
      "21",
      "22",
      "23",
      "24",
      "25",
      "26",
      "27",
      "28",
      "29",
      "30",
      "31",
      "32",
      "33",
      "34",
      "35",
      "36",
      "37",
      "38",
      "ControllerListener controllerListener = new BaseControllerListener<ImageInfo>() {",
      "    @Override",
      "    public void onFinalImageSet(",
      "        String id,",
      "        @Nullable ImageInfo imageInfo,",
      "        @Nullable Animatable anim) {",
      "      if (imageInfo == null) {",
      "        return;",
      "      }",
      "      QualityInfo qualityInfo = imageInfo.getQualityInfo();",
      "      FLog.d(\"Final image received! \" +",
      "          \"Size %d x %d\",",
      "          \"Quality level %d, good enough: %s, full quality: %s\",",
      "          imageInfo.getWidth(),",
      "          imageInfo.getHeight(),",
      "          qualityInfo.getQuality(),",
      "          qualityInfo.isOfGoodEnoughQuality(),",
      "          qualityInfo.isOfFullQuality());",
      "    }",
      "",
      "    @Override",
      "    public void onIntermediateImageSet(String id, @Nullable ImageInfo imageInfo) {",
      "      FLog.d(\"Intermediate image received\");",
      "    }",
      "",
      "    @Override",
      "    public void onFailure(String id, Throwable throwable) {",
      "      FLog.e(getClass(), throwable, \"Error loading %s\", id)",
      "    }",
      "};",
      "",
      "Uri uri;",
      "DraweeController controller = Fresco.newDraweeControllerBuilder()",
      "    .setControllerListener(controllerListener)",
      "    .setUri(uri)",
      "    // other setters",
      "    .build();",
      "mSimpleDraweeView.setController(controller);",
      "所有的图片加载，onFinalImageSet 或者 onFailure 都会被触发。前者在成功时，后者在失败时。",
      "",
      "如果允许呈现渐进式JPEG，同时图片也是渐进式图片，onIntermediateImageSet会在每个扫描被解码后回调。具体图片的那个扫描会被解码，参见渐进式JPEG图"
    ]
  },
  "ad-arouter": {
    "scope": "java",
    "prefix": "ad-arouter",
    "body": [
      "一、功能介绍",
      "支持直接解析标准URL进行跳转，并自动注入参数到目标页面中",
      "支持多模块工程使用",
      "支持添加多个拦截器，自定义拦截顺序",
      "支持依赖注入，可单独作为依赖注入框架使用",
      "支持InstantRun",
      "支持MultiDex(Google方案)",
      "映射关系按组分类、多级管理，按需初始化",
      "支持用户指定全局降级与局部降级策略",
      "页面、拦截器、服务等组件均自动注册到框架",
      "支持多种方式配置转场动画",
      "支持获取Fragment",
      "完全支持Kotlin以及混编(配置见文末 其他#5)",
      "支持第三方 App 加固(使用 arouter-register 实现自动注册)",
      "支持生成路由文档",
      "提供 IDE 插件便捷的关联路径和目标类",
      "二、典型应用",
      "从外部URL映射到内部页面，以及参数传递与解析",
      "跨模块页面跳转，模块间解耦",
      "拦截跳转过程，处理登陆、埋点等逻辑",
      "跨模块API调用，通过控制反转来做组件解耦",
      "三、基础功能",
      "添加依赖和配置",
      "",
      "android {",
      "    defaultConfig {",
      "        ...",
      "        javaCompileOptions {",
      "            annotationProcessorOptions {",
      "                arguments = [AROUTER_MODULE_NAME: project.getName()]",
      "            }",
      "        }",
      "    }",
      "}",
      "",
      "dependencies {",
      "    // 替换成最新版本, 需要注意的是api",
      "    // 要与compiler匹配使用，均使用最新版可以保证兼容",
      "    compile 'com.alibaba:arouter-api:x.x.x'",
      "    annotationProcessor 'com.alibaba:arouter-compiler:x.x.x'",
      "    ...",
      "}",
      "// 旧版本gradle插件(< 2.2)，可以使用apt插件，配置方法见文末'其他#4'",
      "// Kotlin配置参考文末'其他#5'",
      "添加注解",
      "",
      "// 在支持路由的页面上添加注解(必选)",
      "// 这里的路径需要注意的是至少需要有两级，/xx/xx",
      "@Route(path = \"/test/activity\")",
      "public class YourActivity extend Activity {",
      "    ...",
      "}",
      "初始化SDK",
      "",
      "if (isDebug()) {           // 这两行必须写在init之前，否则这些配置在init过程中将无效",
      "    ARouter.openLog();     // 打印日志",
      "    ARouter.openDebug();   // 开启调试模式(如果在InstantRun模式下运行，必须开启调试模式！线上版本需要关闭,否则有安全风险)",
      "}",
      "ARouter.init(mApplication); // 尽可能早，推荐在Application中初始化",
      "发起路由操作",
      "",
      "// 1. 应用内简单的跳转(通过URL跳转在'进阶用法'中)",
      "ARouter.getInstance().build(\"/test/activity\").navigation();",
      "",
      "// 2. 跳转并携带参数",
      "ARouter.getInstance().build(\"/test/1\")",
      "            .withLong(\"key1\", 666L)",
      "            .withString(\"key3\", \"888\")",
      "            .withObject(\"key4\", new Test(\"Jack\", \"Rose\"))",
      "            .navigation();",
      "添加混淆规则(如果使用了Proguard)",
      "",
      "-keep public class com.alibaba.android.arouter.routes.**{*;}",
      "-keep public class com.alibaba.android.arouter.facade.**{*;}",
      "-keep class * implements com.alibaba.android.arouter.facade.template.ISyringe{*;}",
      "",
      "# 如果使用了 byType 的方式获取 Service，需添加下面规则，保护接口",
      "-keep interface * implements com.alibaba.android.arouter.facade.template.IProvider",
      "",
      "# 如果使用了 单类注入，即不定义接口实现 IProvider，需添加下面规则，保护实现",
      "# -keep class * implements com.alibaba.android.arouter.facade.template.IProvider",
      "使用 Gradle 插件实现路由表的自动加载 (可选)",
      "",
      "apply plugin: 'com.alibaba.arouter'",
      "",
      "buildscript {",
      "    repositories {",
      "        jcenter()",
      "    }",
      "",
      "    dependencies {",
      "        classpath \"com.alibaba:arouter-register:?\"",
      "    }",
      "}",
      "可选使用，通过 ARouter 提供的注册插件进行路由表的自动加载(power by AutoRegister)， 默认通过扫描 dex 的方式 进行加载通过 gradle 插件进行自动注册可以缩短初始化时间解决应用加固导致无法直接访问 dex 文件，初始化失败的问题，需要注意的是，该插件必须搭配 api 1.3.0 以上版本使用！",
      "",
      "使用 IDE 插件导航到目标类 (可选)",
      "",
      "在 Android Studio 插件市场中搜索 ARouter Helper, 或者直接下载文档上方 最新版本 中列出的 arouter-idea-plugin zip 安装包手动安装，安装后 插件无任何设置，可以在跳转代码的行首找到一个图标 (navigation) 点击该图标，即可跳转到标识了代码中路径的目标类",
      "",
      "四、进阶用法",
      "通过URL跳转",
      "",
      "// 新建一个Activity用于监听Scheme事件,之后直接把url传递给ARouter即可",
      "public class SchemeFilterActivity extends Activity {",
      "    @Override",
      "    protected void onCreate(Bundle savedInstanceState) {",
      "    super.onCreate(savedInstanceState);",
      "",
      "    Uri uri = getIntent().getData();",
      "    ARouter.getInstance().build(uri).navigation();",
      "    finish();",
      "    }",
      "}",
      "AndroidManifest.xml",
      "",
      "<activity android:name=\".activity.SchemeFilterActivity\">",
      "    <!-- Scheme -->",
      "    <intent-filter>",
      "        <data",
      "        android:host=\"m.aliyun.com\"",
      "        android:scheme=\"arouter\"/>",
      "",
      "        <action android:name=\"android.intent.action.VIEW\"/>",
      "",
      "        <category android:name=\"android.intent.category.DEFAULT\"/>",
      "        <category android:name=\"android.intent.category.BROWSABLE\"/>",
      "    </intent-filter>",
      "</activity>",
      "解析参数",
      "",
      "// 为每一个参数声明一个字段，并使用 @Autowired 标注",
      "// URL中不能传递Parcelable类型数据，通过ARouter api可以传递Parcelable对象",
      "@Route(path = \"/test/activity\")",
      "public class Test1Activity extends Activity {",
      "    @Autowired",
      "    public String name;",
      "    @Autowired",
      "    int age;",
      "    ",
      "    // 通过name来映射URL中的不同参数",
      "    @Autowired(name = \"girl\") ",
      "    boolean boy;",
      "    ",
      "    // 支持解析自定义对象，URL中使用json传递",
      "    @Autowired",
      "    TestObj obj;      ",
      "    ",
      "    // 使用 withObject 传递 List 和 Map 的实现了",
      "    // Serializable 接口的实现类(ArrayList/HashMap)",
      "    // 的时候，接收该对象的地方不能标注具体的实现类类型",
      "    // 应仅标注为 List 或 Map，否则会影响序列化中类型",
      "    // 的判断, 其他类似情况需要同样处理        ",
      "    @Autowired",
      "    List<TestObj> list;",
      "    @Autowired",
      "    Map<String, List<TestObj>> map;",
      "    ",
      "    @Override",
      "    protected void onCreate(Bundle savedInstanceState) {",
      "    super.onCreate(savedInstanceState);",
      "    ARouter.getInstance().inject(this);",
      "",
      "    // ARouter会自动对字段进行赋值，无需主动获取",
      "    Log.d(\"param\", name + age + boy);",
      "    }",
      "}",
      "",
      "",
      "// 如果需要传递自定义对象，新建一个类（并非自定义对象类），然后实现 SerializationService,并使用@Route注解标注(方便用户自行选择序列化方式)，例如：",
      "@Route(path = \"/yourservicegroupname/json\")",
      "public class JsonServiceImpl implements SerializationService {",
      "    @Override",
      "    public void init(Context context) {",
      "",
      "    }",
      "",
      "    @Override",
      "    public <T> T json2Object(String text, Class<T> clazz) {",
      "        return JSON.parseObject(text, clazz);",
      "    }",
      "",
      "    @Override",
      "    public String object2Json(Object instance) {",
      "        return JSON.toJSONString(instance);",
      "    }",
      "}",
      "声明拦截器(拦截跳转过程，面向切面编程)",
      "",
      "// 比较经典的应用就是在跳转过程中处理登陆事件，这样就不需要在目标页重复做登陆检查",
      "// 拦截器会在跳转之间执行，多个拦截器会按优先级顺序依次执行",
      "@Interceptor(priority = 8, name = \"测试用拦截器\")",
      "public class TestInterceptor implements IInterceptor {",
      "    @Override",
      "    public void process(Postcard postcard, InterceptorCallback callback) {",
      "    ...",
      "    callback.onContinue(postcard);  // 处理完成，交还控制权",
      "    // callback.onInterrupt(new RuntimeException(\"我觉得有点异常\"));      // 觉得有问题，中断路由流程",
      "",
      "    // 以上两种至少需要调用其中一种，否则不会继续路由",
      "    }",
      "",
      "    @Override",
      "    public void init(Context context) {",
      "    // 拦截器的初始化，会在sdk初始化的时候调用该方法，仅会调用一次",
      "    }",
      "}",
      "处理跳转结果",
      "",
      "// 使用两个参数的navigation方法，可以获取单次跳转的结果",
      "ARouter.getInstance().build(\"/test/1\").navigation(this, new NavigationCallback() {",
      "    @Override",
      "    public void onFound(Postcard postcard) {",
      "    ...",
      "    }",
      "",
      "    @Override",
      "    public void onLost(Postcard postcard) {",
      "    ...",
      "    }",
      "});",
      "自定义全局降级策略",
      "",
      "// 实现DegradeService接口，并加上一个Path内容任意的注解即可",
      "@Route(path = \"/xxx/xxx\")",
      "public class DegradeServiceImpl implements DegradeService {",
      "@Override",
      "public void onLost(Context context, Postcard postcard) {",
      "    // do something.",
      "}",
      "",
      "@Override",
      "public void init(Context context) {",
      "",
      "}",
      "}",
      "为目标页面声明更多信息",
      "",
      "// 我们经常需要在目标页面中配置一些属性，比方说\"是否需要登陆\"之类的",
      "// 可以通过 Route 注解中的 extras 属性进行扩展，这个属性是一个 int值，换句话说，单个int有4字节，也就是32位，可以配置32个开关",
      "// 剩下的可以自行发挥，通过字节操作可以标识32个开关，通过开关标记目标页面的一些属性，在拦截器中可以拿到这个标记进行业务逻辑判断",
      "@Route(path = \"/test/activity\", extras = Consts.XXXX)",
      "通过依赖注入解耦:服务管理(一) 暴露服务",
      "",
      "// 声明接口,其他组件通过接口来调用服务",
      "public interface HelloService extends IProvider {",
      "    String sayHello(String name);",
      "}",
      "",
      "// 实现接口",
      "@Route(path = \"/yourservicegroupname/hello\", name = \"测试服务\")",
      "public class HelloServiceImpl implements HelloService {",
      "",
      "    @Override",
      "    public String sayHello(String name) {",
      "    return \"hello, \" + name;",
      "    }",
      "",
      "    @Override",
      "    public void init(Context context) {",
      "",
      "    }",
      "}",
      "通过依赖注入解耦:服务管理(二) 发现服务",
      "",
      "public class Test {",
      "    @Autowired",
      "    HelloService helloService;",
      "",
      "    @Autowired(name = \"/yourservicegroupname/hello\")",
      "    HelloService helloService2;",
      "",
      "    HelloService helloService3;",
      "",
      "    HelloService helloService4;",
      "",
      "    public Test() {",
      "    ARouter.getInstance().inject(this);",
      "    }",
      "",
      "    public void testService() {",
      "    // 1. (推荐)使用依赖注入的方式发现服务,通过注解标注字段,即可使用，无需主动获取",
      "    // Autowired注解中标注name之后，将会使用byName的方式注入对应的字段，不设置name属性，会默认使用byType的方式发现服务(当同一接口有多个实现的时候，必须使用byName的方式发现服务)",
      "    helloService.sayHello(\"Vergil\");",
      "    helloService2.sayHello(\"Vergil\");",
      "",
      "    // 2. 使用依赖查找的方式发现服务，主动去发现服务并使用，下面两种方式分别是byName和byType",
      "    helloService3 = ARouter.getInstance().navigation(HelloService.class);",
      "    helloService4 = (HelloService) ARouter.getInstance().build(\"/yourservicegroupname/hello\").navigation();",
      "    helloService3.sayHello(\"Vergil\");",
      "    helloService4.sayHello(\"Vergil\");",
      "    }",
      "}",
      "预处理服务",
      "",
      "// 实现 PretreatmentService 接口，并加上一个Path内容任意的注解即可",
      "@Route(path = \"/xxx/xxx\")",
      "public class PretreatmentServiceImpl implements PretreatmentService {",
      "    @Override",
      "    public boolean onPretreatment(Context context, Postcard postcard) {",
      "        // 跳转前预处理，如果需要自行处理跳转，该方法返回 false 即可",
      "    }",
      "",
      "    @Override",
      "    public void init(Context context) {",
      "",
      "    }",
      "}",
      "五、更多功能",
      "初始化中的其他设置",
      "",
      "ARouter.openLog(); // 开启日志",
      "ARouter.openDebug(); // 使用InstantRun的时候，需要打开该开关，上线之后关闭，否则有安全风险",
      "ARouter.printStackTrace(); // 打印日志的时候打印线程堆栈",
      "详细的API说明",
      "",
      "// 构建标准的路由请求",
      "ARouter.getInstance().build(\"/home/main\").navigation();",
      "",
      "// 构建标准的路由请求，并指定分组",
      "ARouter.getInstance().build(\"/home/main\", \"ap\").navigation();",
      "",
      "// 构建标准的路由请求，通过Uri直接解析",
      "Uri uri;",
      "ARouter.getInstance().build(uri).navigation();",
      "",
      "// 构建标准的路由请求，startActivityForResult",
      "// navigation的第一个参数必须是Activity，第二个参数则是RequestCode",
      "ARouter.getInstance().build(\"/home/main\", \"ap\").navigation(this, 5);",
      "",
      "// 直接传递Bundle",
      "Bundle params = new Bundle();",
      "ARouter.getInstance()",
      "    .build(\"/home/main\")",
      "    .with(params)",
      "    .navigation();",
      "",
      "// 指定Flag",
      "ARouter.getInstance()",
      "    .build(\"/home/main\")",
      "    .withFlags();",
      "    .navigation();",
      "",
      "// 获取Fragment",
      "Fragment fragment = (Fragment) ARouter.getInstance().build(\"/test/fragment\").navigation();",
      "                    ",
      "// 对象传递",
      "ARouter.getInstance()",
      "    .withObject(\"key\", new TestObj(\"Jack\", \"Rose\"))",
      "    .navigation();",
      "",
      "// 觉得接口不够多，可以直接拿出Bundle赋值",
      "ARouter.getInstance()",
      "        .build(\"/home/main\")",
      "        .getExtra();",
      "",
      "// 转场动画(常规方式)",
      "ARouter.getInstance()",
      "    .build(\"/test/activity2\")",
      "    .withTransition(R.anim.slide_in_bottom, R.anim.slide_out_bottom)",
      "    .navigation(this);",
      "",
      "// 转场动画(API16+)",
      "ActivityOptionsCompat compat = ActivityOptionsCompat.",
      "    makeScaleUpAnimation(v, v.getWidth() / 2, v.getHeight() / 2, 0, 0);",
      "",
      "// ps. makeSceneTransitionAnimation 使用共享元素的时候，需要在navigation方法中传入当前Activity",
      "",
      "ARouter.getInstance()",
      "    .build(\"/test/activity2\")",
      "    .withOptionsCompat(compat)",
      "    .navigation();",
      "        ",
      "// 使用绿色通道(跳过所有的拦截器)",
      "ARouter.getInstance().build(\"/home/main\").greenChannel().navigation();",
      "",
      "// 使用自己的日志工具打印日志",
      "ARouter.setLogger();",
      "",
      "// 使用自己提供的线程池",
      "ARouter.setExecutor();",
      "获取原始的URI",
      "",
      "String uriStr = getIntent().getStringExtra(ARouter.RAW_URI);",
      "重写跳转URL",
      "",
      "// 实现PathReplaceService接口，并加上一个Path内容任意的注解即可",
      "@Route(path = \"/xxx/xxx\") // 必须标明注解",
      "public class PathReplaceServiceImpl implements PathReplaceService {",
      "    /**",
      "    * For normal path.",
      "    *",
      "    * @param path raw path",
      "    */",
      "    String forString(String path) {",
      "    return path;    // 按照一定的规则处理之后返回处理后的结果",
      "    }",
      "",
      "/**",
      "    * For uri type.",
      "    *",
      "    * @param uri raw uri",
      "    */",
      "Uri forUri(Uri uri) {",
      "    return url;    // 按照一定的规则处理之后返回处理后的结果",
      "}",
      "}",
      "生成路由文档",
      "",
      "// 更新 build.gradle, 添加参数 AROUTER_GENERATE_DOC = enable",
      "// 生成的文档路径 : build/generated/source/apt/(debug or release)/com/alibaba/android/arouter/docs/arouter-map-of-${moduleName}.json",
      "android {",
      "    defaultConfig {",
      "        ...",
      "        javaCompileOptions {",
      "            annotationProcessorOptions {",
      "                arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: \"enable\"]",
      "            }",
      "        }",
      "    }",
      "}",
      "六、其他",
      "路由中的分组概念",
      "",
      "SDK中针对所有的路径(/test/1 /test/2)进行分组，分组只有在分组中的某一个路径第一次被访问的时候，该分组才会被初始化",
      "可以通过 @Route 注解主动指定分组，否则使用路径中第一段字符串(/*/)作为分组",
      "注意：一旦主动指定分组之后，应用内路由需要使用 ARouter.getInstance().build(path, group) 进行跳转，手动指定分组，否则无法找到",
      "@Route(path = \"/test/1\", group = \"app\")",
      "拦截器和服务的异同",
      "",
      "拦截器和服务所需要实现的接口不同，但是结构类似，都存在 init(Context context) 方法，但是两者的调用时机不同",
      "拦截器因为其特殊性，会被任何一次路由所触发，拦截器会在ARouter初始化的时候异步初始化，如果第一次路由的时候拦截器还没有初始化结束，路由会等待，直到初始化完成。",
      "服务没有该限制，某一服务可能在App整个生命周期中都不会用到，所以服务只有被调用的时候才会触发初始化操作",
      "旧版本gradle插件的配置方式",
      "",
      "apply plugin: 'com.neenbedankt.android-apt'",
      "",
      "buildscript {",
      "    repositories {",
      "    jcenter()",
      "    }",
      "",
      "    dependencies {",
      "    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'",
      "    }",
      "}",
      "",
      "apt {",
      "    arguments {",
      "    AROUTER_MODULE_NAME project.getName();",
      "    }",
      "}",
      "",
      "dependencies {",
      "    compile 'com.alibaba:arouter-api:x.x.x'",
      "    apt 'com.alibaba:arouter-compiler:x.x.x'",
      "    ...",
      "}",
      "Kotlin项目中的配置方式",
      "",
      "// 可以参考 module-kotlin 模块中的写法",
      "apply plugin: 'kotlin-kapt'",
      "",
      "kapt {",
      "    arguments {",
      "        arg(\"AROUTER_MODULE_NAME\", project.getName())",
      "    }",
      "}",
      "",
      "dependencies {",
      "    compile 'com.alibaba:arouter-api:x.x.x'",
      "    kapt 'com.alibaba:arouter-compiler:x.x.x'",
      "    ...",
      "}",
      "七、Q&A",
      "\"W/ARouter::: ARouter::No postcard![ ]\"",
      "",
      "这个Log正常的情况下也会打印出来，如果您的代码中没有实现DegradeService和PathReplaceService的话，因为ARouter本身的一些功能也依赖 自己提供的Service管理功能，ARouter在跳转的时候会尝试寻找用户实现的PathReplaceService，用于对路径进行重写(可选功能)，所以如果您没有 实现这个服务的话，也会抛出这个日志",
      "",
      "推荐在app中实现DegradeService、PathReplaceService",
      "",
      "\"W/ARouter::: ARouter::There is no route match the path [/xxx/xxx], in group [xxx][ ]\"",
      "",
      "通常来说这种情况是没有找到目标页面，目标不存在",
      "如果这个页面是存在的，那么您可以按照下面的步骤进行排查",
      "检查目标页面的注解是否配置正确，正确的注解形式应该是 (@Route(path=\"/test/test\"), 如没有特殊需求，请勿指定group字段，废弃功能)",
      "检查目标页面所在的模块的gradle脚本中是否依赖了 arouter-compiler sdk (需要注意的是，要使用apt依赖，而不是compile关键字依赖)",
      "检查编译打包日志，是否出现了形如 ARouter::�Compiler >>> xxxxx 的日志，日志中会打印出发现的路由目标",
      "启动App的时候，开启debug、log(openDebug/openLog), 查看映射表是否已经被扫描出来，形如 D/ARouter::: LogisticsCenter has already been loaded, GroupIndex[4]，GroupIndex > 0",
      "开启InstantRun之后无法跳转(高版本Gradle插件下无法跳转)？",
      "",
      "因为开启InstantRun之后，很多类文件不会放在原本的dex中，需要单独去加载，ARouter默认不会去加载这些文件，因为安全原因，只有在开启了openDebug之后 ARouter才回去加载InstantRun产生的文件，所以在以上的情况下，需要在init之前调用openDebug",
      "",
      "TransformException:java.util.zip.ZipException: duplicate entry ....",
      "",
      "ARouter有按组加载的机制，关于分组可以参考 6-1 部分，ARouter允许一个module中存在多个分组，但是不允许多个module中存在相同的分组，会导致映射文件冲突",
      "",
      "Kotlin类中的字段无法注入如何解决？",
      "",
      "首先，Kotlin中的字段是可以自动注入的，但是注入代码为了减少反射，使用的字段赋值的方式来注入的，Kotlin默认会生成set/get方法，并把属性设置为private 所以只要保证Kotlin中字段可见性不是private即可，简单解决可以在字段上添加 @JvmField",
      "",
      "通过URL跳转之后，在intent中拿不到参数如何解决？",
      "",
      "需要注意的是，如果不使用自动注入，那么可以不写 ARouter.getInstance().inject(this)，但是需要取值的字段仍然需要标上 @Autowired 注解，因为 只有标上注解之后，ARouter才能知道以哪一种数据类型提取URL中的参数并放入Intent中，这样您才能在intent中获取到对应的参数",
      "",
      "新增页面之后，无法跳转？",
      "",
      "ARouter加载Dex中的映射文件会有一定耗时，所以ARouter会缓存映射文件，直到新版本升级(版本号或者versionCode变化)，而如果是开发版本(ARouter.openDebug())， ARouter 每次启动都会重新加载映射文件，开发阶段一定要打开 Debug 功能"
    ]
  },
  "ad-okhttp-get": {
    "scope": "java",
    "prefix": "ad-okhttp-get",
    "body": [
      " private val client = OkHttpClient()",
      "",
      "  fun run() {",
      "    val request = Request.Builder()",
      "        .url(\"https://publicobject.com/helloworld.txt\")",
      "        .build()",
      "",
      "    client.newCall(request).execute().use { response ->",
      "      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")",
      "",
      "      for ((name, value) in response.headers) {",
      "        println(\"$name: $value\")",
      "      }",
      "",
      "      println(response.body!!.string())",
      "    }",
      "  }"
    ]
  },
  "ad-okhttp-get异步": {
    "scope": "java",
    "prefix": "ad-okhttp-get异步",
    "body": [
      " private val client = OkHttpClient()",
      "",
      "  fun run() {",
      "    val request = Request.Builder()",
      "        .url(\"http://publicobject.com/helloworld.txt\")",
      "        .build()",
      "",
      "    client.newCall(request).enqueue(object : Callback {",
      "      override fun onFailure(call: Call, e: IOException) {",
      "        e.printStackTrace()",
      "      }",
      "",
      "      override fun onResponse(call: Call, response: Response) {",
      "        response.use {",
      "          if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")",
      "",
      "          for ((name, value) in response.headers) {",
      "            println(\"$name: $value\")",
      "          }",
      "",
      "          println(response.body!!.string())",
      "        }",
      "      }",
      "    })",
      "  }"
    ]
  },
  "ad-okhttp-header": {
    "scope": "java",
    "prefix": "ad-okhttp-header",
    "body": [
      " private val client = OkHttpClient()",
      "",
      "  fun run() {",
      "    val request = Request.Builder()",
      "        .url(\"https://api.github.com/repos/square/okhttp/issues\")",
      "        .header(\"User-Agent\", \"OkHttp Headers.java\")",
      "        .addHeader(\"Accept\", \"application/json; q=0.5\")",
      "        .addHeader(\"Accept\", \"application/vnd.github.v3+json\")",
      "        .build()",
      "",
      "    client.newCall(request).execute().use { response ->",
      "      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")",
      "",
      "      println(\"Server: ${response.header(\"Server\")}\")",
      "      println(\"Date: ${response.header(\"Date\")}\")",
      "      println(\"Vary: ${response.headers(\"Vary\")}\")",
      "    }",
      "  }"
    ]
  },
  "ad-okhttp-poststring": {
    "scope": "java",
    "prefix": "ad-okhttp-poststring",
    "body": [
      "private val client = OkHttpClient()",
      "",
      "  fun run() {",
      "    val postBody = \"\"\"",
      "        |Releases",
      "        |--------",
      "        |",
      "        | * _1.0_ May 6, 2013",
      "        | * _1.1_ June 15, 2013",
      "        | * _1.2_ August 11, 2013",
      "        |\"\"\".trimMargin()",
      "",
      "    val request = Request.Builder()",
      "        .url(\"https://api.github.com/markdown/raw\")",
      "        .post(postBody.toRequestBody(MEDIA_TYPE_MARKDOWN))",
      "        .build()",
      "",
      "    client.newCall(request).execute().use { response ->",
      "      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")",
      "",
      "      println(response.body!!.string())",
      "    }",
      "  }",
      "",
      "  companion object {",
      "    val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\".toMediaType()",
      "  }"
    ]
  },
  "ad-okhttp-Post Streaming": {
    "scope": "java",
    "prefix": "ad-okhttp-Post Streaming",
    "body": [
      "private val client = OkHttpClient()",
      "",
      "  fun run() {",
      "    val requestBody = object : RequestBody() {",
      "      override fun contentType() = MEDIA_TYPE_MARKDOWN",
      "",
      "      override fun writeTo(sink: BufferedSink) {",
      "        sink.writeUtf8(\"Numbers\n\")",
      "        sink.writeUtf8(\"-------\n\")",
      "        for (i in 2..997) {",
      "          sink.writeUtf8(String.format(\" * $i = ${factor(i)}\n\"))",
      "        }",
      "      }",
      "",
      "      private fun factor(n: Int): String {",
      "        for (i in 2 until n) {",
      "          val x = n / i",
      "          if (x * i == n) return \"${factor(x)} × $i\"",
      "        }",
      "        return n.toString()",
      "      }",
      "    }",
      "",
      "    val request = Request.Builder()",
      "        .url(\"https://api.github.com/markdown/raw\")",
      "        .post(requestBody)",
      "        .build()",
      "",
      "    client.newCall(request).execute().use { response ->",
      "      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")",
      "",
      "      println(response.body!!.string())",
      "    }",
      "  }",
      "",
      "  companion object {",
      "    val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\".toMediaType()",
      "  }"
    ]
  },
  "ad-okhttp-Posting a File": {
    "scope": "java",
    "prefix": "ad-okhttp-Posting a File",
    "body": [
      " private val client = OkHttpClient()",
      "",
      "  fun run() {",
      "    val file = File(\"README.md\")",
      "",
      "    val request = Request.Builder()",
      "        .url(\"https://api.github.com/markdown/raw\")",
      "        .post(file.asRequestBody(MEDIA_TYPE_MARKDOWN))",
      "        .build()",
      "",
      "    client.newCall(request).execute().use { response ->",
      "      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")",
      "",
      "      println(response.body!!.string())",
      "    }",
      "  }",
      "",
      "  companion object {",
      "    val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\".toMediaType()",
      "  }"
    ]
  },
  "ad-okhttp-Posting form parameters": {
    "scope": "java",
    "prefix": "ad-okhttp-Posting form parameters",
    "body": [
      "",
      "  fun run() {",
      "    val formBody = FormBody.Builder()",
      "        .add(\"search\", \"Jurassic Park\")",
      "        .build()",
      "    val request = Request.Builder()",
      "        .url(\"https://en.wikipedia.org/w/index.php\")",
      "        .post(formBody)",
      "        .build()",
      "",
      "    client.newCall(request).execute().use { response ->",
      "      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")",
      "",
      "      println(response.body!!.string())",
      "    }",
      "  }"
    ]
  },
  "ad-okhttp-Posting a multipart request": {
    "scope": "java",
    "prefix": "ad-okhttp-Posting a multipart request",
    "body": [
      " private val client = OkHttpClient()",
      "",
      "  fun run() {",
      "    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image",
      "    val requestBody = MultipartBody.Builder()",
      "        .setType(MultipartBody.FORM)",
      "        .addFormDataPart(\"title\", \"Square Logo\")",
      "        .addFormDataPart(\"image\", \"logo-square.png\",",
      "            File(\"docs/images/logo-square.png\").asRequestBody(MEDIA_TYPE_PNG))",
      "        .build()",
      "",
      "    val request = Request.Builder()",
      "        .header(\"Authorization\", \"Client-ID $IMGUR_CLIENT_ID\")",
      "        .url(\"https://api.imgur.com/3/image\")",
      "        .post(requestBody)",
      "        .build()",
      "",
      "    client.newCall(request).execute().use { response ->",
      "      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")",
      "",
      "      println(response.body!!.string())",
      "    }",
      "  }",
      "",
      "  companion object {",
      "    /**",
      "     * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running",
      "     * these examples, please request your own client ID! https://api.imgur.com/oauth2",
      "     */",
      "    private val IMGUR_CLIENT_ID = \"9199fdef135c122\"",
      "    private val MEDIA_TYPE_PNG = \"image/png\".toMediaType()",
      "  }"
    ]
  },
  "ad-nanoTime": {
    "scope": "java",
    "prefix": "ad-nanoTime",
    "body": [
      "纳秒",
      "　　ns（nanosecond）：纳秒， 时间单位。一秒的10亿分之一，即等于10的负9次方秒。常用作 内存读写速度的单位。",
      "　　1纳秒=0.000001 毫秒",
      "　　1纳秒=0.00000 0001秒",
      "",
      "java的System.currentTimeMillis()和System.nanoTime()区别:",
      "",
      "java中System.nanoTime()返回的是纳秒，nanoTime而返回的可能是任意时间，甚至可能是负数……",
      "java中System.currentTimeMillis()返回的毫秒，这个毫秒其实就是自1970年1月1日0时起的毫秒数.",
      "",
      "两个方法都不能保证完全精确,精确程度依赖具体的环境."
    ]
  },
  "ad-okhttp-cache": {
    "scope": "java",
    "prefix": "ad-okhttp-cache",
    "body": [
      " private val client: OkHttpClient = OkHttpClient.Builder()",
      "      .cache(Cache(",
      "          directory = cacheDirectory,",
      "          maxSize = 10L * 1024L * 1024L // 10 MiB",
      "      ))",
      "      .build()",
      "",
      "  fun run() {",
      "    val request = Request.Builder()",
      "        .url(\"http://publicobject.com/helloworld.txt\")",
      "        .build()",
      "",
      "    val response1Body = client.newCall(request).execute().use {",
      "      if (!it.isSuccessful) throw IOException(\"Unexpected code $it\")",
      "",
      "      println(\"Response 1 response:          $it\")",
      "      println(\"Response 1 cache response:    ${it.cacheResponse}\")",
      "      println(\"Response 1 network response:  ${it.networkResponse}\")",
      "      return@use it.body!!.string()",
      "    }",
      "",
      "    val response2Body = client.newCall(request).execute().use {",
      "      if (!it.isSuccessful) throw IOException(\"Unexpected code $it\")",
      "",
      "      println(\"Response 2 response:          $it\")",
      "      println(\"Response 2 cache response:    ${it.cacheResponse}\")",
      "      println(\"Response 2 network response:  ${it.networkResponse}\")",
      "      return@use it.body!!.string()",
      "    }",
      "",
      "    println(\"Response 2 equals Response 1? \" + (response1Body == response2Body))",
      "  }"
    ]
  },
  "ad-okhttp-Timeouts": {
    "scope": "java",
    "prefix": "ad-okhttp-Timeouts",
    "body": [
      " private val client: OkHttpClient = OkHttpClient.Builder()",
      "      .connectTimeout(5, TimeUnit.SECONDS)",
      "      .writeTimeout(5, TimeUnit.SECONDS)",
      "      .readTimeout(5, TimeUnit.SECONDS)",
      "      .callTimeout(10, TimeUnit.SECONDS)",
      "      .build()",
      "",
      "  fun run() {",
      "    val request = Request.Builder()",
      "        .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.",
      "        .build()",
      "",
      "    client.newCall(request).execute().use { response ->",
      "      println(\"Response completed: $response\")",
      "    }",
      "  }",
      "Java"
    ]
  },
  "ad-okhttp-Per-call Configuration": {
    "scope": "java",
    "prefix": "ad-okhttp-Per-call Configuration",
    "body": [
      " private val client = OkHttpClient()",
      "",
      "  fun run() {",
      "    val request = Request.Builder()",
      "        .url(\"http://httpbin.org/delay/1\") // This URL is served with a 1 second delay.",
      "        .build()",
      "",
      "    // Copy to customize OkHttp for this request.",
      "    val client1 = client.newBuilder()",
      "        .readTimeout(500, TimeUnit.MILLISECONDS)",
      "        .build()",
      "    try {",
      "      client1.newCall(request).execute().use { response ->",
      "        println(\"Response 1 succeeded: $response\")",
      "      }",
      "    } catch (e: IOException) {",
      "      println(\"Response 1 failed: $e\")",
      "    }",
      "",
      "    // Copy to customize OkHttp for this request.",
      "    val client2 = client.newBuilder()",
      "        .readTimeout(3000, TimeUnit.MILLISECONDS)",
      "        .build()",
      "    try {",
      "      client2.newCall(request).execute().use { response ->",
      "        println(\"Response 2 succeeded: $response\")",
      "      }",
      "    } catch (e: IOException) {",
      "      println(\"Response 2 failed: $e\")",
      "    }",
      "  }"
    ]
  },
  "ad-okhttp-Handling authentication": {
    "scope": "java",
    "prefix": "ad-okhttp-Handling authentication",
    "body": [
      " private val client = OkHttpClient.Builder()",
      "      .authenticator(object : Authenticator {",
      "        @Throws(IOException::class)",
      "        override fun authenticate(route: Route?, response: Response): Request? {",
      "          if (response.request.header(\"Authorization\") != null) {",
      "            return null // Give up, we've already attempted to authenticate.",
      "          }",
      "",
      "          println(\"Authenticating for response: $response\")",
      "          println(\"Challenges: ${response.challenges()}\")",
      "          val credential = Credentials.basic(\"jesse\", \"password1\")",
      "          return response.request.newBuilder()",
      "              .header(\"Authorization\", credential)",
      "              .build()",
      "        }",
      "      })",
      "      .build()",
      "",
      "  fun run() {",
      "    val request = Request.Builder()",
      "        .url(\"http://publicobject.com/secrets/hellosecret.txt\")",
      "        .build()",
      "",
      "    client.newCall(request).execute().use { response ->",
      "      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")",
      "",
      "      println(response.body!!.string())",
      "    }",
      "  }",
      "Java",
      "To avoid making many retries when authentication isn’t working, you can return null to give up. For example, you may want to skip the retry when these exact credentials have already been attempted:",
      "",
      "",
      "  if (credential.equals(response.request().header(\"Authorization\"))) {",
      "    return null; // If we already failed with these credentials, don't retry.",
      "   }",
      "You may also skip the retry when you’ve hit an application-defined attempt limit:",
      "",
      "",
      "  if (responseCount(response) >= 3) {",
      "    return null; // If we've failed 3 times, give up.",
      "  }",
      "This above code relies on this responseCount() method:",
      "",
      "",
      "  private int responseCount(Response response) {",
      "    int result = 1;",
      "    while ((response = response.priorResponse()) != null) {",
      "      result++;",
      "    }",
      "    return result;",
      "  }"
    ]
  },
  "ad-okhttp-Customizing Trusted Certificates": {
    "scope": "java",
    "prefix": "ad-okhttp-Customizing Trusted Certificates",
    "body": [
      "  private val client: OkHttpClient",
      "",
      "  init {",
      "    val trustManager = trustManagerForCertificates(trustedCertificatesInputStream())",
      "    val sslContext = SSLContext.getInstance(\"TLS\")",
      "    sslContext.init(null, arrayOf<TrustManager>(trustManager), null)",
      "    val sslSocketFactory = sslContext.socketFactory",
      "",
      "    client = OkHttpClient.Builder()",
      "        .sslSocketFactory(sslSocketFactory, trustManager)",
      "        .build()",
      "  }",
      "",
      "  fun run() {",
      "    val request = Request.Builder()",
      "        .url(\"https://publicobject.com/helloworld.txt\")",
      "        .build()",
      "",
      "    client.newCall(request).execute().use { response ->",
      "      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")",
      "",
      "      for ((name, value) in response.headers) {",
      "        println(\"$name: $value\")",
      "      }",
      "",
      "      println(response.body!!.string())",
      "    }",
      "  }",
      "",
      "  /**",
      "   * Returns an input stream containing one or more certificate PEM files. This implementation just",
      "   * embeds the PEM files in Java strings; most applications will instead read this from a resource",
      "   * file that gets bundled with the application.",
      "   */",
      "  private fun trustedCertificatesInputStream(): InputStream {",
      "    ... // Full source omitted. See sample.",
      "  }",
      "",
      "  private fun trustManagerForCertificates(inputStream: InputStream): X509TrustManager {",
      "    ... // Full source omitted. See sample.",
      "  }"
    ]
  },
  "ad-okhttp-Interceptors": {
    "scope": "java",
    "prefix": "ad-okhttp-Interceptors",
    "body": [
      "Interceptors are a powerful mechanism that can monitor, rewrite, and retry calls. Here’s a simple interceptor that logs the outgoing request and the incoming response.",
      "",
      "",
      "class LoggingInterceptor implements Interceptor {",
      "  @Override public Response intercept(Interceptor.Chain chain) throws IOException {",
      "    Request request = chain.request();",
      "",
      "    long t1 = System.nanoTime();",
      "    logger.info(String.format(\"Sending request %s on %s%n%s\",",
      "        request.url(), chain.connection(), request.headers()));",
      "",
      "    Response response = chain.proceed(request);",
      "",
      "    long t2 = System.nanoTime();",
      "    logger.info(String.format(\"Received response for %s in %.1fms%n%s\",",
      "        response.request().url(), (t2 - t1) / 1e6d, response.headers()));",
      "",
      "    return response;",
      "  }",
      "}",
      "A call to chain.proceed(request) is a critical part of each interceptor’s implementation. This simple-looking method is where all the HTTP work happens, producing a response to satisfy the request. If chain.proceed(request) is being called more than once previous response bodies must be closed.",
      "",
      "Interceptors can be chained. Suppose you have both a compressing interceptor and a checksumming interceptor: you’ll need to decide whether data is compressed and then checksummed, or checksummed and then compressed. OkHttp uses lists to track interceptors, and interceptors are called in order.",
      "",
      "Interceptors Diagram",
      "",
      "Application Interceptors¶",
      "Interceptors are registered as either application or network interceptors. We’ll use the LoggingInterceptor defined above to show the difference.",
      "",
      "Register an application interceptor by calling addInterceptor() on OkHttpClient.Builder:",
      "",
      "",
      "OkHttpClient client = new OkHttpClient.Builder()",
      "    .addInterceptor(new LoggingInterceptor())",
      "    .build();",
      "",
      "Request request = new Request.Builder()",
      "    .url(\"http://www.publicobject.com/helloworld.txt\")",
      "    .header(\"User-Agent\", \"OkHttp Example\")",
      "    .build();",
      "",
      "Response response = client.newCall(request).execute();",
      "response.body().close();",
      "The URL http://www.publicobject.com/helloworld.txt redirects to https://publicobject.com/helloworld.txt, and OkHttp follows this redirect automatically. Our application interceptor is called once and the response returned from chain.proceed() has the redirected response:",
      "",
      "",
      "INFO: Sending request http://www.publicobject.com/helloworld.txt on null",
      "User-Agent: OkHttp Example",
      "",
      "INFO: Received response for https://publicobject.com/helloworld.txt in 1179.7ms",
      "Server: nginx/1.4.6 (Ubuntu)",
      "Content-Type: text/plain",
      "Content-Length: 1759",
      "Connection: keep-alive",
      "We can see that we were redirected because response.request().url() is different from request.url(). The two log statements log two different URLs.",
      "",
      "Network Interceptors¶",
      "Registering a network interceptor is quite similar. Call addNetworkInterceptor() instead of addInterceptor():",
      "",
      "",
      "OkHttpClient client = new OkHttpClient.Builder()",
      "    .addNetworkInterceptor(new LoggingInterceptor())",
      "    .build();",
      "",
      "Request request = new Request.Builder()",
      "    .url(\"http://www.publicobject.com/helloworld.txt\")",
      "    .header(\"User-Agent\", \"OkHttp Example\")",
      "    .build();",
      "",
      "Response response = client.newCall(request).execute();",
      "response.body().close();",
      "When we run this code, the interceptor runs twice. Once for the initial request to http://www.publicobject.com/helloworld.txt, and another for the redirect to https://publicobject.com/helloworld.txt.",
      "",
      "",
      "INFO: Sending request http://www.publicobject.com/helloworld.txt on Connection{www.publicobject.com:80, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=none protocol=http/1.1}",
      "User-Agent: OkHttp Example",
      "Host: www.publicobject.com",
      "Connection: Keep-Alive",
      "Accept-Encoding: gzip",
      "",
      "INFO: Received response for http://www.publicobject.com/helloworld.txt in 115.6ms",
      "Server: nginx/1.4.6 (Ubuntu)",
      "Content-Type: text/html",
      "Content-Length: 193",
      "Connection: keep-alive",
      "Location: https://publicobject.com/helloworld.txt",
      "",
      "INFO: Sending request https://publicobject.com/helloworld.txt on Connection{publicobject.com:443, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA protocol=http/1.1}",
      "User-Agent: OkHttp Example",
      "Host: publicobject.com",
      "Connection: Keep-Alive",
      "Accept-Encoding: gzip",
      "",
      "INFO: Received response for https://publicobject.com/helloworld.txt in 80.9ms",
      "Server: nginx/1.4.6 (Ubuntu)",
      "Content-Type: text/plain",
      "Content-Length: 1759",
      "Connection: keep-alive",
      "The network requests also contain more data, such as the Accept-Encoding: gzip header added by OkHttp to advertise support for response compression. The network interceptor’s Chain has a non-null Connection that can be used to interrogate the IP address and TLS configuration that were used to connect to the webserver.",
      "",
      "Choosing between application and network interceptors¶",
      "Each interceptor chain has relative merits.",
      "",
      "Application interceptors",
      "",
      "Don’t need to worry about intermediate responses like redirects and retries.",
      "Are always invoked once, even if the HTTP response is served from the cache.",
      "Observe the application’s original intent. Unconcerned with OkHttp-injected headers like If-None-Match.",
      "Permitted to short-circuit and not call Chain.proceed().",
      "Permitted to retry and make multiple calls to Chain.proceed().",
      "Network Interceptors",
      "",
      "Able to operate on intermediate responses like redirects and retries.",
      "Not invoked for cached responses that short-circuit the network.",
      "Observe the data just as it will be transmitted over the network.",
      "Access to the Connection that carries the request.",
      "Rewriting Requests¶",
      "Interceptors can add, remove, or replace request headers. They can also transform the body of those requests that have one. For example, you can use an application interceptor to add request body compression if you’re connecting to a webserver known to support it.",
      "",
      "",
      "/** This interceptor compresses the HTTP request body. Many webservers can't handle this! */",
      "final class GzipRequestInterceptor implements Interceptor {",
      "  @Override public Response intercept(Interceptor.Chain chain) throws IOException {",
      "    Request originalRequest = chain.request();",
      "    if (originalRequest.body() == null || originalRequest.header(\"Content-Encoding\") != null) {",
      "      return chain.proceed(originalRequest);",
      "    }",
      "",
      "    Request compressedRequest = originalRequest.newBuilder()",
      "        .header(\"Content-Encoding\", \"gzip\")",
      "        .method(originalRequest.method(), gzip(originalRequest.body()))",
      "        .build();",
      "    return chain.proceed(compressedRequest);",
      "  }",
      "",
      "  private RequestBody gzip(final RequestBody body) {",
      "    return new RequestBody() {",
      "      @Override public MediaType contentType() {",
      "        return body.contentType();",
      "      }",
      "",
      "      @Override public long contentLength() {",
      "        return -1; // We don't know the compressed length in advance!",
      "      }",
      "",
      "      @Override public void writeTo(BufferedSink sink) throws IOException {",
      "        BufferedSink gzipSink = Okio.buffer(new GzipSink(sink));",
      "        body.writeTo(gzipSink);",
      "        gzipSink.close();",
      "      }",
      "    };",
      "  }",
      "}",
      "Rewriting Responses¶",
      "Symmetrically, interceptors can rewrite response headers and transform the response body. This is generally more dangerous than rewriting request headers because it may violate the webserver’s expectations!",
      "",
      "If you’re in a tricky situation and prepared to deal with the consequences, rewriting response headers is a powerful way to work around problems. For example, you can fix a server’s misconfigured Cache-Control response header to enable better response caching:",
      "",
      "",
      "/** Dangerous interceptor that rewrites the server's cache-control header. */",
      "private static final Interceptor REWRITE_CACHE_CONTROL_INTERCEPTOR = new Interceptor() {",
      "  @Override public Response intercept(Interceptor.Chain chain) throws IOException {",
      "    Response originalResponse = chain.proceed(chain.request());",
      "    return originalResponse.newBuilder()",
      "        .header(\"Cache-Control\", \"max-age=60\")",
      "        .build();",
      "  }",
      "};",
      "Typically this approach works best when it complements a corresponding fix on the webserver!"
    ]
  },
  "ad-Retrofit": {
    "scope": "java",
    "prefix": "ad-Retrofit",
    "body": [
      "Introduction",
      "Retrofit turns your HTTP API into a Java interface.",
      "",
      "public interface GitHubService {",
      "  @GET(\"users/{user}/repos\")",
      "  Call<List<Repo>> listRepos(@Path(\"user\") String user);",
      "}",
      "The Retrofit class generates an implementation of the GitHubService interface.",
      "",
      "Retrofit retrofit = new Retrofit.Builder()",
      "    .baseUrl(\"https://api.github.com/\")",
      "    .build();",
      "",
      "GitHubService service = retrofit.create(GitHubService.class);",
      "Each Call from the created GitHubService can make a synchronous or asynchronous HTTP request to the remote webserver.",
      "",
      "Call<List<Repo>> repos = service.listRepos(\"octocat\");",
      "Use annotations to describe the HTTP request:",
      "",
      "URL parameter replacement and query parameter support",
      "Object conversion to request body (e.g., JSON, protocol buffers)",
      "Multipart request body and file upload",
      "API Declaration",
      "Annotations on the interface methods and its parameters indicate how a request will be handled.",
      "",
      "REQUEST METHOD",
      "Every method must have an HTTP annotation that provides the request method and relative URL. There are eight built-in annotations: HTTP, GET, POST, PUT, PATCH, DELETE, OPTIONS and HEAD. The relative URL of the resource is specified in the annotation.",
      "",
      "@GET(\"users/list\")",
      "You can also specify query parameters in the URL.",
      "",
      "@GET(\"users/list?sort=desc\")",
      "URL MANIPULATION",
      "A request URL can be updated dynamically using replacement blocks and parameters on the method. A replacement block is an alphanumeric string surrounded by { and }. A corresponding parameter must be annotated with @Path using the same string.",
      "",
      "@GET(\"group/{id}/users\")",
      "Call<List<User>> groupList(@Path(\"id\") int groupId);",
      "Query parameters can also be added.",
      "",
      "@GET(\"group/{id}/users\")",
      "Call<List<User>> groupList(@Path(\"id\") int groupId, @Query(\"sort\") String sort);",
      "For complex query parameter combinations a Map can be used.",
      "",
      "@GET(\"group/{id}/users\")",
      "Call<List<User>> groupList(@Path(\"id\") int groupId, @QueryMap Map<String, String> options);",
      "REQUEST BODY",
      "An object can be specified for use as an HTTP request body with the @Body annotation.",
      "",
      "@POST(\"users/new\")",
      "Call<User> createUser(@Body User user);",
      "The object will also be converted using a converter specified on the Retrofit instance. If no converter is added, only RequestBody can be used.",
      "",
      "FORM ENCODED AND MULTIPART",
      "Methods can also be declared to send form-encoded and multipart data.",
      "",
      "Form-encoded data is sent when @FormUrlEncoded is present on the method. Each key-value pair is annotated with @Field containing the name and the object providing the value.",
      "",
      "@FormUrlEncoded",
      "@POST(\"user/edit\")",
      "Call<User> updateUser(@Field(\"first_name\") String first, @Field(\"last_name\") String last);",
      "Multipart requests are used when @Multipart is present on the method. Parts are declared using the @Part annotation.",
      "",
      "@Multipart",
      "@PUT(\"user/photo\")",
      "Call<User> updateUser(@Part(\"photo\") RequestBody photo, @Part(\"description\") RequestBody description);",
      "Multipart parts use one of Retrofit's converters or they can implement RequestBody to handle their own serialization.",
      "",
      "HEADER MANIPULATION",
      "You can set static headers for a method using the @Headers annotation.",
      "",
      "@Headers(\"Cache-Control: max-age=640000\")",
      "@GET(\"widget/list\")",
      "Call<List<Widget>> widgetList();",
      "@Headers({",
      "    \"Accept: application/vnd.github.v3.full+json\",",
      "    \"User-Agent: Retrofit-Sample-App\"",
      "})",
      "@GET(\"users/{username}\")",
      "Call<User> getUser(@Path(\"username\") String username);",
      "Note that headers do not overwrite each other. All headers with the same name will be included in the request.",
      "",
      "A request Header can be updated dynamically using the @Header annotation. A corresponding parameter must be provided to the @Header. If the value is null, the header will be omitted. Otherwise, toString will be called on the value, and the result used.",
      "",
      "@GET(\"user\")",
      "Call<User> getUser(@Header(\"Authorization\") String authorization)",
      "Similar to query parameters, for complex header combinations, a Map can be used.",
      "",
      "@GET(\"user\")",
      "Call<User> getUser(@HeaderMap Map<String, String> headers)",
      "Headers that need to be added to every request can be specified using an OkHttp interceptor.",
      "",
      "SYNCHRONOUS VS. ASYNCHRONOUS",
      "Call instances can be executed either synchronously or asynchronously. Each instance can only be used once, but calling clone() will create a new instance that can be used.",
      "",
      "On Android, callbacks will be executed on the main thread. On the JVM, callbacks will happen on the same thread that executed the HTTP request.",
      "",
      "Retrofit Configuration",
      "Retrofit is the class through which your API interfaces are turned into callable objects. By default, Retrofit will give you sane defaults for your platform but it allows for customization.",
      "",
      "CONVERTERS",
      "By default, Retrofit can only deserialize HTTP bodies into OkHttp's ResponseBody type and it can only accept its RequestBody type for @Body.",
      "",
      "Converters can be added to support other types. Six sibling modules adapt popular serialization libraries for your convenience.",
      "",
      "Gson: com.squareup.retrofit2:converter-gson",
      "Jackson: com.squareup.retrofit2:converter-jackson",
      "Moshi: com.squareup.retrofit2:converter-moshi",
      "Protobuf: com.squareup.retrofit2:converter-protobuf",
      "Wire: com.squareup.retrofit2:converter-wire",
      "Simple XML: com.squareup.retrofit2:converter-simplexml",
      "JAXB: com.squareup.retrofit2:converter-jaxb",
      "Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars",
      "Here's an example of using the GsonConverterFactory class to generate an implementation of the GitHubService interface which uses Gson for its deserialization.",
      "",
      "Retrofit retrofit = new Retrofit.Builder()",
      "    .baseUrl(\"https://api.github.com/\")",
      "    .addConverterFactory(GsonConverterFactory.create())",
      "    .build();",
      "",
      "GitHubService service = retrofit.create(GitHubService.class);",
      "CUSTOM CONVERTERS",
      "If you need to communicate with an API that uses a content-format that Retrofit does not support out of the box (e.g. YAML, txt, custom format) or you wish to use a different library to implement an existing format, you can easily create your own converter. Create a class that extends the Converter.Factory class and pass in an instance when building your adapter.",
      "",
      "Download",
      "↓ Latest JAR",
      "",
      "The source code to the Retrofit, its samples, and this website is available on GitHub.",
      "",
      "MAVEN",
      "<dependency>",
      "  <groupId>com.squareup.retrofit2</groupId>",
      "  <artifactId>retrofit</artifactId>",
      "  <version>(insert latest version)</version>",
      "</dependency>",
      "GRADLE",
      "implementation 'com.squareup.retrofit2:retrofit:(insert latest version)'",
      "Retrofit requires at minimum Java 8+ or Android API 21+.",
      "",
      "R8 / PROGUARD",
      "If you are using R8 or ProGuard add the options from this file.",
      "",
      "You might also need rules for OkHttp and Okio which are dependencies of this library."
    ]
  },
  "ad-multidex": {
    "scope": "java",
    "prefix": "ad-multidex",
    "body": [
      "Android 5.0 之前版本的多 dex 文件支持",
      "Android 5.0（API 级别 21）之前的平台版本使用 Dalvik 运行时来执行应用代码。默认情况下，Dalvik 将应用限制为每个 APK 只能使用一个 classes.dex 字节码文件。要绕过这一限制，您可以在您的项目中添加多 dex 文件支持库：",
      "",
      "    dependencies {",
      "        def multidex_version = \"2.0.1\"",
      "        implementation 'androidx.multidex:multidex:$multidex_version'",
      "    }",
      "       ",
      "",
      "要查看此库的当前版本，请参阅版本页面中有关多 dex 文件的信息。",
      "",
      "如果您不使用 AndroidX，请改为添加以下支持库依赖项：",
      "",
      "    dependencies {",
      "      implementation 'com.android.support:multidex:1.0.3'",
      "    }",
      "    ",
      "",
      "此库会成为应用的主要 DEX 文件的一部分，然后管理对其他 DEX 文件及其所包含代码的访问。如需了解详情，请参阅下面有关如何针对多 dex 文件配置您的应用的部分。",
      "",
      "Android 5.0 及更高版本的多 dex 文件支持",
      "Android 5.0（API 级别 21）及更高版本使用名为 ART 的运行时，它本身支持从 APK 文件加载多个 DEX 文件。ART 在应用安装时执行预编译，扫描 classesN.dex 文件，并将它们编译成单个 .oat 文件，以供 Android 设备执行。因此，如果您的 minSdkVersion 为 21 或更高的值，则默认情况下启用多 dex 文件，并且您不需要多 dex 文件支持库。",
      "",
      "如需详细了解 Android 5.0 运行时，请阅读 ART 和 Dalvik。",
      "",
      "注意：使用 Android Studio 运行应用时，会针对您部署到的目标设备优化构建。这包括在目标设备运行 Android 5.0 及更高版本时启用多 dex 文件。由于此优化仅在使用 Android Studio 部署应用时应用，因此您可能仍需要为多 dex 文件配置发布版本，以规避 64K 限制。",
      "",
      "规避 64K 限制",
      "在将您的应用配置为支持使用 64K 或更多方法引用之前，您应该采取措施来减少应用代码调用的引用总数，包括由您的应用代码或包含的库定义的方法。以下策略可帮助您避免达到 DEX 引用限制：",
      "",
      "检查应用的直接依赖项和传递依赖项 - 确保您在应用中使用任何庞大依赖库所带来的好处多于为应用添加大量代码所带来的弊端。一种常见的反面模式是，仅仅为了使用几个实用方法就在应用中加入非常庞大的库。减少您的应用代码依赖项往往能够帮助您规避 DEX 引用限制。",
      "通过 R8 移除未使用的代码 - 启用代码缩减以针对您的发布版本运行 R8。启用缩减可确保您交付的 APK 不含有未使用的代码。",
      "使用这些技巧使您不必在应用中启用多 dex 文件，同时还会减小 APK 的总体大小。",
      "",
      "针对多 dex 文件配置您的应用",
      "如果您的 minSdkVersion 设为 21 或更高的值，默认情况下，系统会启用多 dex 文件，并且您不需要多 dex 文件支持库。",
      "",
      "不过，如果您的 minSdkVersion 设为 20 或更低的值，则必须使用多 dex 文件支持库并对应用项目进行以下修改：",
      "",
      "修改模块级 build.gradle 文件以启用多 dex 文件，并将多 dex 文件库添加为依赖项，如下所示：",
      "",
      "    android {",
      "        defaultConfig {",
      "            ...",
      "            minSdkVersion 15",
      "            targetSdkVersion 28",
      "            multiDexEnabled true",
      "        }",
      "        ...",
      "    }",
      "",
      "    dependencies {",
      "      implementation 'com.android.support:multidex:1.0.3'",
      "    }",
      "    ",
      "",
      "根据您是否替换 Application 类，执行以下某项操作：",
      "如果您不替换 Application 类，请修改清单文件以设置 <application> 标记中的 android:name，如下所示：",
      "",
      "    <?xml version=\"1.0\" encoding=\"utf-8\"?>",
      "    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"",
      "        package=\"com.example.myapp\">",
      "        <application",
      "                android:name=\"android.support.multidex.MultiDexApplication\" >",
      "            ...",
      "        </application>",
      "    </manifest>",
      "    ",
      "",
      "如果您替换 Application 类，请对其进行更改以扩展 MultiDexApplication（如果可能），如下所示：",
      "",
      "KOTLIN",
      "JAVA",
      "    class MyApplication : MultiDexApplication() {...}",
      "    ",
      "",
      "或者，如果您替换 Application 类，但无法更改基类，则可以改为替换 attachBaseContext() 方法并调用 MultiDex.install(this) 来启用多 dex 文件：",
      "",
      "KOTLIN",
      "JAVA",
      "    class MyApplication : SomeOtherApplication() {",
      "",
      "        override fun attachBaseContext(base: Context) {",
      "            super.attachBaseContext(base)",
      "            MultiDex.install(this)",
      "        }",
      "    }",
      "    ",
      "",
      "注意：在 MultiDex.install() 完成之前，不要通过反射或 JNI 执行 MultiDex.install() 或其他任何代码。多 dex 文件跟踪功能不会追踪这些调用，从而导致出现 ClassNotFoundException，或因 DEX 文件之间的类分区错误而导致验证错误。",
      "",
      "现在，当您构建应用时，Android 构建工具会根据需要构造主要 DEX 文件 (classes.dex) 和辅助 DEX 文件（classes2.dex 和 classes3.dex 等）。然后，构建系统会将所有 DEX 文件打包到您的 APK 中。",
      "",
      "在运行时，多 dex 文件 API 使用特殊的类加载器来搜索适用于您的方法的所有 DEX 文件（而不是只在主 classes.dex 文件中搜索）。",
      "",
      "多 dex 文件支持库的局限性",
      "多 dex 文件支持库具有一些已知的局限性，将其纳入您的应用构建配置时，您应注意这些局限性并进行针对性的测试：",
      "",
      "启动期间在设备的数据分区上安装 DEX 文件的过程相当复杂，如果辅助 DEX 文件较大，可能会导致应用无响应 (ANR) 错误。为避免此问题，请启用代码缩减，以尽量减小 DEX 文件的大小，并移除未使用的代码部分。",
      "当运行的版本低于 Android 5.0（API 级别 21）时，使用多 dex 文件不足以避开 linearalloc 限制（问题 78035）。此上限在 Android 4.0（API 级别 14）中有所提高，但这并未完全解决该问题。在低于 Android 4.0 的版本中，您可能会在达到 DEX 索引限制之前达到 linearalloc 限制。因此，如果您的目标 API 级别低于 14，请在这些版本的平台上进行全面测试，因为您的应用可能会在启动时或加载特定类组时出现问题。",
      "代码缩减可以减少甚至有可能消除这些问题。",
      "",
      "声明主要 DEX 文件中必需的类",
      "为多 dex 文件应用构建每个 DEX 文件时，构建工具会执行复杂的决策制定来确定主要 DEX 文件中需要的类，以便您的应用能够成功启动。如果主要 DEX 文件中未提供启动期间需要的任何类，则您的应用会崩溃并出现 java.lang.NoClassDefFoundError 错误。",
      "",
      "对于直接从您的应用代码访问的代码，不应发生这种情况，因为构建工具可以识别这些代码路径。但是，当代码路径的可见性较低时（例如，当您使用的库具有复杂的依赖项时），可能会发生这种情况。例如，如果代码使用自检机制或从原生代码调用 Java 方法，那么可能不会将这些类识别为主要 DEX 文件中的必需类。",
      "",
      "因此，如果您收到 java.lang.NoClassDefFoundError，则必须使用构建类型中的 multiDexKeepFile 或 multiDexKeepProguard 属性声明这些其他类，以手动将这些类指定为主要 DEX 文件中的必需类。如果在 multiDexKeepFile 或 multiDexKeepProguard 文件中匹配了某个类，则会将该类添加到主要 DEX 文件。",
      "",
      "multiDexKeepFile 属性",
      "您在 multiDexKeepFile 中指定的文件应该每行包含一个类，并且类采用 com/example/MyClass.class 格式。例如，您可以创建一个名为 multidex-config.txt 的文件，如下所示：",
      "",
      "    com/example/MyClass.class",
      "    com/example/MyOtherClass.class",
      "    ",
      "",
      "然后，您可以针对构建类型声明该文件，如下所示：",
      "",
      "    android {",
      "        buildTypes {",
      "            release {",
      "                multiDexKeepFile file('multidex-config.txt')",
      "                ...",
      "            }",
      "        }",
      "    }",
      "    ",
      "",
      "请注意，Gradle 会读取相对于 build.gradle 文件的路径，因此如果 multidex-config.txt 与 build.gradle 文件在同一目录中，以上示例将有效。",
      "",
      "multiDexKeepProguard 属性",
      "multiDexKeepProguard 文件使用与 Proguard 相同的格式，并且支持全部 Proguard 语法。如需详细了解 Proguard 格式和语法，请参阅 Proguard 手册中的 Keep 选项一节。",
      "",
      "您在 multiDexKeepProguard 中指定的文件应该在任何有效的 ProGuard 语法中包含 -keep 选项。例如，-keep com.example.MyClass.class。您可以创建一个名为 multidex-config.pro 的文件，如下所示：",
      "",
      "    -keep class com.example.MyClass",
      "    -keep class com.example.MyClassToo",
      "    ",
      "",
      "如果您要指定软件包中的所有类，文件将如下所示：",
      "",
      "    -keep class com.example.** { *; } // All classes in the com.example package",
      "    ",
      "",
      "然后，您可以针对构建类型声明该文件，如下所示：",
      "",
      "    android {",
      "        buildTypes {",
      "            release {",
      "                multiDexKeepProguard file('multidex-config.pro')",
      "                ...",
      "            }",
      "        }",
      "    }",
      "    "
    ]
  },
  "ad-gsyplayer": {
    "scope": "java",
    "prefix": "ad-gsyplayer",
    "body": [
      "三种简单的使用方法",
      "注意：下面几种方式所在的Activity不要忘记配置manifest的config。",
      "",
      "<activity",
      "    android:name=\".xxxxx\"",
      "    android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize|uiMode\"",
      "    android:screenOrientation=\"portrait\" />",
      "",
      "一、直接播放",
      "SimplePlayer",
      "二、列表中使用",
      "模式一 SimpleListVideoActivityMode1",
      "1、adapter布局中添加播放控件",
      "",
      "<com.shuyu.gsyvideoplayer.video.StandardGSYVideoPlayer",
      "    android:id=\"@+id/detail_player\"",
      "    android:layout_width=\"match_parent\"",
      "    android:layout_height=\"@dimen/post_media_height\" />",
      "",
      "2、adapter中配置播放控件（也可以使用builder模式，详见下方detail模式中）",
      "",
      "holder.gsyVideoPlayer.setUpLazy(url, true, null, null, \"这是title\");",
      "//增加title",
      "holder.gsyVideoPlayer.getTitleTextView().setVisibility(View.GONE);",
      "//设置返回键",
      "holder.gsyVideoPlayer.getBackButton().setVisibility(View.GONE);",
      "//设置全屏按键功能",
      "holder.gsyVideoPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {",
      "    @Override",
      "    public void onClick(View v) {",
      "        holder.gsyVideoPlayer.startWindowFullscreen(context, false, true);",
      "    }",
      "});",
      "//防止错位设置",
      "holder.gsyVideoPlayer.setPlayTag(TAG);",
      "holder.gsyVideoPlayer.setPlayPosition(position);",
      "//是否根据视频尺寸，自动选择竖屏全屏或者横屏全屏",
      "holder.gsyVideoPlayer.setAutoFullWithSize(true);",
      "//音频焦点冲突时是否释放",
      "holder.gsyVideoPlayer.setReleaseWhenLossAudio(false);",
      "//全屏动画",
      "holder.gsyVideoPlayer.setShowFullAnimation(true);",
      "//小屏时不触摸滑动",
      "holder.gsyVideoPlayer.setIsTouchWiget(false);",
      "3、Activity中配置生命周期",
      "",
      "    @Override",
      "    protected void onCreate(Bundle savedInstanceState) {",
      "        ···",
      "        videoList.setOnScrollListener(new AbsListView.OnScrollListener() {",
      "            @Override",
      "            public void onScrollStateChanged(AbsListView view, int scrollState) {}",
      "            @Override",
      "            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {",
      "                int lastVisibleItem = firstVisibleItem + visibleItemCount;",
      "                //大于0说明有播放",
      "                if (GSYVideoManager.instance().getPlayPosition() >= 0) {",
      "                    //当前播放的位置",
      "                    int position = GSYVideoManager.instance().getPlayPosition();",
      "                    //对应的播放列表TAG",
      "                    if (GSYVideoManager.instance().getPlayTag().equals(ListNormalAdapter.TAG)",
      "                            && (position < firstVisibleItem || position > lastVisibleItem)) {",
      "                        if(GSYVideoManager.isFullState(ListVideoActivity.this)) {",
      "                            return;",
      "                        }",
      "                        //如果滑出去了上面和下面就是否，和今日头条一样",
      "                        GSYVideoManager.releaseAllVideos();",
      "                        adapter.notifyDataSetChanged();",
      "                    }",
      "                }",
      "            }",
      "        });",
      "        ···",
      "    }",
      "",
      "    @Override",
      "    public void onBackPressed() {",
      "        if (GSYVideoManager.backFromWindowFull(this)) {",
      "            return;",
      "        }",
      "        super.onBackPressed();",
      "    }",
      "",
      "    @Override",
      "    protected void onPause() {",
      "        super.onPause();",
      "        GSYVideoManager.onPause();",
      "    }",
      "",
      "    @Override",
      "    protected void onResume() {",
      "        super.onResume();",
      "        GSYVideoManager.onResume();",
      "    }",
      "",
      "    @Override",
      "    protected void onDestroy() {",
      "        super.onDestroy();",
      "        GSYVideoManager.releaseAllVideos();",
      "    }",
      "模式二 SimpleListVideoActivityMode2",
      "一、item布局中添加",
      "",
      "<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"",
      "    android:layout_width=\"match_parent\"",
      "    android:layout_height=\"wrap_content\">",
      "",
      "    <FrameLayout",
      "        android:id=\"@+id/list_item_container\"",
      "        android:layout_width=\"match_parent\"",
      "        android:layout_height=\"@dimen/post_media_height\"",
      "        android:scaleType=\"centerCrop\"",
      "        android:src=\"@mipmap/xxx1\" />",
      "",
      "",
      "    <ImageView",
      "        android:id=\"@+id/list_item_btn\"",
      "        android:layout_width=\"60dp\"",
      "        android:layout_height=\"60dp\"",
      "        android:layout_centerHorizontal=\"true\"",
      "        android:layout_centerVertical=\"true\"",
      "        android:layout_gravity=\"center_vertical\"",
      "        android:src=\"@drawable/video_click_play_selector\" />",
      "",
      "</RelativeLayout>",
      "2、Activity中创建helper和配置生命周期",
      "",
      "    GSYVideoHelper smallVideoHelper;",
      "",
      "    ListVideoAdapter listVideoAdapter;",
      "",
      "    GSYVideoHelper.GSYVideoHelperBuilder gsySmallVideoHelperBuilder;",
      "",
      "    int lastVisibleItem;",
      "",
      "    int firstVisibleItem;",
      "",
      "    @Override",
      "    protected void onCreate(Bundle savedInstanceState) {",
      "        super.onCreate(savedInstanceState);",
      "        setContentView(R.layout.activity_list_video2);",
      "",
      "        //创建小窗口帮助类",
      "        smallVideoHelper = new GSYVideoHelper(this);",
      "        //配置",
      "        gsySmallVideoHelperBuilder = new GSYVideoHelper.GSYVideoHelperBuilder();",
      "        gsySmallVideoHelperBuilder",
      "                .setHideStatusBar(true)",
      "                .setNeedLockFull(true)",
      "                .setCacheWithPlay(true)",
      "                .setShowFullAnimation(false)",
      "                .setRotateViewAuto(false)",
      "                .setLockLand(true)",
      "                .setVideoAllCallBack(new GSYSampleCallBack(){",
      "            @Override",
      "            public void onQuitSmallWidget(String url, Object... objects) {",
      "                super.onQuitSmallWidget(url, objects);",
      "                //大于0说明有播放,//对应的播放列表TAG",
      "                if (smallVideoHelper.getPlayPosition() >= 0 && smallVideoHelper.getPlayTAG().equals(ListVideoAdapter.TAG)) {",
      "                    //当前播放的位置",
      "                    int position = smallVideoHelper.getPlayPosition();",
      "                    //不可视的是时候",
      "                    if ((position < firstVisibleItem || position > lastVisibleItem)) {",
      "                        //释放掉视频",
      "                        smallVideoHelper.releaseVideoPlayer();",
      "                        listVideoAdapter.notifyDataSetChanged();",
      "                    }",
      "                }",
      "",
      "            }",
      "        });",
      "        ",
      "        smallVideoHelper.setGsyVideoOptionBuilder(gsySmallVideoHelperBuilder);",
      "        ",
      "        videoList.setOnScrollListener(new AbsListView.OnScrollListener() {",
      "            @Override",
      "            public void onScrollStateChanged(AbsListView view, int scrollState) {",
      "            }",
      "",
      "            @Override",
      "            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {",
      "                ListVideo2Activity.this.firstVisibleItem = firstVisibleItem;",
      "                lastVisibleItem = firstVisibleItem + visibleItemCount;",
      "                //大于0说明有播放,//对应的播放列表TAG",
      "                if (smallVideoHelper.getPlayPosition() >= 0 && smallVideoHelper.getPlayTAG().equals(ListVideoAdapter.TAG)) {",
      "                    //当前播放的位置",
      "                    int position = smallVideoHelper.getPlayPosition();",
      "                    //不可视的是时候",
      "                    if ((position < firstVisibleItem || position > lastVisibleItem)) {",
      "                        //如果是小窗口就不需要处理",
      "                        if (!smallVideoHelper.isSmall()) {",
      "                            //小窗口",
      "                            int size = CommonUtil.dip2px(ListVideo2Activity.this, 150);",
      "                            smallVideoHelper.showSmallVideo(new Point(size, size), false, true);",
      "                        }",
      "                    } else {",
      "                        if (smallVideoHelper.isSmall()) {",
      "                            smallVideoHelper.smallVideoToNormal();",
      "                        }",
      "                    }",
      "                }",
      "            }",
      "",
      "        });",
      "    }",
      "",
      "",
      "    @Override",
      "    public void onBackPressed() {",
      "        if (smallVideoHelper.backFromFull()) {",
      "            return;",
      "        }",
      "        super.onBackPressed();",
      "    }",
      "",
      "",
      "    @Override",
      "    protected void onDestroy() {",
      "        super.onDestroy();",
      "        smallVideoHelper.releaseVideoPlayer();",
      "        GSYVideoManager.releaseAllVideos();",
      "    }",
      "3、adapter中使用helper",
      "",
      "···",
      "smallVideoHelper.addVideoPlayer(position, holder.imageView, TAG, holder.videoContainer, holder.playerBtn);",
      "",
      "holder.playerBtn.setOnClickListener(new View.OnClickListener() {",
      "            @Override",
      "            public void onClick(View v) {",
      "                notifyDataSetChanged();",
      "                smallVideoHelper.setPlayPositionAndTag(position, TAG);",
      "                final String url = \"http://9890.vod.myqcloud.com/9890_4e292f9a3dd011e6b4078980237cc3d3.f20.mp4\";",
      "                gsySmallVideoHelperBuilder.setVideoTitle(\"title \" + position)",
      "                        .setUrl(url);",
      "                smallVideoHelper.startPlay();",
      "            }",
      "});",
      "",
      "···",
      "三、详情页播放",
      "模式一 SimpleDetailActivityMode1",
      "1、布局中添加播放控件",
      "",
      "<com.shuyu.gsyvideoplayer.video.StandardGSYVideoPlayer",
      "    android:id=\"@+id/detail_player\"",
      "    android:layout_width=\"match_parent\"",
      "    android:layout_height=\"@dimen/post_media_height\" />",
      "",
      "2、Activity继承GSYBaseActivityDetail",
      "",
      "public class DetailControlActivity extends GSYBaseActivityDetail<StandardGSYVideoPlayer>",
      "3、重载配置",
      "",
      "",
      "    @Override",
      "    protected void onCreate(Bundle savedInstanceState) {",
      "        super.onCreate(savedInstanceState);",
      "        setContentView(R.layout.activity_detail_player);",
      "",
      "        detailPlayer = (StandardGSYVideoPlayer) findViewById(R.id.detail_player);",
      "        //增加title",
      "        detailPlayer.getTitleTextView().setVisibility(View.GONE);",
      "        detailPlayer.getBackButton().setVisibility(View.GONE);",
      "",
      "        initVideoBuilderMode();",
      "",
      "    }",
      "",
      "    @Override",
      "    public StandardGSYVideoPlayer getGSYVideoPlayer() {",
      "        return detailPlayer;",
      "    }",
      "",
      "    @Override",
      "    public GSYVideoOptionBuilder getGSYVideoOptionBuilder() {",
      "        //内置封面可参考SampleCoverVideo",
      "        ImageView imageView = new ImageView(this);",
      "        loadCover(imageView, url);",
      "        return new GSYVideoOptionBuilder()",
      "                .setThumbImageView(imageView)",
      "                .setUrl(url)",
      "                .setCacheWithPlay(true)",
      "                .setVideoTitle(\" \")",
      "                .setIsTouchWiget(true)",
      "                .setRotateViewAuto(false)",
      "                .setLockLand(false)",
      "                .setShowFullAnimation(false)",
      "                .setNeedLockFull(true)",
      "                .setSeekRatio(1);",
      "    }",
      "",
      "    @Override",
      "    public void clickForFullScreen() {",
      "",
      "    }",
      "",
      "",
      "    /**",
      "     * 是否启动旋转横屏，true表示启动",
      "     */",
      "    @Override",
      "    public boolean getDetailOrientationRotateAuto() {",
      "        return true;",
      "    }",
      "模式二 SimpleDetailActivityMode2",
      "1、布局中添加播放控件",
      "",
      "<com.shuyu.gsyvideoplayer.video.StandardGSYVideoPlayer",
      "    android:id=\"@+id/detail_player\"",
      "    android:layout_width=\"match_parent\"",
      "    android:layout_height=\"@dimen/post_media_height\" />",
      "",
      "2、onCreate中配置播放器、添加旋转外部旋转支持、增加监听。（也可以会直接通过player设置，不用builder）",
      "",
      "//外部辅助的旋转，帮助全屏",
      "orientationUtils = new OrientationUtils(this, detailPlayer);",
      "//初始化不打开外部的旋转",
      "orientationUtils.setEnable(false);",
      "",
      "GSYVideoOptionBuilder gsyVideoOption = new GSYVideoOptionBuilder();",
      "gsyVideoOption.setThumbImageView(imageView)",
      "        .setIsTouchWiget(true)",
      "        .setRotateViewAuto(false)",
      "        .setLockLand(false)",
      "        .setAutoFullWithSize(true)",
      "        .setShowFullAnimation(false)",
      "        .setNeedLockFull(true)",
      "        .setUrl(url)",
      "        .setCacheWithPlay(false)",
      "        .setVideoTitle(\"测试视频\")",
      "        .setVideoAllCallBack(new GSYSampleCallBack() {",
      "            @Override",
      "            public void onPrepared(String url, Object... objects) {",
      "                super.onPrepared(url, objects);",
      "                //开始播放了才能旋转和全屏",
      "                orientationUtils.setEnable(true);",
      "                isPlay = true;",
      "            }",
      "",
      "            @Override",
      "            public void onQuitFullscreen(String url, Object... objects) {",
      "                super.onQuitFullscreen(url, objects);",
      "                Debuger.printfError(\"***** onQuitFullscreen **** \" + objects[0]);//title",
      "                Debuger.printfError(\"***** onQuitFullscreen **** \" + objects[1]);//当前非全屏player",
      "                if (orientationUtils != null) {",
      "                    orientationUtils.backToProtVideo();",
      "                }",
      "            }",
      "        }).setLockClickListener(new LockClickListener() {",
      "            @Override",
      "            public void onClick(View view, boolean lock) {",
      "                if (orientationUtils != null) {",
      "                    //配合下方的onConfigurationChanged",
      "                    orientationUtils.setEnable(!lock);",
      "                }",
      "            }",
      "        }).build(detailPlayer);",
      "",
      "detailPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {",
      "    @Override",
      "    public void onClick(View v) {",
      "        //直接横屏",
      "        orientationUtils.resolveByClick();",
      "",
      "        //第一个true是否需要隐藏actionbar，第二个true是否需要隐藏statusbar",
      "        detailPlayer.startWindowFullscreen(SimpleDetailActivityMode2.this, true, true);",
      "    }",
      "});",
      "3、配置生命周期",
      "",
      "@Override",
      "public void onBackPressed() {",
      "    if (orientationUtils != null) {",
      "        orientationUtils.backToProtVideo();",
      "    }",
      "    if (GSYVideoManager.backFromWindowFull(this)) {",
      "        return;",
      "    }",
      "    super.onBackPressed();",
      "}",
      "",
      "",
      "@Override",
      "protected void onPause() {",
      "    detailPlayer.getCurrentPlayer().onVideoPause();",
      "    super.onPause();",
      "    isPause = true;",
      "}",
      "",
      "@Override",
      "protected void onResume() {",
      "    detailPlayer.getCurrentPlayer().onVideoResume(false);",
      "    super.onResume();",
      "    isPause = false;",
      "}",
      "",
      "@Override",
      "protected void onDestroy() {",
      "    super.onDestroy();",
      "    if (isPlay) {",
      "        detailPlayer.getCurrentPlayer().release();",
      "    }",
      "    if (orientationUtils != null)",
      "        orientationUtils.releaseListener();",
      "}",
      "",
      "",
      "",
      "@Override",
      "public void onConfigurationChanged(Configuration newConfig) {",
      "    super.onConfigurationChanged(newConfig);",
      "    //如果旋转了就全屏",
      "    if (isPlay && !isPause) {",
      "        detailPlayer.onConfigurationChanged(this, newConfig, orientationUtils, true, true);",
      "    }",
      "}",
      "更多使用",
      "（以下设置全局生效哦）",
      "",
      "切换内核",
      "//PlayerFactory.setPlayManager(new Exo2PlayerManager());//EXO模式",
      "//PlayerFactory.setPlayManager(new SystemPlayerManager());//系统模式",
      "//PlayerFactory.setPlayManager(new IjkPlayerManager());//ijk模式",
      "调整代码结构，CacheFactory 更方便自定义，默认 ProxyCacheManager。",
      "//CacheFactory.setCacheManager(new ExoPlayerCacheManager());//exo缓存模式，支持m3u8，只支持exo",
      "//CacheFactory.setCacheManager(new ProxyCacheManager());//代理缓存模式，支持所有模式，不支持m3u8等",
      "增加 ExoMediaSourceInterceptListener，方便 Exo 模式下使用自定义的 MediaSource。",
      "ExoSourceManager.setExoMediaSourceInterceptListener(new ExoMediaSourceInterceptListener() {",
      "           /**",
      "            * @param dataSource  链接",
      "            * @param preview     是否带上header，默认有header自动设置为true",
      "            * @param cacheEnable 是否需要缓存",
      "            * @param isLooping   是否循环",
      "            * @param cacheDir    自定义缓存目录",
      "            * @return 返回不为空时，使用返回的自定义mediaSource",
      "            */",
      "            @Override",
      "            public MediaSource getMediaSource(String dataSource, boolean preview, boolean cacheEnable, boolean isLooping, File cacheDir) {",
      "                return null;",
      "            }",
      "});",
      "切换比例",
      " ",
      "//默认显示比例",
      "GSYVideoType.setShowType(GSYVideoType.SCREEN_TYPE_DEFAULT);",
      "    ",
      "//16:9 ",
      "GSYVideoType.setShowType(GSYVideoType.SCREEN_TYPE_16_9);",
      "",
      "//全屏裁减显示，为了显示正常 CoverImageView 建议使用FrameLayout作为父布局",
      "GSYVideoType.setShowType(GSYVideoType.SCREEN_TYPE_FULL);",
      "",
      "//全屏拉伸显示，使用这个属性时，surface_container建议使用FrameLayout",
      "GSYVideoType.setShowType(GSYVideoType.SCREEN_MATCH_FULL); ",
      "",
      " //4:3",
      "GSYVideoType.setShowType(GSYVideoType.SCREEN_TYPE_4_3); ",
      "",
      "切换渲染",
      "//默认TextureView",
      "GSYVideoType.setRenderType(GSYVideoType.TEXTURE);",
      "",
      "//SurfaceView，动画切换等时候效果比较差",
      "GSYVideoType.setRenderType(GSYVideoType.SUFRACE);",
      "",
      "//GLSurfaceView、支持滤镜",
      "GSYVideoType.setRenderType(GSYVideoType.GLSURFACE);",
      "",
      "高级自定义",
      "--- 项目解析说明、包含项目架构和解析***",
      "基于IJKPlayer（兼容系统MediaPlayer与EXOPlayer2），实现了多功能的视频播放器。 (请仔细阅读下方各项说明，大多数问题可在下方找到解答)。",
      "类型 功能",
      "缓存 边播边缓存，使用了AndroidVideoCache；ExoPlayer使用SimpleCache。",
      "协议 h263\\4\\5、Https、concat、rtsp、hls、rtmp、crypto、mpeg等等。",
      "滤镜 简单滤镜（马赛克、黑白、色彩过滤、高斯、模糊、模糊等等20多种）、动画、（水印、画面多重播放等）。",
      "帧图 视频第一帧、视频帧截图功能，视频生成gif功能。",
      "播放 列表播放、列表连续播放、重力旋转与手动旋转、视频本身rotation旋转属性、快播和慢播、网络视频加载速度。",
      "画面 调整显示比例:默认、16:9、4:3、填充；播放时旋转画面角度（0,90,180,270）；镜像旋转。",
      "内核 IJKPlayer、EXOPlayer、MediaPlayer切换、自定义内核",
      "布局 全屏与非全屏两套布局切换、没有任何操作控件的纯播放支持、弹幕功能、继承自定义任何布局。",
      "播放 单例播放、多个同时播放、视频列表滑动自动播放、列表切换详情页面无缝播放。",
      "窗口 小窗口、多窗体下（包括桌面）的小窗口播放。",
      "广告 片头广告、跳过广告支持、中间插入广告功能。",
      "更多 暂停前后台切换不黑屏；调整不同清晰度的支持；无缝切换支持；锁定/解锁全屏点击功能；进度条小窗口预览（测试）。",
      "自定义 可自定义渲染层、自定义管理层、自定义播放层（控制层）、自定义缓存层。",
      "温馨提示",
      "关于自定义和出现问题的请先看问题集锦、demo、issue。",
      "",
      "多了解一些音视频的基础常识，对容器，音视频编码，ffmpeg先做一些了解，以及mediacodec等的不同。",
      "尽量少出现为什么别的能播的问题哟。",
      "",
      "播放器的可自定义还是挺高的，定制请参考demo，多看源码。现在的功能有些多，demo也在不断的更新。",
      "",
      "一些新功能和项目结构也在不断的调整。",
      "",
      "欢迎提出问题，谢谢。",
      "",
      "项目介绍",
      "框架图",
      "",
      "1.1、简单说明",
      "1、播放器内置常用功能接口，具体可参阅下发链接和源码，如需要自定义可通过继承播放器后，返回自定义布局或重载接口实现。",
      "",
      "2、需要注意的是，全屏与非全屏播放之间接的是通过切换显示实现的，所以如有自定义功能或参数，需要重载startWindowFullscreen和resolveNormalVideoShow接口，在其中做同步处理。避免自定义效果在切换不生效，具体可参看DEMO。",
      "",
      "3、外部需要获取播放器时，如有全屏和非全屏切换，可使用接口detailPlayer.getCurPlay()获取。",
      "",
      "1.2、基础API文档",
      "1、基础Player API 、 --- 简单使用，快速上手文档",
      "2、管理器GSYVideoManager API",
      "3、全局设置GSYVideoType API",
      "更多版本API请查阅：版本更新说明",
      "2、Video相关",
      "有了一些调整，后面将修改wiki说明。",
      "",
      "类 说明",
      "GSYTextureRenderView 画面渲染绘制相关层。【源码】",
      "GSYVideoView 视频播放相关层。【源码】",
      "GSYVideoControlView 控制与UI显示相关。【源码】",
      "GSYBaseVideoPlayer 全屏和小屏幕相关处理层，最基础可基础对象类。【源码】",
      "StandardGSYVideoPlayer 可以直接使用的标准播放器，标准使用例子，适合参考实现或基础【源码】",
      "VideoAllCallBack 视频相关的回调接口【源码】",
      "ListGSYVideoPlayer 继承StandardGSYVideoPlayer，添加连续播放一个视频列表的功能。【源码】",
      "CustomGSYVideoPlayer 继承StandardGSYVideoPlayer，小窗口进度预览，测试版本。【源码】",
      "LandLayoutVideo 继承CustomGSYVideoPlayer ，DEMO里演示全屏非全屏不同布局效果。【源码】",
      "SampleVideo 继承StandardGSYVideoPlayer，DEMO演示清晰度切换，镜像，旋转等效果。【源码】",
      "DanmakuVideoPlayer 继承StandardGSYVideoPlayer，DEMO演示弹幕集成效果。【源码】",
      "NormalGSYVideoPlayer 继承StandardGSYVideoPlayer，使用图片播放按键和loading的播放器。【源码】",
      "EmptyControlVideo 继承StandardGSYVideoPlayer，空播放UI的播放器。【源码】",
      "SmartPickVideo 无缝切换的播放器。【源码】",
      "SampleCoverVideo 内置封面的播放器。【源码】",
      "FloatingVideo 多窗体下的悬浮窗页面支持Video。【源码】",
      "GSYSampleADVideoPlayer 简单片头广告。【源码】",
      "GSYADVideoPlayer 广告支持【源码】",
      "3、Utils相关",
      "类 说明",
      "GSYVideoType 默认配置开关（显示比例，是否硬解码，切换播放器等）。【源码】",
      "ListVideoUtil 单例列表播放器封装，封装了StandardGSYVideoPlayer ，对应 DEMO ListVideo2Activity，目前不再维护。",
      "OrientationUtils 旋转工具类。【接口文档】",
      "GSYVideoManager 视频管理器，实际上的单例播放器，全局暂停/播放接口，清理缓存，配种option，切换播放器，设置静音等。【接口文档】",
      "Debuger log输出类",
      "GSYVideoOptionBuilder 配置工具类【源码】",
      "GSYBaseActivityDetail detail模式的抽象Activity 【源码】",
      "4、Demo相关",
      "类 说明",
      "PlayActivity 直接打开一个播放器作为全屏，不需要单独调用全屏功能。",
      "ListVideoActivity 普通列表DEMO，滑出屏幕会被释放。",
      "ListVideo2Activity ListVideoUtil的DEMO，滑出列表不会被释放。",
      "RecyclerViewActivity 普通列表DEMO的RecyclerView。",
      "RecyclerView2Activity ListVideoUtil的RecyclerView。",
      "DetailPlayer 详情类型的DEMO 手机旋转点击全屏等效果。",
      "DetailListPlayer 详情类型的DEMO，播放一个列表，自动播放下一个，手机旋转点击全屏等效果。",
      "WebDetailActivity 嵌套WebView的详情类型DEMO，主要是滑动演示。",
      "WebDetailActivity 嵌套WebView的详情类型DEMO，主要是滑动演示。",
      "DanmkuVideoActivity 嵌套DanmakuVideoPlayer的DEMO，主要是弹幕功能。",
      "DetailMoreTypeActivity 支持全屏与非全屏切换的清晰度，旋转，镜像等功能。",
      "InputUrlDetailActivity 增加了自定义输入框输入url页面。",
      "PlayEmptyControlActivity 没有任何ui的播放页面。",
      "DetailControlActivity 增加一些特俗控制的播放页面。",
      "PlayEmptyControlActivity 没有任何控制ui的播放器。",
      "PlayPickActivity 无缝切换播放页面。",
      "DetailFilterActivity 滤镜效果播放页面",
      "WindowActivity 多窗体下（包括桌面）的小窗口播放（WindowActivity）",
      "DetailADPlayer 简单片头广告",
      "ListMultiVideoActivity 同时播放",
      "DetailADPlayer2、ListADVideoActivity 高级功能广告支持",
      "SwitchPlay 列表切换详情页面无缝播放【源码】",
      "自定义 高级自定义demo【源码】",
      "其他",
      "*** 版本更新说明 - 入口 ***",
      "*** 问题集锦 - 入口 ***",
      "*** IJKPlayer问题 - 入口 ***　",
      "*** IJKPlayer编译自定义SO - 入口 ***　",
      "*** 项目支持视频格式（如果遇上黑屏，没声音） ***",
      "持续完善中。。。。。"
    ]
  },
  "ad-fastjson-Use Fastjson in Kotlin": {
    "scope": "java",
    "prefix": "ad-fastjson-Use Fastjson in Kotlin",
    "body": [
      "Use Fastjson in Kotlin",
      "In Kotlin, we use to make a data class to hold data, and then we can use Fastjson to serialize data-class object to json string or deserialize json string to data-class object now(Since Fastjson 1.2.37).There are three cases：",
      "",
      "note: in Kotlin, DataClassName::class, equals DataClassName.class in Java",
      "",
      "1.Data Class without Any Annotation",
      "Define DataClassSimple data-class:",
      "",
      "data class DataClassSimple(val a : Int, val b : Int)",
      "then, we can use this code below to serialize and deserialize:",
      "",
      "    val dts = DataClassSimple(1,2)",
      "    val jsons = JSON.toJSONString(dts)",
      "    println(jsons)",
      "    val clzs = DataClassSimple::class",
      "    println(clzs.javaObjectType)",
      "    val dt2 = JSON.parseObject(jsons,clzs.javaObjectType)",
      "    println(dt2)",
      "the output:",
      "",
      "{\"a\":1,\"b\":2}",
      "class DataClassSimple",
      "DataClassSimple(a=1, b=2)",
      "2.Data Class with @JSONField Annotation",
      "Define DataClass data-class:",
      "",
      "data class DataClass(@JSONField(name=\"aa\")val a : Int, @JSONField(name=\"bb\")val b : Int)",
      "then we use JSON to serialize and deserialize:",
      "",
      "    val dt = DataClass(1,2)",
      "    val json = JSON.toJSONString(dt)",
      "    println(json)",
      "    val clz = DataClass::class",
      "    println(clz.javaObjectType)",
      "    val dt1 = JSON.parseObject(json,clz.javaObjectType)",
      "    println(dt1)",
      "the output:",
      "",
      "{\"aa\":1,\"bb\":2}",
      "class DataClass",
      "DataClass(a=1, b=2)",
      "3.Data Class with @field:JSONField Annotation",
      "Define DataClassField data-class:",
      "",
      "data class DataClassField(@field:JSONField(name=\"aaa\")val a : Int, @field:JSONField(name=\"bbb\")val b : Int)",
      "then we use JSON to serialize and deserialize:",
      "",
      "    val dtf = DataClassField(1,2)",
      "    val jsonf = JSON.toJSONString(dtf)",
      "    println(jsonf)",
      "    val clzf = DataClassField::class",
      "    println(clzf.javaObjectType)",
      "    val dt3 = JSON.parseObject(jsonf,clzf.javaObjectType)",
      "    println(dt3)",
      "the output:",
      "",
      "{\"aaa\":1,\"bbb\":2}",
      "class DataClassField",
      "DataClassField(a=1, b=2)"
    ]
  },
  "ad-Gson": {
    "scope": "java",
    "prefix": "ad-Gson",
    "body": ["dependencies {",
      "    implementation 'com.google.code.gson:gson:2.8.6'",
      "}",
      "Using Gson with Maven",
      "To use Gson with Maven2/3, you can use the Gson version available in Maven Central by adding the following dependency:",
      "",
      "<dependencies>",
      "    <!--  Gson: Java to Json conversion -->",
      "    <dependency>",
      "      <groupId>com.google.code.gson</groupId>",
      "      <artifactId>gson</artifactId>",
      "      <version>2.8.6</version>",
      "      <scope>compile</scope>",
      "    </dependency>",
      "</dependencies>",
      "That is it, now your maven project is Gson enabled.",
      "",
      "Primitives Examples",
      "// Serialization",
      "Gson gson = new Gson();",
      "gson.toJson(1);            // ==> 1",
      "gson.toJson(\"abcd\");       // ==> \"abcd\"",
      "gson.toJson(new Long(10)); // ==> 10",
      "int[] values = { 1 };",
      "gson.toJson(values);       // ==> [1]",
      "",
      "// Deserialization",
      "int one = gson.fromJson(\"1\", int.class);",
      "Integer one = gson.fromJson(\"1\", Integer.class);",
      "Long one = gson.fromJson(\"1\", Long.class);",
      "Boolean false = gson.fromJson(\"false\", Boolean.class);",
      "String str = gson.fromJson(\"\\"abc\\"\", String.class);",
      "String[] anotherStr = gson.fromJson(\"[\\"abc\\"]\", String[].class);",
      "Object Examples",
      "class BagOfPrimitives {",
      "  private int value1 = 1;",
      "  private String value2 = \"abc\";",
      "  private transient int value3 = 3;",
      "  BagOfPrimitives() {",
      "    // no-args constructor",
      "  }",
      "}",
      "",
      "// Serialization",
      "BagOfPrimitives obj = new BagOfPrimitives();",
      "Gson gson = new Gson();",
      "String json = gson.toJson(obj);  ",
      "",
      "// ==> json is {\"value1\":1,\"value2\":\"abc\"}",
      "Note that you can not serialize objects with circular references since that will result in infinite recursion.",
      "",
      "// Deserialization",
      "BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);",
      "// ==> obj2 is just like obj",
      "Finer Points with Objects",
      "It is perfectly fine (and recommended) to use private fields.",
      "There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.",
      "If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.",
      "This implementation handles nulls correctly.",
      "While serializing, a null field is omitted from the output.",
      "While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.",
      "If a field is synthetic, it is ignored and not included in JSON serialization or deserialization.",
      "Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization.",
      "Nested Classes (including Inner Classes)",
      "Gson can serialize static nested classes quite easily.",
      "",
      "Gson can also deserialize static nested classes. However, Gson can not automatically deserialize the pure inner classes since their no-args constructor also need a reference to the containing Object which is not available at the time of deserialization. You can address this problem by either making the inner class static or by providing a custom InstanceCreator for it. Here is an example:",
      "",
      "public class A { ",
      "  public String a; ",
      "",
      "  class B { ",
      "",
      "    public String b; ",
      "",
      "    public B() {",
      "      // No args constructor for B",
      "    }",
      "  } ",
      "}",
      "NOTE: The above class B can not (by default) be serialized with Gson.",
      "",
      "Gson can not deserialize {\"b\":\"abc\"} into an instance of B since the class B is an inner class. If it was defined as static class B then Gson would have been able to deserialize the string. Another solution is to write a custom instance creator for B.",
      "",
      "public class InstanceCreatorForB implements InstanceCreator<A.B> {",
      "  private final A a;",
      "  public InstanceCreatorForB(A a)  {",
      "    this.a = a;",
      "  }",
      "  public A.B createInstance(Type type) {",
      "    return a.new B();",
      "  }",
      "}",
      "The above is possible, but not recommended.",
      "",
      "Array Examples",
      "Gson gson = new Gson();",
      "int[] ints = {1, 2, 3, 4, 5};",
      "String[] strings = {\"abc\", \"def\", \"ghi\"};",
      "",
      "// Serialization",
      "gson.toJson(ints);     // ==> [1,2,3,4,5]",
      "gson.toJson(strings);  // ==> [\"abc\", \"def\", \"ghi\"]",
      "",
      "// Deserialization",
      "int[] ints2 = gson.fromJson(\"[1,2,3,4,5]\", int[].class); ",
      "// ==> ints2 will be same as ints",
      "We also support multi-dimensional arrays, with arbitrarily complex element types.",
      "",
      "Collections Examples",
      "Gson gson = new Gson();",
      "Collection<Integer> ints = Lists.immutableList(1,2,3,4,5);",
      "",
      "// Serialization",
      "String json = gson.toJson(ints);  // ==> json is [1,2,3,4,5]",
      "",
      "// Deserialization",
      "Type collectionType = new TypeToken<Collection<Integer>>(){}.getType();",
      "Collection<Integer> ints2 = gson.fromJson(json, collectionType);",
      "// ==> ints2 is same as ints",
      "Fairly hideous: note how we define the type of collection. Unfortunately, there is no way to get around this in Java.",
      "",
      "Collections Limitations",
      "Gson can serialize collection of arbitrary objects but can not deserialize from it, because there is no way for the user to indicate the type of the resulting object. Instead, while deserializing, the Collection must be of a specific, generic type. This makes sense, and is rarely a problem when following good Java coding practices.",
      "",
      "Serializing and Deserializing Generic Types",
      "When you call toJson(obj), Gson calls obj.getClass() to get information on the fields to serialize. Similarly, you can typically pass MyClass.class object in the fromJson(json, MyClass.class) method. This works fine if the object is a non-generic type. However, if the object is of a generic type, then the Generic type information is lost because of Java Type Erasure. Here is an example illustrating the point:",
      "",
      "class Foo<T> {",
      "  T value;",
      "}",
      "Gson gson = new Gson();",
      "Foo<Bar> foo = new Foo<Bar>();",
      "gson.toJson(foo); // May not serialize foo.value correctly",
      "",
      "gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar",
      "The above code fails to interpret value as type Bar because Gson invokes foo.getClass() to get its class information, but this method returns a raw class, Foo.class. This means that Gson has no way of knowing that this is an object of type Foo<Bar>, and not just plain Foo.",
      "",
      "You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the TypeToken class.",
      "",
      "Type fooType = new TypeToken<Foo<Bar>>() {}.getType();",
      "gson.toJson(foo, fooType);",
      "",
      "gson.fromJson(json, fooType);",
      "The idiom used to get fooType actually defines an anonymous local inner class containing a method getType() that returns the fully parameterized type.",
      ]
  },
  "ad-useAndroidX": {
    "scope": "java",
    "prefix": "ad-useAndroidX",
    "body": ["使用 Android Studio 迁移现有项目",
      "使用 Android Studio 3.2 及更高版本，您只需从菜单栏中依次选择 Refactor > Migrate to AndroidX，即可将现有项目迁移到 AndroidX。",
      "",
      "重构命令使用两个标记。默认情况下，这两个标记在 gradle.properties 文件中都设为 true：",
      "",
      "android.useAndroidX=true",
      "Android 插件会使用对应的 AndroidX 库而非支持库。",
      "android.enableJetifier=true",
      "Android 插件会通过重写现有第三方库的二进制文件，自动将这些库迁移为使用 AndroidX。",
      "注意：内置的 Android Studio 迁移功能可能并不能完成所有操作。根据您的构建配置，您可能需要手动更新构建脚本和 Proguard 映射。例如，如果您在一个单独的构建文件中维护依赖项配置，请使用下述映射文件来检查依赖项并将其更新为对应的 AndroidX 软件包。",
      ]
  },
  "ad-lottie": {
    "scope": "java",
    "prefix": "ad-lottie",
    "body": ["Gradle is the only supported build configuration, so just add the dependency to your project build.gradle file:",
      "",
      "dependencies {",
      "    ...",
      "    implementation \"com.airbnb.android:lottie:$lottieVersion\"",
      "    ...",
      "}",
      "The latest version is: lottieVersion",
      "",
      "Sample App",
      "You can build the sample app yourself or download it from the Play Store. The sample app includes some built in animations but also allows you to load an animation from internal storage or from a url.",
      "Get it on Google Play",
      "",
      "Core Classes",
      "LottieAnimationView extends ImageView and is the default and simplest way to load a Lottie animation.",
      "LottieDrawable has most of the same APIs as LottieAnimationView but you can use it on any View you want.",
      "LottieComposition is the stateless model repesentation of an animation. You can create one with LottieCompositionFactory and set it on a LottieDrawable or LottieAnimationView.",
      "Loading an Animation",
      "Lottie supports API 16 and above.",
      "",
      "Lottie animations can load animations from:",
      "",
      "A json animation in src/main/res/raw.",
      "A json file in src/main/assets.",
      "A zip file in src/main/assets. See images docs for more info.",
      "A url to a json or zip file.",
      "A json string. The source can be from anything including your own network stack.",
      "An InputStream to either a json file or a zip file.",
      "From XML",
      "The simplest way to use it is with LottieAnimationView:",
      "",
      "It is recommended to use lottie_rawRes because you can use static references to your animation through R instead of just using string names.",
      "",
      "From res/raw (lottie_rawRes) or assets/ (lottie_fileName)",
      "<com.airbnb.lottie.LottieAnimationView",
      "        android:id=\"@+id/animation_view\"",
      "        android:layout_width=\"wrap_content\"",
      "        android:layout_height=\"wrap_content\"",
      "",
      "        app:lottie_rawRes=\"@raw/hello_world\"",
      "        // or",
      "        app:lottie_fileName=\"hello_world.json\"",
      "",
      "        // Loop indefinitely",
      "        app:lottie_loop=\"true\"",
      "        // Start playing as soon as the animation is loaded",
      "        app:lottie_autoPlay=\"true\" />",
      "Programmatically",
      "You can also call many Lottie APIs on LottieAnimationView directly. View the class reference for the full set of APIs.",
      "",
      "Caching Animations",
      "All Lottie animations are cached with a LRU cache by default. Default cache keys will be created for animations loaded from res/raw/ or assets/. Other APIs require setting a cache key. If you fire multiple animation requests for the same animation in parallel such as a wishlist heart in a RecyclerView, subsequent requests will join the existing task so it only gets parsed once (Lottie >= 2.6.0).",
      "",
      "Replacing a static asset with Lottie",
      "One of the primary motivations behind Lottie is to make shipping animations just as easy as shipping static assets.",
      "",
      "Switch from static assets to animations with 3 lines of code!",
      "Static Asset Workflow",
      "Put your pngs or vector drawables (xml) in res/drawable Include it in your layout",
      "",
      "<ImageView",
      "        android:id=\"@+id/image_view\"",
      "        android:layout_width=\"wrap_content\"",
      "        android:layout_height=\"wrap_content\"",
      "        android:scaleType=\"centerCrop\"",
      "        android:src=\"@drawable/your_drawable\" />",
      "Lottie workflow",
      "Put your lottie json in res/raw Include it in your layout:",
      "",
      "<com.airbnb.lottie.LottieAnimationView",
      "        android:id=\"@+id/animation_view\"",
      "        android:layout_width=\"wrap_content\"",
      "        android:layout_height=\"wrap_content\"",
      "        android:scaleType=\"centerCrop\"",
      "        app:lottie_rawRes=\"@raw/your_animation\"",
      "        app:lottie_loop=\"true\"",
      "        app:lottie_autoPlay=\"true\" />",
      "LottieAnimationView extends ImageView so you can start by simply replacing your ImageViews with LottieAnimationViews even if you are still using drawables!",
      "",
      "Animation Listeners",
      "You can control the animation or add listeners:",
      "",
      "animationView.addAnimatorUpdateListener((animation) -> {",
      "    // Do something.",
      "});",
      "animationView.playAnimation();",
      "...",
      "if (animationView.isAnimating()) {",
      "    // Do something.",
      "}",
      "...",
      "animationView.setProgress(0.5f);",
      "...",
      "In the update listener callback: animation.getAnimatedValue() will return the progres of the animation regardless of the currently set min/max frame [0,1].",
      "",
      "animation.getAnimatedFraction() will return the progress of the animation taking into account the set min/max frame [minFrame,maxFrame].",
      "",
      "Custom animators",
      "Although playAnimation() is sufficient for the vast majority of use cases, you can call setProgress(...) in the update callback for your own animator. This can be useful to tie an animation to something like a gesture, download progress, or scroll position.",
      "",
      "// Custom animation speed or duration.",
      "ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);",
      "animator.addUpdateListener(animation -> {",
      "    animationView.setProgress(animation.getAnimatedValue());",
      "});",
      "animator.start();",
      "Looping",
      "Lottie support advanced looping functionality that mirrors ValueAnimator. As such, you can call setRepeatMode(...) or setRepeatCount(...) as you would on a ValueAnimator You can also enable looping from xml with lottie_loop=\"true\"",
      "",
      "You can loop a specific part of an animation by using setMinFrame, setMaxFrame, or setMinAndMaxFrame. There are multiple versions of each that take frame, progress (from 0.0 to 1.0) or a marker name (specified in After Effects).",
      "",
      "Animation Size (px vs dp)",
      "Lottie converts all px values in After Effects to dps on device so that everything is rendered at the same size across devices. This means that instead of making an animation in After Effects that is 1920x1080, it should be more like 411x731px in After Effects which roughly corresponds to the dp screen size of most phones today.",
      "",
      "However, if your animation isn't the perfect size, you have two options:",
      "",
      "ImageView scaleType",
      "LottieAnimationView is a wrapped ImageView and it supports centerCrop and centerInside so you may use those two as you would with any other image.",
      "",
      "Scaling Up/Down",
      "LottieAnimationView and LottieDrawable both have a setScale(float) API that you can use to manually scale up or down your animation. This is rarely useful but can be in certain situations.",
      "",
      "If your animation is performing slowly, make sure to check the documentation on performance. However, try scaling your animation down in combination with a scaleType. This will reduce the amount that Lottie renders per frame. This is particularly helpful if you have large mattes or masks.",
      "",
      "Dynamic Properties",
      "You can update properties dynamically at runtime. This can be used for a variety of purposes such as:",
      "",
      "Theming (day and night or arbitrary themes).",
      "Responding to events such as an error or a success.",
      "Animating a single part of an animation in response to an event.",
      "Responding to view sizes or other values not known at design time.",
      "Understanding After Effects",
      "To understand how to change animation properties in Lottie, you should first understand how animation properties are stored in Lottie. Animation properties are stored in a data tree that mimics the information heirarchy of After Effects. In After Effects a Composition is a collection of Layers that each have their own timelines. Layer objects have string names, and their contents can be an image, shape layers, fills, strokes, or just about anything that is drawable. Each object in After Effects has a name. Lottie can find these objects and properties by their name using a KeyPath.",
      "",
      "Usage",
      "To update a property at runtime, you need 3 things:",
      "",
      "KeyPath",
      "LottieProperty",
      "LottieValueCallback",
      "KeyPath",
      "A KeyPath is used to target a specific content or a set of contents that will be updated. A KeyPath is specified by a list of strings that correspond to the hierarchy of After Effects contents in the original animation.",
      "",
      "KeyPaths can include the specific name of the contents or wildcards:",
      "",
      "Wildcard *",
      "Wildcards match any single content name in its position in the keypath.",
      "Globstar **",
      "Globstars match zero or more layers.",
      ]
  },
  "ad-studio-const": {
    "scope": "java",
    "prefix": "ad-studio-const",
    "body": ["private static final int $name$ = $value$;",
    ]
  },"ad-studio-fbc": {
    "scope": "java",
    "prefix": "ad-studio-fbc",
    "body": ["$var$ = findViewById(R.id.$resId$);",
    ]
  },"ad-studio-foreach": {
    "scope": "java",
    "prefix": "ad-studio-foreach",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },"ad-studio-": {
    "scope": "java",
    "prefix": "ad-studio-",
    "body": []
  },
  "ad-坐标位置": {
    "scope": "java",
    "prefix": "ad-坐标位置",
    "body": ["获取 View 坐标在 Android 开发中非常常见。今天carson将详细给大家讲解 获取 View 坐标常用6种方式：",
      "",
      "getLeft()、getTop()、getRight()、getBottom()",
      "getX()、getY()、getRawX()、getRawY()",
      "getLocationOnScreen（）",
      "getLocationInWindow（）",
      "getGlobalVisibleRect（）",
      "getLocalVisibleRect（）",
      "",
      "作者：Carson_Ho",
      "链接：https://www.jianshu.com/p/b22a33866736",
      "来源：简书",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",
      ]
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  },
  "ad-": {
    "scope": "java",
    "prefix": "ad-",
    "body": []
  }
}
