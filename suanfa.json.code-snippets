{
  // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "sf-冒泡": {
    "scope": "java",
    "prefix": "sf-冒泡",
    "body": [
      "比较相邻的两个数据，如果第二个数小，就交换位置。",
      "从后向前两两比较，一直到比较最前两个数据。最终最小数被交换到起始的位置，这样第一个最小数的位置就排好。",
      "继续重复上述过程，依次将第2.3...n-1个最小数排好位置。",
      "image",
      "3.代码实现",
      "如下所示",
      "public static void BubbleSort1(int[] arr) {",
      "    int temp;//临时变量",
      "    for (int i = 0; i < arr.length - 1; i++) {",
      "        //表示趟数，一共arr.length-1次。",
      "        for (int j = 0; j < arr.length - 1 - i; j++) {",
      "            if (arr[j] > arr[j + 1]) {",
      "                temp = arr[j];",
      "                arr[j] = arr[j + 1];",
      "                arr[j + 1] = temp;",
      "            }",
      "        }",
      "    }",
      "    for(int i=0;i<arr.length;i++){",
      "        System.out.println(\"yc1-----\" +arr[i]);",
      "    }",
      "}",
      "4.如何优化",
      "遇到问题",
      "数据的顺序排好之后，冒泡算法仍然会继续进行下一轮的比较，直到arr.length-1次，后面的比较没有意义的。",
      "解决办法",
      "设置标志位flag，如果发生了交换flag设置为true；如果没有交换就设置为false。",
      "这样当一轮比较结束后如果flag仍为false，即：这一轮没有发生交换，说明数据的顺序已经排好，没有必要继续进行下去。",
      "优化代码",
      "public static void BubbleSort2(int[] arr) {",
      "    int temp;//临时变量",
      "    boolean flag;//是否交换的标志",
      "    for (int i = 0; i < arr.length - 1; i++) {",
      "        //表示趟数，一共arr.length-1次。",
      "        flag = false;",
      "        for (int j = 0; j < arr.length - 1 - i; j++) {",
      "            if (arr[j] > arr[j + 1]) {",
      "                temp = arr[j];",
      "                arr[j] = arr[j + 1];",
      "                arr[j + 1] = temp;",
      "                flag = true;",
      "            }",
      "        }",
      "        if (!flag) break;",
      "    }",
      "    for(int i=0;i<arr.length;i++){",
      "        System.out.println(\"yc2-----\" +arr[i]);",
      "    }",
      "}"
    ]
  },
  "sf-选择排序": {
    "scope": "java",
    "prefix": "sf-选择排序",
    "body": [
      " 基本思想",
      "在长度为N的无序数组中，第一次遍历n-1个数，找到最小的数值与第一个元素交换；",
      "第二次遍历n-2个数，找到最小的数值与第二个元素交换；",
      "依此类推……",
      "第n-1次遍历，找到最小的数值与第n-1个元素交换，排序完成。",
      "1.2 排序过程",
      "通过设置哨位，将哨位位置的数与哨位之后（包括哨位）的序列中最小的数进行交换，然后哨位递增，直到哨位到达数组中最后一个数为止。",
      "image",
      "1.3 代码实现",
      "如下所示",
      "/*",
      " * 直接选择排序",
      " */",
      "public static void selectSort1(int[] data) {",
      "    int pos ;",
      "    for (int i = 0; i < data.length; i++) {",
      "        pos = i;",
      "        // 找出从i开始，到数组末尾这段数组中最小的数，pos标志的是这个最小的数在数组中的位置",
      "        for (int j = i + 1; j < data.length; j++) {",
      "            if (data[j] < data[pos]) {",
      "                pos = j;",
      "            }",
      "        }",
      "        // 交换两个数的位置",
      "        if(pos != i){",
      "            int temp = data[i];",
      "            data[i] = data[pos];",
      "            data[pos] = temp;",
      "        }",
      "    }",
      "    for(int i=0;i<data.length;i++){",
      "        System.out.println(\"yc1-----\" +data[i]);",
      "    }",
      "}"
    ]
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  },
  "sf-": {
    "scope": "java",
    "prefix": "sf-",
    "body": []
  }
}
