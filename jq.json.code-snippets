{
  // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "jq-click": {
    "scope": "javascript,typescript",
    "prefix": "jq-click",
    "body": [
      "常用的 jQuery 事件方法",
      "$(document).ready()",
      "$(document).ready() 方法允许我们在文档完全加载完后执行函数。该事件方法在 jQuery 语法 章节中已经提到过。",
      "",
      "click()",
      "click() 方法是当按钮点击事件被触发时会调用一个函数。",
      "",
      "该函数在用户点击 HTML 元素时执行。",
      "",
      "在下面的实例中，当点击事件在某个 <p> 元素上触发时，隐藏当前的 <p> 元素：",
      "",
      "实例",
      "$(\"p\").click(function(){",
      "  $(this).hide();",
      "});"
    ]
  },
  "jq-dblclick": {
    "scope": "javascript,typescript",
    "prefix": "jq-dblclick",
    "body": [
      "当双击元素时，会发生 dblclick 事件。",
      "",
      "dblclick() 方法触发 dblclick 事件，或规定当发生 dblclick 事件时运行的函数：",
      "",
      "实例",
      "$(\"p\").dblclick(function(){",
      "  $(this).hide();",
      "});"
    ]
  },
  "jq-mouseenter": {
    "scope": "javascript,typescript",
    "prefix": "jq-mouseenter",
    "body": [
      "当鼠标指针穿过元素时，会发生 mouseenter 事件。",
      "",
      "mouseenter() 方法触发 mouseenter 事件，或规定当发生 mouseenter 事件时运行的函数：",
      "",
      "实例",
      "$(\"#p1\").mouseenter(function(){",
      "    alert('您的鼠标移到了 id=\"p1\" 的元素上!');",
      "});"
    ]
  },
  "jq-mouseleave": {
    "scope": "javascript,typescript",
    "prefix": "jq-mouseleave",
    "body": [
      "当鼠标指针离开元素时，会发生 mouseleave 事件。",
      "",
      "mouseleave() 方法触发 mouseleave 事件，或规定当发生 mouseleave 事件时运行的函数：",
      "",
      "实例",
      "$(\"#p1\").mouseleave(function(){",
      "    alert(\"再见，您的鼠标离开了该段落。\");",
      "});"
    ]
  },
  "jq-mousedown": {
    "scope": "javascript,typescript",
    "prefix": "jq-mousedown",
    "body": [
      "当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。",
      "",
      "mousedown() 方法触发 mousedown 事件，或规定当发生 mousedown 事件时运行的函数：",
      "",
      "实例",
      "$(\"#p1\").mousedown(function(){",
      "    alert(\"鼠标在该段落上按下！\");",
      "});"
    ]
  },
  "jq-mouseup": {
    "scope": "javascript,typescript",
    "prefix": "jq-mouseup",
    "body": [
      "当在元素上松开鼠标按钮时，会发生 mouseup 事件。",
      "",
      "mouseup() 方法触发 mouseup 事件，或规定当发生 mouseup 事件时运行的函数：",
      "",
      "实例",
      "$(\"#p1\").mouseup(function(){",
      "    alert(\"鼠标在段落上松开。\");",
      "});"
    ]
  },
  "jq-hover": {
    "scope": "javascript,typescript",
    "prefix": "jq-hover",
    "body": [
      "hover()方法用于模拟光标悬停事件。",
      "",
      "当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。",
      "",
      "实例",
      "$(\"#p1\").hover(",
      "    function(){",
      "        alert(\"你进入了 p1!\");",
      "    },",
      "    function(){",
      "        alert(\"拜拜! 现在你离开了 p1!\");",
      "    }",
      ");"
    ]
  },
  "jq-focus": {
    "scope": "javascript,typescript",
    "prefix": "jq-focus",
    "body": [
      "当元素获得焦点时，发生 focus 事件。",
      "",
      "当通过鼠标点击选中元素或通过 tab 键定位到元素时，该元素就会获得焦点。",
      "",
      "focus() 方法触发 focus 事件，或规定当发生 focus 事件时运行的函数：",
      "",
      "实例",
      "$(\"input\").focus(function(){",
      "  $(this).css(\"background-color\",\"#cccccc\");",
      "});"
    ]
  },
  "jq-blur": {
    "scope": "javascript,typescript",
    "prefix": "jq-blur",
    "body": [
      "当元素失去焦点时，发生 blur 事件。",
      "",
      "blur() 方法触发 blur 事件，或规定当发生 blur 事件时运行的函数：",
      "",
      "实例",
      "$(\"input\").blur(function(){",
      "  $(this).css(\"background-color\",\"#ffffff\");",
      "});"
    ]
  },
  "jq- hide() 和 show() ": {
    "scope": "javascript,typescript",
    "prefix": "jq- hide() 和 show() ",
    "body": [
      "通过 jQuery，您可以使用 hide() 和 show() 方法来隐藏和显示 HTML 元素：",
      "",
      "实例",
      "$(\"#hide\").click(function(){",
      "  $(\"p\").hide();",
      "});",
      " ",
      "$(\"#show\").click(function(){",
      "  $(\"p\").show();",
      "});",
      "语法:",
      "",
      "$(selector).hide(speed,callback);",
      "",
      "$(selector).show(speed,callback);",
      "可选的 speed 参数规定隐藏/显示的速度，可以取以下值：\"slow\"、\"fast\" 或毫秒。",
      "",
      "可选的 callback 参数是隐藏或显示完成后所执行的函数名称。",
      "",
      "下面的例子演示了带有 speed 参数的 hide() 方法：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"p\").hide(1000);",
      "});",
      "",
      "尝试一下 »",
      "下面的例子演示了带有 speed 参数的 hide() 方法，并使用回调函数：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\".hidebtn\").click(function(){",
      "    $(\"div\").hide(1000,\"linear\",function(){",
      "      alert(\"Hide() 方法已完成!\");",
      "    });",
      "  });",
      "});",
      "",
      "尝试一下 »",
      "第二个参数是一个字符串，表示过渡使用哪种缓动函数。（译者注：jQuery自身提供\"linear\" 和 \"swing\"，其他可以使用相关的插件）。"
    ]
  },
  "jq-toggle": {
    "scope": "javascript,typescript",
    "prefix": "jq-toggle",
    "body": [
      "通过 jQuery，您可以使用 toggle() 方法来切换 hide() 和 show() 方法。",
      "",
      "显示被隐藏的元素，并隐藏已显示的元素：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"p\").toggle();",
      "});",
      "",
      "尝试一下 »",
      "语法:",
      "",
      "$(selector).toggle(speed,callback);",
      "可选的 speed 参数规定隐藏/显示的速度，可以取以下值：\"slow\"、\"fast\" 或毫秒。",
      "",
      "可选的 callback 参数是隐藏或显示完成后所执行的函数名称。"
    ]
  },
  "jq-fadeIn": {
    "scope": "javascript,typescript",
    "prefix": "jq-fadeIn",
    "body": [
      "jQuery fadeIn() 用于淡入已隐藏的元素。",
      "",
      "语法:",
      "",
      "$(selector).fadeIn(speed,callback);",
      "可选的 speed 参数规定效果的时长。它可以取以下值：\"slow\"、\"fast\" 或毫秒。.",
      "",
      "可选的 callback 参数是 fading 完成后所执行的函数名称。",
      "",
      "下面的例子演示了带有不同参数的 fadeIn() 方法：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"#div1\").fadeIn();",
      "  $(\"#div2\").fadeIn(\"slow\");",
      "  $(\"#div3\").fadeIn(3000);",
      "});"
    ]
  },
  "jq-fadeOut": {
    "scope": "javascript,typescript",
    "prefix": "jq-fadeOut",
    "body": [
      "jQuery fadeOut() 方法",
      "jQuery fadeOut() 方法用于淡出可见元素。",
      "",
      "语法:",
      "",
      "$(selector).fadeOut(speed,callback);",
      "可选的 speed 参数规定效果的时长。它可以取以下值：\"slow\"、\"fast\" 或毫秒。",
      "",
      "可选的 callback 参数是 fading 完成后所执行的函数名称。",
      "",
      "下面的例子演示了带有不同参数的 fadeOut() 方法：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"#div1\").fadeOut();",
      "  $(\"#div2\").fadeOut(\"slow\");",
      "  $(\"#div3\").fadeOut(3000);",
      "});"
    ]
  },
  "jq-fadeToggle": {
    "scope": "javascript,typescript",
    "prefix": "jq-fadeToggle",
    "body": [
      "jQuery fadeToggle() 方法",
      "jQuery fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。",
      "",
      "如果元素已淡出，则 fadeToggle() 会向元素添加淡入效果。",
      "",
      "如果元素已淡入，则 fadeToggle() 会向元素添加淡出效果。",
      "",
      "语法:",
      "",
      "$(selector).fadeToggle(speed,callback);",
      "可选的 speed 参数规定效果的时长。它可以取以下值：\"slow\"、\"fast\" 或毫秒。",
      "",
      "可选的 callback 参数是 fading 完成后所执行的函数名称。",
      "",
      "下面的例子演示了带有不同参数的 fadeToggle() 方法：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"#div1\").fadeToggle();",
      "  $(\"#div2\").fadeToggle(\"slow\");",
      "  $(\"#div3\").fadeToggle(3000);",
      "});"
    ]
  },
  "jq-fadeTo": {
    "scope": "javascript,typescript",
    "prefix": "jq-fadeTo",
    "body": [
      "jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。",
      "",
      "语法:",
      "",
      "$(selector).fadeTo(speed,opacity,callback);",
      "必需的 speed 参数规定效果的时长。它可以取以下值：\"slow\"、\"fast\" 或毫秒。",
      "",
      "fadeTo() 方法中必需的 opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。",
      "",
      "可选的 callback 参数是该函数完成后所执行的函数名称。",
      "",
      "下面的例子演示了带有不同参数的 fadeTo() 方法：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"#div1\").fadeTo(\"slow\",0.15);",
      "  $(\"#div2\").fadeTo(\"slow\",0.4);",
      "  $(\"#div3\").fadeTo(\"slow\",0.7);",
      "});"
    ]
  },
  "jq-slideDown": {
    "scope": "javascript,typescript",
    "prefix": "jq-slideDown",
    "body": [
      "jQuery slideDown() 方法",
      "jQuery slideDown() 方法用于向下滑动元素。",
      "",
      "语法:",
      "",
      "$(selector).slideDown(speed,callback);",
      "可选的 speed 参数规定效果的时长。它可以取以下值：\"slow\"、\"fast\" 或毫秒。",
      "",
      "可选的 callback 参数是滑动完成后所执行的函数名称。",
      "",
      "下面的例子演示了 slideDown() 方法：",
      "",
      "实例",
      "$(\"#flip\").click(function(){",
      "  $(\"#panel\").slideDown();",
      "});"
    ]
  },
  "jq-slideUp": {
    "scope": "javascript,typescript",
    "prefix": "jq-slideUp",
    "body": [
      "jQuery slideUp() 方法",
      "jQuery slideUp() 方法用于向上滑动元素。",
      "",
      "语法:",
      "",
      "$(selector).slideUp(speed,callback);",
      "可选的 speed 参数规定效果的时长。它可以取以下值：\"slow\"、\"fast\" 或毫秒。",
      "",
      "可选的 callback 参数是滑动完成后所执行的函数名称。",
      "",
      "下面的例子演示了 slideUp() 方法：",
      "",
      "实例",
      "$(\"#flip\").click(function(){",
      "  $(\"#panel\").slideUp();",
      "});"
    ]
  },
  "jq-slideToggle": {
    "scope": "javascript,typescript",
    "prefix": "jq-slideToggle",
    "body": [
      "jQuery slideToggle() 方法",
      "jQuery slideToggle() 方法可以在 slideDown() 与 slideUp() 方法之间进行切换。",
      "",
      "如果元素向下滑动，则 slideToggle() 可向上滑动它们。",
      "",
      "如果元素向上滑动，则 slideToggle() 可向下滑动它们。",
      "",
      "$(selector).slideToggle(speed,callback);",
      "可选的 speed 参数规定效果的时长。它可以取以下值：\"slow\"、\"fast\" 或毫秒。",
      "",
      "可选的 callback 参数是滑动完成后所执行的函数名称。",
      "",
      "下面的例子演示了 slideToggle() 方法：",
      "",
      "实例",
      "$(\"#flip\").click(function(){",
      "  $(\"#panel\").slideToggle();",
      "});"
    ]
  },
  "jq-animate": {
    "scope": "javascript,typescript",
    "prefix": "jq-animate",
    "body": [
      "jQuery 动画 - animate() 方法",
      "jQuery animate() 方法用于创建自定义动画。",
      "",
      "语法：",
      "",
      "$(selector).animate({params},speed,callback);",
      "必需的 params 参数定义形成动画的 CSS 属性。",
      "",
      "可选的 speed 参数规定效果的时长。它可以取以下值：\"slow\"、\"fast\" 或毫秒。",
      "",
      "可选的 callback 参数是动画完成后所执行的函数名称。",
      "",
      "下面的例子演示 animate() 方法的简单应用。它把 <div> 元素往右边移动了 250 像素：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"div\").animate({left:'250px'});",
      "});",

      "默认情况下，所有 HTML 元素都有一个静态位置，且无法移动。",
      "如需对位置进行操作，要记得首先把元素的 CSS position 属性设置为 relative、fixed 或 absolute！"
    ]
  },
  "jq-animate() - 操作多个属性": {
    "scope": "javascript,typescript",
    "prefix": "jq-animate() - 操作多个属性",
    "body": [
      "jQuery animate() - 操作多个属性",
      "请注意，生成动画的过程中可同时使用多个属性：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"div\").animate({",
      "    left:'250px',",
      "    opacity:'0.5',",
      "    height:'150px',",
      "    width:'150px'",
      "  });",
      "});",
      "可以用 animate() 方法来操作所有 CSS 属性吗？",
      "",
      "是的，几乎可以！不过，需要记住一件重要的事情：当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。",
      "",
      "同时，色彩动画并不包含在核心 jQuery 库中。",
      "",
      "如果需要生成颜色动画，您需要从 jquery.com 下载 颜色动画 插件。"
    ]
  },
  "jq-animate() - 使用相对值": {
    "scope": "javascript,typescript",
    "prefix": "jq-animate() - 使用相对值",
    "body": [
      "jQuery animate() - 使用相对值",
      "也可以定义相对值（该值相对于元素的当前值）。需要在值的前面加上 += 或 -=：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"div\").animate({",
      "    left:'250px',",
      "    height:'+=150px',",
      "    width:'+=150px'",
      "  });",
      "});"
    ]
  },
  "jq-animate() - 使用预定义的值": {
    "scope": "javascript,typescript",
    "prefix": "jq-animate() - 使用预定义的值",
    "body": [
      "jQuery animate() - 使用预定义的值",
      "您甚至可以把属性的动画值设置为 \"show\"、\"hide\" 或 \"toggle\"：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"div\").animate({",
      "    height:'toggle'",
      "  });",
      "});"
    ]
  },
  "jq-animate() - 使用队列功能": {
    "scope": "javascript,typescript",
    "prefix": "jq-animate() - 使用队列功能",
    "body": [
      "jQuery animate() - 使用队列功能",
      "默认地，jQuery 提供针对动画的队列功能。",
      "",
      "这意味着如果您在彼此之后编写多个 animate() 调用，jQuery 会创建包含这些方法调用的\"内部\"队列。然后逐一运行这些 animate 调用。",
      "",
      "实例 1",
      "$(\"button\").click(function(){",
      "  var div=$(\"div\");",
      "  div.animate({height:'300px',opacity:'0.4'},\"slow\");",
      "  div.animate({width:'300px',opacity:'0.8'},\"slow\");",
      "  div.animate({height:'100px',opacity:'0.4'},\"slow\");",
      "  div.animate({width:'100px',opacity:'0.8'},\"slow\");",
      "});",
      "下面的例子把 <div> 元素往右边移动了 100 像素，然后增加文本的字号：",
      "",
      "实例 2",
      "$(\"button\").click(function(){",
      "  var div=$(\"div\");",
      "  div.animate({left:'100px'},\"slow\");",
      "  div.animate({fontSize:'3em'},\"slow\");",
      "});",
      " "
    ]
  },
  "jq-stop": {
    "scope": "javascript,typescript",
    "prefix": "jq-stop",
    "body": [
      "jQuery stop() 方法",
      "jQuery stop() 方法用于停止动画或效果，在它们完成之前。",
      "",
      "stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画。",
      "",
      "语法:",
      "",
      "$(selector).stop(stopAll,goToEnd);",
      "可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行。",
      "",
      "可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。",
      "",
      "因此，默认地，stop() 会清除在被选元素上指定的当前动画。",
      "",
      "下面的例子演示 stop() 方法，不带参数：",
      "",
      "实例",
      "$(\"#stop\").click(function(){",
      "  $(\"#panel\").stop();",
      "});"
    ]
  },
  "jq-Callback": {
    "scope": "javascript,typescript",
    "prefix": "jq-Callback",
    "body": [
      "jQuery Callback 方法",
      "Callback 函数在当前动画 100% 完成之后执行。",
      "",
      "jQuery 动画的问题",
      "许多 jQuery 函数涉及动画。这些函数也许会将 speed 或 duration 作为可选参数。",
      "",
      "例子：$(\"p\").hide(\"slow\")",
      "",
      "speed 或 duration 参数可以设置许多不同的值，比如 \"slow\", \"fast\", \"normal\" 或毫秒。",
      "",
      "实例",
      "",
      "以下实例在隐藏效果完全实现后回调函数:",
      "",
      "使用 callback 实例",
      "$(\"button\").click(function(){",
      "  $(\"p\").hide(\"slow\",function(){",
      "    alert(\"段落现在被隐藏了\");",
      "  });",
      "});",
      "",
      "尝试一下",
      "以下实例没有回调函数，警告框会在隐藏效果完成前弹出：",
      "",
      "没有 callback(回调)",
      "$(\"button\").click(function(){",
      "  $(\"p\").hide(1000);",
      "  alert(\"段落现在被隐藏了\");",
      "});"
    ]
  },
  "jq-链(Chaining)": {
    "scope": "javascript,typescript",
    "prefix": "jq-链(Chaining)",
    "body": [
      "jQuery - 链(Chaining)",
      "通过 jQuery，可以把动作/方法链接在一起。",
      "",
      "Chaining 允许我们在一条语句中运行多个 jQuery 方法（在相同的元素上）。",
      "",
      "jQuery 方法链接",
      "直到现在，我们都是一次写一条 jQuery 语句（一条接着另一条）。",
      "",
      "不过，有一种名为链接（chaining）的技术，允许我们在相同的元素上运行多条 jQuery 命令，一条接着另一条。",
      "",
      "提示： 这样的话，浏览器就不必多次查找相同的元素。",
      "",
      "如需链接一个动作，您只需简单地把该动作追加到之前的动作上。",
      "",
      "下面的例子把 css()、slideUp() 和 slideDown() 链接在一起。\"p1\" 元素首先会变为红色，然后向上滑动，再然后向下滑动：",
      "",
      "实例",
      "$(\"#p1\").css(\"color\",\"red\").slideUp(2000).slideDown(2000);",
      "",
      "尝试一下 »",
      "如果需要，我们也可以添加多个方法调用。",
      "",
      "提示：当进行链接时，代码行会变得很长。不过，jQuery 语法不是很严格；您可以按照希望的格式来写，包含换行和缩进。",
      "",
      "如下书写也可以很好地运行：",
      "",
      "实例",
      "$(\"#p1\").css(\"color\",\"red\")",
      "  .slideUp(2000)",
      "  .slideDown(2000);",
      "",
      "尝试一下 »",
      "jQuery 会抛掉多余的空格，并当成一行长代码来执行上面的代码行。"
    ]
  },
  "jq- 获取内容和属性": {
    "scope": "javascript,typescript",
    "prefix": "jq- 获取内容和属性",
    "body": [
      "jQuery 拥有可操作 HTML 元素和属性的强大方法。",
      "",
      "jQuery DOM 操作",
      "jQuery 中非常重要的部分，就是操作 DOM 的能力。",
      "",
      "jQuery 提供一系列与 DOM 相关的方法，这使访问和操作元素和属性变得很容易。",
      "",
      "lamp DOM = Document Object Model （文档对象模型 ",
      "",
      "DOM 定义访问 HTML 和 XML 文档的标准：",
      "",
      "\"W3C 文档对象模型独立于平台和语言的界面，允许程序和脚本动态访问和更新文档的内容、结构以及样式。\"",
      "",
      "",
      "获得内容 - text()、html() 以及 val()",
      "三个简单实用的用于 DOM 操作的 jQuery 方法：",
      "",
      "text() - 设置或返回所选元素的文本内容",
      "html() - 设置或返回所选元素的内容（包括 HTML 标记）",
      "val() - 设置或返回表单字段的值",
      "下面的例子演示如何通过 jQuery text() 和 html() 方法来获得内容：",
      "",
      "实例",
      "$(\"#btn1\").click(function(){",
      "  alert(\"Text: \" + $(\"#test\").text());",
      "});",
      "$(\"#btn2\").click(function(){",
      "  alert(\"HTML: \" + $(\"#test\").html());",
      "});",
      "",
      "尝试一下 »",
      "下面的例子演示如何通过 jQuery val() 方法获得输入字段的值：",
      "",
      "实例",
      "$(\"#btn1\").click(function(){",
      "  alert(\"值为: \" + $(\"#test\").val());",
      "});",
      "",
      "尝试一下 »",
      "",
      "获取属性 - attr()",
      "jQuery attr() 方法用于获取属性值。",
      "",
      "下面的例子演示如何获得链接中 href 属性的值：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  alert($(\"#runoob\").attr(\"href\"));",
      "});"
    ]
  },
  "jq-设置内容和属性": {
    "scope": "javascript,typescript",
    "prefix": "jq-设置内容和属性",
    "body": [
      "设置内容 - text()、html() 以及 val()",
      "我们将使用前一章中的三个相同的方法来设置内容：",
      "",
      "text() - 设置或返回所选元素的文本内容",
      "html() - 设置或返回所选元素的内容（包括 HTML 标记）",
      "val() - 设置或返回表单字段的值",
      "下面的例子演示如何通过 text()、html() 以及 val() 方法来设置内容：",
      "",
      "实例",
      "$(\"#btn1\").click(function(){",
      "    $(\"#test1\").text(\"Hello world!\");",
      "});",
      "$(\"#btn2\").click(function(){",
      "    $(\"#test2\").html(\"<b>Hello world!</b>\");",
      "});",
      "$(\"#btn3\").click(function(){",
      "    $(\"#test3\").val(\"RUNOOB\");",
      "});",
      "",
      "尝试一下 »",
      "",
      "text()、html() 以及 val() 的回调函数",
      "上面的三个 jQuery 方法：text()、html() 以及 val()，同样拥有回调函数。回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。",
      "",
      "下面的例子演示带有回调函数的 text() 和 html()：",
      "",
      "实例",
      "$(\"#btn1\").click(function(){",
      "    $(\"#test1\").text(function(i,origText){",
      "        return \"旧文本: \" + origText + \" 新文本: Hello world! (index: \" + i + \")\"; ",
      "    });",
      "});",
      " ",
      "$(\"#btn2\").click(function(){",
      "    $(\"#test2\").html(function(i,origText){",
      "        return \"旧 html: \" + origText + \" 新 html: Hello <b>world!</b> (index: \" + i + \")\"; ",
      "    });",
      "});",
      "",
      "尝试一下 »",
      "",
      "设置属性 - attr()",
      "jQuery attr() 方法也用于设置/改变属性值。",
      "",
      "下面的例子演示如何改变（设置）链接中 href 属性的值：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"#runoob\").attr(\"href\",\"http://www.runoob.com/jquery\");",
      "});",
      "",
      "尝试一下 »",
      "attr() 方法也允许您同时设置多个属性。",
      "",
      "下面的例子演示如何同时设置 href 和 title 属性：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "    $(\"#runoob\").attr({",
      "        \"href\" : \"http://www.runoob.com/jquery\",",
      "        \"title\" : \"jQuery 教程\"",
      "    });",
      "});",
      "",
      "尝试一下 »",
      "",
      "attr() 的回调函数",
      "jQuery 方法 attr()，也提供回调函数。回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。",
      "",
      "下面的例子演示带有回调函数的 attr() 方法：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"#runoob\").attr(\"href\", function(i,origValue){",
      "    return origValue + \"/jquery\"; ",
      "  });",
      "});"
    ]
  },
  "jq-添加元素": {
    "scope": "javascript,typescript",
    "prefix": "jq-添加元素",
    "body": [
      "jQuery - 添加元素",
      "通过 jQuery，可以很容易地添加新元素/内容。",
      "",
      "添加新的 HTML 内容",
      "我们将学习用于添加新内容的四个 jQuery 方法：",
      "",
      "append() - 在被选元素的结尾插入内容",
      "prepend() - 在被选元素的开头插入内容",
      "after() - 在被选元素之后插入内容",
      "before() - 在被选元素之前插入内容",
      "jQuery append() 方法",
      "jQuery append() 方法在被选元素的结尾插入内容（仍然在该元素的内部）。",
      "",
      "实例",
      "$(\"p\").append(\"追加文本\");",
      "",
      "尝试一下 »",
      "",
      "jQuery prepend() 方法",
      "jQuery prepend() 方法在被选元素的开头插入内容。",
      "",
      "实例",
      "$(\"p\").prepend(\"在开头追加文本\");",
      "",
      "尝试一下 »",
      "",
      "通过 append() 和 prepend() 方法添加若干新元素",
      "在上面的例子中，我们只在被选元素的开头/结尾插入文本/HTML。",
      "",
      "不过，append() 和 prepend() 方法能够通过参数接收无限数量的新元素。可以通过 jQuery 来生成文本/HTML（就像上面的例子那样），或者通过 JavaScript 代码和 DOM 元素。",
      "",
      "在下面的例子中，我们创建若干个新元素。这些元素可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建。然后我们通过 append() 方法把这些新元素追加到文本中（对 prepend() 同样有效）：",
      "",
      "实例",
      "function appendText()",
      "{",
      "    var txt1=\"<p>文本。</p>\";              // 使用 HTML 标签创建文本",
      "    var txt2=$(\"<p></p>\").text(\"文本。\");  // 使用 jQuery 创建文本",
      "    var txt3=document.createElement(\"p\");",
      "    txt3.innerHTML=\"文本。\";               // 使用 DOM 创建文本 text with DOM",
      "    $(\"body\").append(txt1,txt2,txt3);        // 追加新元素",
      "}",
      "",
      "尝试一下 »",
      "",
      "jQuery after() 和 before() 方法",
      "jQuery after() 方法在被选元素之后插入内容。",
      "",
      "jQuery before() 方法在被选元素之前插入内容。",
      "",
      "实例",
      "$(\"img\").after(\"在后面添加文本\");",
      " ",
      "$(\"img\").before(\"在前面添加文本\");",
      "",
      "尝试一下 »",
      "",
      "通过 after() 和 before() 方法添加若干新元素",
      "after() 和 before() 方法能够通过参数接收无限数量的新元素。可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建新元素。",
      "",
      "在下面的例子中，我们创建若干新元素。这些元素可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建。然后我们通过 after() 方法把这些新元素插到文本中（对 before() 同样有效）：",
      "",
      "实例",
      "function afterText()",
      "{",
      "    var txt1=\"<b>I </b>\";                    // 使用 HTML 创建元素",
      "    var txt2=$(\"<i></i>\").text(\"love \");     // 使用 jQuery 创建元素",
      "    var txt3=document.createElement(\"big\");  // 使用 DOM 创建元素",
      "    txt3.innerHTML=\"jQuery!\";",
      "    $(\"img\").after(txt1,txt2,txt3);          // 在图片后添加文本",
      "}"
    ]
  },
  "jq-删除元素": {
    "scope": "javascript,typescript",
    "prefix": "jq-删除元素",
    "body": [
      "jQuery - 删除元素",
      "通过 jQuery，可以很容易地删除已有的 HTML 元素。",
      "",
      "删除元素/内容",
      "如需删除元素和内容，一般可使用以下两个 jQuery 方法：",
      "",
      "remove() - 删除被选元素（及其子元素）",
      "empty() - 从被选元素中删除子元素",
      "jQuery remove() 方法",
      "jQuery remove() 方法删除被选元素及其子元素。",
      "",
      "实例",
      "$(\"#div1\").remove();",
      "",
      "尝试一下 »",
      "",
      "jQuery empty() 方法",
      "jQuery empty() 方法删除被选元素的子元素。",
      "",
      "实例",
      "$(\"#div1\").empty();",
      "",
      "尝试一下 »",
      "",
      "过滤被删除的元素",
      "jQuery remove() 方法也可接受一个参数，允许您对被删元素进行过滤。",
      "",
      "该参数可以是任何 jQuery 选择器的语法。",
      "",
      "下面的例子删除 class=\"italic\" 的所有 <p> 元素：",
      "",
      "实例",
      "$(\"p\").remove(\".italic\");"
    ]
  },
  "jq- 获取并设置 CSS 类": {
    "scope": "javascript,typescript",
    "prefix": "jq- 获取并设置 CSS 类",
    "body": [
      "通过 jQuery，可以很容易地对 CSS 元素进行操作。 切换 CSS 类",
      "",
      "jQuery 操作 CSS",
      "jQuery 拥有若干进行 CSS 操作的方法。我们将学习下面这些：",
      "",
      "addClass() - 向被选元素添加一个或多个类",
      "removeClass() - 从被选元素删除一个或多个类",
      "toggleClass() - 对被选元素进行添加/删除类的切换操作",
      "css() - 设置或返回样式属性",
      "实例样式表",
      "下面的样式表将用于本页的所有例子：",
      "",
      ".important",
      "{",
      "        font-weight:bold;",
      "        font-size:xx-large;",
      "}",
      " ",
      ".blue",
      "{",
      "        color:blue;",
      "}",
      "",
      "jQuery addClass() 方法",
      "下面的例子展示如何向不同的元素添加 class 属性。当然，在添加类时，您也可以选取多个元素：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"h1,h2,p\").addClass(\"blue\");",
      "  $(\"div\").addClass(\"important\");",
      "});",
      "",
      "尝试一下 »",
      "您也可以在 addClass() 方法中规定多个类：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"body div:first\").addClass(\"important blue\");",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery removeClass() 方法",
      "下面的例子演示如何在不同的元素中删除指定的 class 属性：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"h1,h2,p\").removeClass(\"blue\");",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery toggleClass() 方法",
      "下面的例子将展示如何使用 jQuery toggleClass() 方法。该方法对被选元素进行添加/删除类的切换操作：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"h1,h2,p\").toggleClass(\"blue\");",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery css() 方法",
      "我们将在下一章讲解 jQuery css() 方法。"
    ]
  },
  "jq-css() 方法": {
    "scope": "javascript,typescript",
    "prefix": "jq-css() 方法",
    "body": [
      "",
      "jQuery css() 方法",
      "css() 方法设置或返回被选元素的一个或多个样式属性。",
      "",
      "返回 CSS 属性",
      "如需返回指定的 CSS 属性的值，请使用如下语法：",
      "",
      "css(\"propertyname\");",
      "下面的例子将返回首个匹配元素的 background-color 值：",
      "",
      "实例",
      "$(\"p\").css(\"background-color\");",
      "",
      "尝试一下 »",
      "",
      "设置 CSS 属性",
      "如需设置指定的 CSS 属性，请使用如下语法：",
      "",
      "css(\"propertyname\",\"value\");",
      "下面的例子将为所有匹配元素设置 background-color 值：",
      "",
      "实例",
      "$(\"p\").css(\"background-color\",\"yellow\");",
      "",
      "尝试一下 »",
      "",
      "设置多个 CSS 属性",
      "如需设置多个 CSS 属性，请使用如下语法：",
      "",
      "css({\"propertyname\":\"value\",\"propertyname\":\"value\",...});",
      "下面的例子将为所有匹配元素设置 background-color 和 font-size：",
      "",
      "实例",
      "$(\"p\").css({\"background-color\":\"yellow\",\"font-size\":\"200%\"});"
    ]
  },
  "jq-尺寸": {
    "scope": "javascript,typescript",
    "prefix": "jq-尺寸",
    "body": [
      "jQuery 尺寸方法",
      "jQuery 提供多个处理尺寸的重要方法：",
      "",
      "width()",
      "height()",
      "innerWidth()",
      "innerHeight()",
      "outerWidth()",
      "outerHeight()",
      "jQuery 尺寸",
      "jQuery Dimensions",
      "",
      "jQuery width() 和 height() 方法",
      "width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。",
      "",
      "height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）。",
      "",
      "下面的例子返回指定的 <div> 元素的宽度和高度：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  var txt=\"\";",
      "  txt+=\"div 的宽度是: \" + $(\"#div1\").width() + \"</br>\";",
      "  txt+=\"div 的高度是: \" + $(\"#div1\").height();",
      "  $(\"#div1\").html(txt);",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery innerWidth() 和 innerHeight() 方法",
      "innerWidth() 方法返回元素的宽度（包括内边距）。",
      "",
      "innerHeight() 方法返回元素的高度（包括内边距）。",
      "",
      "下面的例子返回指定的 <div> 元素的 inner-width/height：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  var txt=\"\";",
      "  txt+=\"div 宽度，包含内边距: \" + $(\"#div1\").innerWidth() + \"</br>\";",
      "    txt+=\"div 高度，包含内边距: \" + $(\"#div1\").innerHeight();",
      "  $(\"#div1\").html(txt);",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery outerWidth() 和 outerHeight() 方法",
      "outerWidth() 方法返回元素的宽度（包括内边距和边框）。",
      "",
      "outerHeight() 方法返回元素的高度（包括内边距和边框）。",
      "",
      "下面的例子返回指定的 <div> 元素的 outer-width/height：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  var txt=\"\";",
      "  txt+=\"div 宽度，包含内边距和边框: \" + $(\"#div1\").outerWidth() + \"</br>\";",
      "  txt+=\"div 高度，包含内边距和边框: \" + $(\"#div1\").outerHeight();",
      "  $(\"#div1\").html(txt);",
      "});"
    ]
  },
  "jq-遍历": {
    "scope": "javascript,typescript",
    "prefix": "jq-遍历",
    "body": [
      "祖先是父、祖父或曾祖父等等。",
      "",
      "通过 jQuery，您能够向上遍历 DOM 树，以查找元素的祖先。",
      "",
      "向上遍历 DOM 树",
      "这些 jQuery 方法很有用，它们用于向上遍历 DOM 树：",
      "",
      "parent()",
      "parents()",
      "parentsUntil()",
      "jQuery parent() 方法",
      "parent() 方法返回被选元素的直接父元素。",
      "",
      "该方法只会向上一级对 DOM 树进行遍历。",
      "",
      "下面的例子返回每个 <span> 元素的直接父元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"span\").parent();",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery parents() 方法",
      "parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)。",
      "",
      "下面的例子返回所有 <span> 元素的所有祖先：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"span\").parents();",
      "});",
      "",
      "尝试一下 »",
      "您也可以使用可选参数来过滤对祖先元素的搜索。",
      "",
      "下面的例子返回所有 <span> 元素的所有祖先，并且它是 <ul> 元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"span\").parents(\"ul\");",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery parentsUntil() 方法",
      "parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。",
      "",
      "下面的例子返回介于 <span> 与 <div> 元素之间的所有祖先元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"span\").parentsUntil(\"div\");",
      "});"
    ]
  },
  "jq- 后代": {
    "scope": "javascript,typescript",
    "prefix": "jq- 后代",
    "body": [
      "后代是子、孙、曾孙等等。",
      "",
      "通过 jQuery，您能够向下遍历 DOM 树，以查找元素的后代。",
      "",
      "向下遍历 DOM 树",
      "下面是两个用于向下遍历 DOM 树的 jQuery 方法：",
      "",
      "children()",
      "find()",
      "jQuery children() 方法",
      "children() 方法返回被选元素的所有直接子元素。",
      "",
      "该方法只会向下一级对 DOM 树进行遍历。",
      "",
      "下面的例子返回每个 <div> 元素的所有直接子元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"div\").children();",
      "});",
      "",
      "尝试一下 »",
      "您也可以使用可选参数来过滤对子元素的搜索。",
      "",
      "下面的例子返回类名为 \"1\" 的所有 <p> 元素，并且它们是 <div> 的直接子元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"div\").children(\"p.1\");",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery find() 方法",
      "find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。",
      "",
      "下面的例子返回属于 <div> 后代的所有 <span> 元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"div\").find(\"span\");",
      "});",
      "",
      "尝试一下 »",
      "下面的例子返回 <div> 的所有后代：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"div\").find(\"*\");",
      "});"
    ]
  },
  "jq-": {
    "scope": "javascript,typescript",
    "prefix": "jq-",
    "body": []
  },
  "jq-": {
    "scope": "javascript,typescript",
    "prefix": "jq-",
    "body": []
  },
  "jq-同胞(siblings)": {
    "scope": "javascript,typescript",
    "prefix": "jq-同胞(siblings)",
    "body": [
      "",
      "同胞拥有相同的父元素。",
      "",
      "通过 jQuery，您能够在 DOM 树中遍历元素的同胞元素。",
      "",
      "在 DOM 树中水平遍历",
      "有许多有用的方法让我们在 DOM 树进行水平遍历：",
      "",
      "siblings()",
      "next()",
      "nextAll()",
      "nextUntil()",
      "prev()",
      "prevAll()",
      "prevUntil()",
      "jQuery siblings() 方法",
      "siblings() 方法返回被选元素的所有同胞元素。",
      "",
      "下面的例子返回 <h2> 的所有同胞元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"h2\").siblings();",
      "});",
      "",
      "尝试一下 »",
      "您也可以使用可选参数来过滤对同胞元素的搜索。",
      "",
      "下面的例子返回属于 <h2> 的同胞元素的所有 <p> 元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"h2\").siblings(\"p\");",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery next() 方法",
      "next() 方法返回被选元素的下一个同胞元素。",
      "",
      "该方法只返回一个元素。",
      "",
      "下面的例子返回 <h2> 的下一个同胞元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"h2\").next();",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery nextAll() 方法",
      "nextAll() 方法返回被选元素的所有跟随的同胞元素。",
      "",
      "下面的例子返回 <h2> 的所有跟随的同胞元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"h2\").nextAll();",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery nextUntil() 方法",
      "nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素。",
      "",
      "下面的例子返回介于 <h2> 与 <h6> 元素之间的所有同胞元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"h2\").nextUntil(\"h6\");",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery prev(), prevAll() & prevUntil() 方法",
      "prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同胞元素（在 DOM 树中沿着同胞之前元素遍历，而不是之后元素遍历）。"
    ]
  },
  "jq-过滤": {
    "scope": "javascript,typescript",
    "prefix": "jq-过滤",
    "body": [
      "缩小搜索元素的范围",
      "三个最基本的过滤方法是：first(), last() 和 eq()，它们允许您基于其在一组元素中的位置来选择一个特定的元素。",
      "",
      "其他过滤方法，比如 filter() 和 not() 允许您选取匹配或不匹配某项指定标准的元素。",
      "",
      "jQuery first() 方法",
      "first() 方法返回被选元素的首个元素。",
      "",
      "下面的例子选取首个 <div> 元素内部的第一个 <p> 元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"div p\").first();",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery last() 方法",
      "last() 方法返回被选元素的最后一个元素。",
      "",
      "下面的例子选择最后一个 <div> 元素中的最后一个 <p> 元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"div p\").last();",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery eq() 方法",
      "eq() 方法返回被选元素中带有指定索引号的元素。",
      "",
      "索引号从 0 开始，因此首个元素的索引号是 0 而不是 1。下面的例子选取第二个 <p> 元素（索引号 1）：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"p\").eq(1);",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery filter() 方法",
      "filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。",
      "",
      "下面的例子返回带有类名 \"url\" 的所有 <p> 元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"p\").filter(\".url\");",
      "});",
      "",
      "尝试一下 »",
      "",
      "jQuery not() 方法",
      "not() 方法返回不匹配标准的所有元素。",
      "",
      "提示：not() 方法与 filter() 相反。",
      "",
      "下面的例子返回不带有类名 \"url\" 的所有 <p> 元素：",
      "",
      "实例",
      "$(document).ready(function(){",
      "  $(\"p\").not(\".url\");",
      "});"
    ]
  },
  "jq-load": {
    "scope": "javascript,typescript",
    "prefix": "jq-load",
    "body": [
      "jQuery - AJAX load() 方法",
      "jQuery load() 方法",
      "jQuery load() 方法是简单但强大的 AJAX 方法。",
      "",
      "load() 方法从服务器加载数据，并把返回的数据放入被选元素中。",
      "",
      "语法:",
      "",
      "$(selector).load(URL,data,callback);",
      "必需的 URL 参数规定您希望加载的 URL。",
      "",
      "可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。",
      "",
      "可选的 callback 参数是 load() 方法完成后所执行的函数名称。",
      "",
      "这是示例文件（\"demo_test.txt\"）的内容：",
      "",
      "<h2>jQuery AJAX 是个非常棒的功能！</h2>",
      "<p id=\"p1\">这是段落的一些文本。</p>",
      "下面的例子会把文件 \"demo_test.txt\" 的内容加载到指定的 <div> 元素中：",
      "",
      "实例",
      "$(\"#div1\").load(\"demo_test.txt\");",
      "",
      "尝试一下 »",
      "也可以把 jQuery 选择器添加到 URL 参数。",
      "",
      "下面的例子把 \"demo_test.txt\" 文件中 id=\"p1\" 的元素的内容，加载到指定的 <div> 元素中：",
      "",
      "实例",
      "$(\"#div1\").load(\"demo_test.txt #p1\");",
      "",
      "尝试一下 »",
      "可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：",
      "",
      "responseTxt - 包含调用成功时的结果内容",
      "statusTXT - 包含调用的状态",
      "xhr - 包含 XMLHttpRequest 对象",
      "下面的例子会在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示\"外部内容加载成功！\"，而如果失败，则显示错误消息：",
      "",
      "实例",
      "$(\"button\").click(function(){",
      "  $(\"#div1\").load(\"demo_test.txt\",function(responseTxt,statusTxt,xhr){",
      "    if(statusTxt==\"success\")",
      "      alert(\"外部内容加载成功!\");",
      "    if(statusTxt==\"error\")",
      "      alert(\"Error: \"+xhr.status+\": \"+xhr.statusText);",
      "  });",
      "});"
    ]
  }
}
