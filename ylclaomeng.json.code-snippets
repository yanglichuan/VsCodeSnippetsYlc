{
  // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "ft-AboutDialog": {
    "scope": "dart",
    "prefix": "ft-AboutDialog",
    "body": [
      "showAboutDialog(",
      "  context: context,",
      "  applicationIcon: Image.asset(",
      "    'images/bird.png',",
      "    height: 100,",
      "    width: 100,",
      "  ),",
      "  applicationName: '应用程序',",
      "  applicationVersion: '1.0.0',",
      "  applicationLegalese: 'copyright 老孟，一枚有态度的程序员',",
      "  children: <Widget>[",
      "    Container(",
      "      height: 30,",
      "      color: Colors.red,",
      "    ),",
      "    Container(",
      "      height: 30,",
      "      color: Colors.blue,",
      "    ),",
      "    Container(",
      "      height: 30,",
      "      color: Colors.green,",
      "    )",
      "  ],",
      ");",
      " "
    ]
  },
  "ft-显示中文方法": {
    "scope": "dart",
    "prefix": "ft-显示中文方法",
    "body": [
      "下面的2个按钮根据应用程序支持的语言显示相应的语言，比如显示中文方法如下：",
      "",
      "在pubspec.yaml中配置支持国际化：",
      "dependencies:",
      "  flutter:",
      "    sdk: flutter",
      "  flutter_localizations:",
      "    sdk: flutter",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "在MaterialApp中配置当前区域：",
      "MaterialApp(",
      "      title: 'Flutter Demo',",
      "      localizationsDelegates: [",
      "        GlobalMaterialLocalizations.delegate,",
      "        GlobalWidgetsLocalizations.delegate,",
      "      ],",
      "      supportedLocales: [",
      "        const Locale('zh', 'CH'),",
      "        const Locale('en', 'US'),",
      "      ],",
      "      locale: Locale('zh'),",
      "      ...",
      "  )",
      " "
    ]
  },
  "ft-AboutListTile": {
    "scope": "dart",
    "prefix": "ft-AboutListTile",
    "body": [
      "AboutListTile(",
      "  icon: FlutterLogo(),",
      "  child: Text('About 老孟程序员'),",
      ")",
      " ",
      "AboutListTile(",
      "    icon: FlutterLogo(),",
      "    child: Text('About 老孟程序员'),",
      "    applicationName: '老孟程序员',",
      "    applicationVersion: 'V1.0.0',",
      "    applicationIcon: FlutterLogo(),",
      "    applicationLegalese: '专注分享Flutter相关内容')"
    ]
  },
  "ft-RichText": {
    "scope": "dart",
    "prefix": "ft-RichText",
    "body": [
      "final TextStyle textStyle = Theme.of(context).textTheme.body1;",
      "final List<Widget> aboutBoxChildren = <Widget>[",
      "  SizedBox(height: 24),",
      "  RichText(",
      "    text: TextSpan(",
      "      children: <TextSpan>[",
      "        TextSpan(",
      "            style: textStyle,",
      "            text: 'Flutter is Google’s UI toolkit for building beautiful, '",
      "                'natively compiled applications for mobile, web, and desktop '",
      "                'from a single codebase. Learn more about Flutter at '),",
      "        TextSpan(",
      "            style: textStyle.copyWith(color: Theme.of(context).accentColor),",
      "            text: 'https://flutter.dev'),",
      "        TextSpan(style: textStyle, text: '.'),",
      "      ],",
      "    ),",
      "  ),",
      "];",
      "",
      "return AboutListTile(",
      "  icon: FlutterLogo(),",
      "  child: Text('About 老孟程序员'),",
      "  applicationName: '老孟程序员',",
      "  applicationVersion: 'V1.0.0',",
      "  applicationIcon: FlutterLogo(),",
      "  applicationLegalese: '专注分享Flutter相关内容',",
      "  aboutBoxChildren: aboutBoxChildren,",
      "  dense: false,",
      ")"
    ]
  },
  "ft-AbsorbPointer": {
    "scope": "dart",
    "prefix": "ft-AbsorbPointer",
    "body": [
      "AbsorbPointer",
      "AbsorbPointer是一种禁止用户输入的控件，比如按钮的点击、输入框的输入、ListView的滚动等，你可能说将按钮的onPressed设置为null，一样也可以实现，是的，但AbsorbPointer可以提供多组件的统一控制，而不需要你单独为每一个组件设置。",
      "",
      "用法如下：",
      "",
      "AbsorbPointer(",
      "  child: Row(",
      "    children: <Widget>[",
      "      RaisedButton(onPressed: (){},),",
      "      RaisedButton(onPressed: (){},),",
      "      RaisedButton(onPressed: (){},),",
      "      RaisedButton(onPressed: (){},),",
      "",
      "    ],",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "默认情况下，这些按钮是否响应点击事件的，如果想要响应点击事件只需设置absorbing为false即可：",
      "",
      "AbsorbPointer(",
      "  absorbing: false,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#IgnorePointer",
      "IgnorePointer的用法和AbsorbPointer一样，而且达到的效果一样，用法如下：",
      "",
      "IgnorePointer(",
      "  child: Row(",
      "    children: <Widget>[",
      "      RaisedButton(onPressed: (){},),",
      "      RaisedButton(onPressed: (){},),",
      "      RaisedButton(onPressed: (){},),",
      "      RaisedButton(onPressed: (){},),",
      "    ],",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#区别",
      "AbsorbPointer本身可以接收点击事件，消耗掉事件，而IgnorePointer无法接收点击事件，其下的控件可以接收到点击事件（不是子控件）。",
      "",
      "如果有2个盒子，一个200x200的红色盒子，一个100x100的蓝色盒子，蓝色盒子位于红色盒子之上居中显示，给2个盒子添加点击事件，如下：",
      "",
      "return Container(",
      "      height: 200,",
      "      width: 200,",
      "      child: Stack(",
      "        alignment: Alignment.center,",
      "        children: <Widget>[",
      "          Listener(",
      "            onPointerDown: (v) {",
      "              print('click red');",
      "            },",
      "            child: Container(",
      "              color: Colors.red,",
      "            ),",
      "          ),",
      "          Listener(",
      "            onPointerDown: (v) {",
      "              print('click red');",
      "            },",
      "            child: Container(",
      "              color: Colors.blue,",
      "              width: 100,",
      "              height: 100,",
      "            ),",
      "          ),",
      "        ],",
      "      ),",
      "    );",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "点击蓝色盒子时，打印结果：",
      "",
      "flutter: click blue",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "点击蓝色盒子区域以外的红色盒子，打印结果：",
      "",
      "flutter: click red",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "此时用AbsorbPointer包裹蓝色盒子：",
      "",
      "return Container(",
      "  height: 200,",
      "  width: 200,",
      "  child: Stack(",
      "    alignment: Alignment.center,",
      "    children: <Widget>[",
      "      Listener(",
      "        onPointerDown: (v) {",
      "          print('click red');",
      "        },",
      "        child: Container(",
      "          color: Colors.red,",
      "        ),",
      "      ),",
      "      Listener(",
      "        onPointerDown: (v) {",
      "          print('click blue self');",
      "        },",
      "        child: AbsorbPointer(",
      "          child: Listener(",
      "            onPointerDown: (v) {",
      "              print('click blue child');",
      "            },",
      "            child: Container(",
      "              color: Colors.blue,",
      "              width: 100,",
      "              height: 100,",
      "            ),",
      "          ),",
      "        ),",
      "      ),",
      "    ],",
      "  ),",
      ");",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "点击蓝色盒子，打印如下：",
      "",
      "flutter: click blue self",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "说明AbsorbPointer本身接收到了点击事件，将AbsorbPointer改为IgnorePointer,打印如下：",
      "",
      "flutter: click red",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "点击事件穿透蓝色盒子到红色盒子，红色盒子接收到了点击事件。",
      "",
      "#使用场景",
      "1、根据业务需求禁用/启用多个组件。",
      "",
      "2、根据业务需求禁用/启用整个App。"
    ]
  },
  "ft-Chip": {
    "scope": "dart",
    "prefix": "ft-Chip",
    "body": [
      "Chip",
      "#RawChip",
      "Material风格标签控件，此控件是其他标签控件的基类，通常情况下，不会直接创建此控件，而是使用如下控件：",
      "",
      "Chip",
      "InputChip",
      "ChoiceChip",
      "FilterChip",
      "ActionChip",
      "如果你想自定义标签类控件时通常使用此控件。",
      "",
      "RawChip可以通过设置onSelected被选中，设置onDeleted被删除，也可以通过设置onPressed而像一个按钮，它有一个label属性，有一个前置（avatar）和后置图标（deleteIcon）。",
      "",
      "基本用法如下：",
      "",
      "RawChip(",
      "  label: Text('老孟'),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "禁用状态设置：",
      "",
      "RawChip(",
      "  label: Text('老孟'),",
      "  isEnabled: false,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置左侧控件，一般是图标：",
      "",
      "RawChip(",
      "  avatar: CircleAvatar(",
      "    child: Text('孟'),",
      "  ),",
      "  label: Text('老孟'),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置label的样式和内边距：",
      "",
      "RawChip(",
      "  label: Text('老孟'),",
      "  labelStyle: TextStyle(color: Colors.blue),",
      "  labelPadding: EdgeInsets.symmetric(horizontal: 10),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置删除相关属性：",
      "",
      "RawChip(",
      "  label: Text('老孟'),",
      "  onDeleted: (){",
      "    print('onDeleted');",
      "  },",
      "  deleteIcon: Icon(Icons.delete),",
      "  deleteIconColor: Colors.red,",
      "  deleteButtonTooltipMessage: '删除',",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "点击删除图标，回调onDeleted。",
      "",
      "设置形状、背景颜色及内边距：",
      "",
      "RawChip(",
      "  label: Text('老孟'),",
      "  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),",
      "  backgroundColor: Colors.blue,",
      "  padding: EdgeInsets.symmetric(vertical: 10),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置阴影：",
      "",
      "RawChip(",
      "  label: Text('老孟'),",
      "  elevation: 8,",
      "  shadowColor: Colors.blue,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "materialTapTargetSize属性控制最小点击区域，详情查看：MaterialTapTargetSize",
      "",
      "设置选中状态、颜色：",
      "",
      "bool _selected = false;",
      "RawChip(",
      "  label: Text('老孟'),",
      "  selected: _selected,",
      "  onSelected: (v){",
      "    setState(() {",
      "      _selected = v;",
      "    });",
      "  },",
      "  selectedColor: Colors.blue,",
      "  selectedShadowColor: Colors.red,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置选中状态下“前置对勾”图标：",
      "",
      "RawChip(",
      "  label: Text('老孟'),",
      "  selected: true,",
      "  showCheckmark: true,",
      "  checkmarkColor: Colors.red,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "showCheckmark为false时，无“前置对勾”图标。",
      "",
      "设置点击属性：",
      "",
      "RawChip(",
      "  label: Text('老孟'),",
      "  onPressed: (){",
      "    print('onPressed');",
      "  },",
      "  pressElevation: 12,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "点击时有水波纹效果。",
      "",
      "#Chip",
      "Chip是一个简单的标签控件，仅显示信息和删除相关属性，是一个简化版的RawChip，用法和RawChip一样。源代码如下：",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  assert(debugCheckHasMaterial(context));",
      "  return RawChip(",
      "    avatar: avatar,",
      "    label: label,",
      "    labelStyle: labelStyle,",
      "    labelPadding: labelPadding,",
      "    deleteIcon: deleteIcon,",
      "    onDeleted: onDeleted,",
      "    deleteIconColor: deleteIconColor,",
      "    deleteButtonTooltipMessage: deleteButtonTooltipMessage,",
      "    tapEnabled: false,",
      "    shape: shape,",
      "    clipBehavior: clipBehavior,",
      "    focusNode: focusNode,",
      "    autofocus: autofocus,",
      "    backgroundColor: backgroundColor,",
      "    padding: padding,",
      "    materialTapTargetSize: materialTapTargetSize,",
      "    elevation: elevation,",
      "    shadowColor: shadowColor,",
      "    isEnabled: true,",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#InputChip",
      "以紧凑的形式表示一条复杂的信息，例如实体（人，地方或事物）或对话文本。",
      "",
      "InputChip 本质上也是RawChip，用法和RawChip一样。源代码如下：",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  assert(debugCheckHasMaterial(context));",
      "  return RawChip(",
      "    avatar: avatar,",
      "    label: label,",
      "    labelStyle: labelStyle,",
      "    labelPadding: labelPadding,",
      "    deleteIcon: deleteIcon,",
      "    onDeleted: onDeleted,",
      "    deleteIconColor: deleteIconColor,",
      "    deleteButtonTooltipMessage: deleteButtonTooltipMessage,",
      "    onSelected: onSelected,",
      "    onPressed: onPressed,",
      "    pressElevation: pressElevation,",
      "    selected: selected,",
      "    tapEnabled: true,",
      "    disabledColor: disabledColor,",
      "    selectedColor: selectedColor,",
      "    tooltip: tooltip,",
      "    shape: shape,",
      "    clipBehavior: clipBehavior,",
      "    focusNode: focusNode,",
      "    autofocus: autofocus,",
      "    backgroundColor: backgroundColor,",
      "    padding: padding,",
      "    materialTapTargetSize: materialTapTargetSize,",
      "    elevation: elevation,",
      "    shadowColor: shadowColor,",
      "    selectedShadowColor: selectedShadowColor,",
      "    showCheckmark: showCheckmark,",
      "    checkmarkColor: checkmarkColor,",
      "    isEnabled: isEnabled && (onSelected != null || onDeleted != null || onPressed != null),",
      "    avatarBorder: avatarBorder,",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#ChoiceChip",
      "允许从一组选项中进行单个选择，创建一个类似于单选按钮的标签，本质上ChoiceChip也是一个RawChip，ChoiceChip本身不具备单选属性。",
      "",
      "单选demo如下：",
      "",
      "int _selectIndex = 0;",
      "Wrap(",
      "  spacing: 15,",
      "  children: List.generate(10, (index) {",
      "    return ChoiceChip(",
      "      label: Text('老孟 $index'),",
      "      selected: _selectIndex == index,",
      "      onSelected: (v) {",
      "        setState(() {",
      "          _selectIndex = index;",
      "        });",
      "      },",
      "    );",
      "  }).toList(),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "本控件由普通程序员提供。",
      "",
      "#FilterChip",
      "FilterChip可以作为过滤标签，本质上也是一个RawChip，用法如下：",
      "",
      "List<String> _filters = [];",
      "",
      "Column(",
      "  children: <Widget>[",
      "    Wrap(",
      "      spacing: 15,",
      "      children: List.generate(10, (index) {",
      "        return FilterChip(",
      "          label: Text('老孟 $index'),",
      "          selected: _filters.contains('$index'),",
      "          onSelected: (v) {",
      "            setState(() {",
      "              if(v){",
      "                _filters.add('$index');",
      "              }else{",
      "                _filters.removeWhere((f){",
      "                  return f == '$index';",
      "                });",
      "              }",
      "            });",
      "          },",
      "        );",
      "      }).toList(),",
      "    ),",
      "    Text('选中：${_filters.join(',')}'),",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "#ActionChip",
      "显示与主要内容有关的一组动作，本质上也是一个RawChip，用法如下：",
      "",
      "ActionChip(",
      "    avatar: CircleAvatar(",
      "      backgroundColor: Colors.grey.shade800,",
      "      child: Text('孟'),",
      "    ),",
      "    label: Text('老孟'),",
      "    onPressed: () {",
      "      print(\"onPressed\");",
      "    })",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "效果很像按钮类控件。"
    ]
  },
  "ft-AlertDialog": {
    "scope": "dart",
    "prefix": "ft-AlertDialog",
    "body": [
      "AlertDialog",
      "当应用程序进行重要操作时经常需要用户进行2次确认，以避免用户的误操作，比如删除文件时，一般会弹出提示“是否要删除当前文件”，用户点击确认后才会进行删除操作，这时我们可以使用提示框（AlertDialog或者CupertinoAlertDialog）。",
      "",
      "根据设计的不同，我们可以选择Material风格的AlertDialog或者Cupertino（ios）风格的CupertinoAlertDialog，",
      "",
      "Material风格基础用法如下：",
      "",
      "RaisedButton(",
      "  child: Text('切换'),",
      "  onPressed: () {",
      "    showDialog(",
      "        context: context,",
      "        builder: (context) {",
      "          return AlertDialog(",
      "            title: Text('提示'),",
      "            content: Text('确认删除吗？'),",
      "            actions: <Widget>[",
      "              FlatButton(child: Text('取消'),onPressed: (){},),",
      "              FlatButton(child: Text('确认'),onPressed: (){},),",
      "            ],",
      "          );",
      "        });",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "Material风格效果：",
      "",
      "",
      "",
      "AlertDialog的属性相对比较丰富，可以设置title样式、content样式、背景颜色、阴影值，设置是形状：",
      "",
      "AlertDialog(",
      "  title: Text('提示'),",
      "  content: Text('确认删除吗？'),",
      "  backgroundColor: Colors.lightBlueAccent,",
      "  elevation: 24,",
      "  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(50)),",
      "  actions: <Widget>[",
      "    FlatButton(child: Text('取消'),onPressed: (){},),",
      "    FlatButton(child: Text('确认'),onPressed: (){},),",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "",
      "",
      "用户点击“取消”或者“确定”按钮后退出对话框，App需要知道知道用户选择了哪个选项，用法如下：",
      "",
      "RaisedButton(",
      "  child: Text('切换'),",
      "  onPressed: () async {",
      "    var result = await showDialog(",
      "        context: context,",
      "        builder: (context) {",
      "          return AlertDialog(",
      "            title: Text('提示'),",
      "            content: Text('确认删除吗？'),",
      "            actions: <Widget>[",
      "              FlatButton(",
      "                child: Text('取消'),",
      "                onPressed: () {",
      "                  Navigator.of(context).pop('cancel');",
      "                },",
      "              ),",
      "              FlatButton(",
      "                child: Text('确认'),",
      "                onPressed: () {",
      "                  Navigator.of(context).pop('ok');",
      "                },",
      "              ),",
      "            ],",
      "          );",
      "        });",
      "    print('$result');",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#CupertinoAlertDialog",
      "Cupertino（ios）风格基础用法如下：",
      "",
      "RaisedButton(",
      "  child: Text('切换'),",
      "  onPressed: () {",
      "    showCupertinoDialog(",
      "        context: context,",
      "        builder: (context) {",
      "          return CupertinoAlertDialog(",
      "            title: Text('提示'),",
      "            content: Text('确认删除吗？'),",
      "            actions: <Widget>[",
      "              CupertinoDialogAction(child: Text('取消'),onPressed: (){},),",
      "              CupertinoDialogAction(child: Text('确认'),onPressed: (){},),",
      "            ],",
      "          );",
      "        });",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "Cupertino（ios）风格效果如下：",
      "",
      "",
      "",
      "showDialog和AlertDialog配合使用展示Material风格对话框，showCupertinoDialog和CupertinoAlertDialog配合使用展示iOS风格对话框，showCupertinoDialog点击空白处是无法退出对话框的，而showDialog点击空白处默认退出对话框，barrierDismissible属性控制点击空白处的行为，用法如下：",
      "",
      "showDialog(",
      "    barrierDismissible: false,",
      "    )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#SimpleDialog",
      "如果你觉得系统提供的这2个风格的对话框不够个性，你可以试试SimpleDialog，用法和AlertDialog基本相同，如下：",
      "",
      "SimpleDialog(",
      "  title: Text('提示'),",
      "  children: <Widget>[",
      "    Container(",
      "      height: 80,",
      "      alignment: Alignment.center,",
      "",
      "      child: Text('确认删除吗？'),",
      "    ),",
      "    Divider(height: 1,),",
      "    FlatButton(",
      "      child: Text('取消'),",
      "      onPressed: () {",
      "        Navigator.of(context).pop('cancel');",
      "      },",
      "    ),",
      "    Divider(height: 1,),",
      "    FlatButton(",
      "      child: Text('确认'),",
      "      onPressed: () {",
      "        Navigator.of(context).pop('ok');",
      "      },",
      "    ),",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "#Dialog",
      "如果你觉得这还是不够个性，那可以祭出终极大招了，直接使用Dialog，Dialog可以定制任何对话框，只需将对话框的内容给child属性：",
      "",
      "Dialog(",
      "  child: MyDialog(),",
      ");",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "当然一般情况下，系统提供的对话框就够用了，这几个对话框组件用法基本一样，不同的地方仅仅是灵活性和使用简易程度的不要，Dialog最灵活，但使用起来比AlertDialog复杂一些，AlertDialog使用起来非常简单，但布局和基本样式都已经固定好，不如Dialog灵活"
    ]
  },
  "ft-Align": {
    "scope": "dart",
    "prefix": "ft-Align",
    "body": [
      "Align",
      "Align和Center控件都是控制子控件位置的控件。",
      "",
      "#Align",
      "基本用法：",
      "",
      "Container(",
      "  color: Colors.lightBlue,",
      "  width: 200,",
      "  height: 200,",
      "  child: Align(",
      "    child: Text('老孟',style: TextStyle(color: Colors.white,fontSize: 20),),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "Align默认居中对齐，效果如下；",
      "",
      "",
      "",
      "当然还可以设置其他对齐方法，比如bottomRight(右下角)等，用法如下：",
      "",
      "Align(",
      "  alignment: Alignment.bottomRight,",
      "  child: Text('老孟',style: TextStyle(color: Colors.white,fontSize: 20),),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "如果系统提供的位置都不是想要的，可以使用如下方式：",
      "",
      "Align(",
      "  alignment: Alignment(0.2,0.5),",
      "  child: Text('老孟',style: TextStyle(color: Colors.white,fontSize: 20),),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "Alignment参数x,y坐标系统如下，注意这个坐标系统和常见的不太一样：",
      "",
      "·",
      "",
      "widthFactor和heightFactor参数不为null且父组件没有限制大小，此时Align的宽度等于子控件的宽度乘以对应的factor，用法如下：",
      "",
      "Container(",
      "  color: Colors.lightBlue,",
      "  child: Align(",
      "    widthFactor: 3,",
      "    heightFactor: 4,",
      "    child: Container(",
      "      height: 50,",
      "      width: 50,",
      "      color: Colors.red,",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "#Center",
      "Center控件继承自Align，通过名字我们也知道Center是让子控件居中，用法如下：",
      "",
      "Center(",
      "  child: Text('老孟'),",
      ")",
      " ",
      " "
    ]
  },
  "ft-AlignTransition": {
    "scope": "dart",
    "prefix": "ft-AlignTransition",
    "body": [
      "AlignTransition",
      "对Align子控件位置变换动画，用法如下：",
      "",
      "@override",
      "  void initState() {",
      "    _animationController =",
      "        AnimationController(duration: Duration(seconds: 2), vsync: this);",
      "    _animation = Tween<AlignmentGeometry>(",
      "            begin: Alignment.topLeft, end: Alignment.bottomRight)",
      "        .animate(_animationController);",
      "",
      "    //开始动画",
      "    _animationController.forward();",
      "    super.initState();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "      height: 200,",
      "      width: 200,",
      "      color: Colors.blue,",
      "      child: AlignTransition(",
      "        alignment: _animation,",
      "        child: Container(",
      "          height: 30,",
      "          width: 30,",
      "          color: Colors.red,",
      "        ),",
      "      ),",
      "    );",
      "  }",
      " "
    ]
  },
  "ft-AnimatedAlign": {
    "scope": "dart",
    "prefix": "ft-AnimatedAlign",
    "body": [
      "AnimatedAlign组件方便我们构建位置动画，基本用法如下：",
      "",
      "var _alignment = Alignment.topLeft;",
      "",
      "@override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "      width: 200,",
      "      height: 200,",
      "      color: Colors.lightBlue,",
      "      child: AnimatedAlign(",
      "        alignment: _alignment,",
      "        duration: Duration(seconds: 2),",
      "        child: IconButton(",
      "          icon: Icon(Icons.print,color:Colors.red,size: 30,),",
      "          onPressed: (){",
      "            setState(() {",
      "              _alignment = Alignment.bottomRight;",
      "            });",
      "          },",
      "        ),",
      "      ),",
      "    );",
      "  }"
    ]
  },
  "ft-AnimatedBuilder": {
    "scope": "dart",
    "prefix": "ft-AnimatedBuilder",
    "body": [
      "AnimatedBuilder可以让我们轻松的构建动画控件，下面的案例是让flutter logo图片旋转，代码如下：",
      "",
      "class _TestState extends State<Test> with TickerProviderStateMixin {",
      "AnimationController animationController;",
      "",
      "@override",
      "void initState() {",
      "  animationController =",
      "      AnimationController(duration: Duration(seconds: 2), vsync: this)",
      "        ..addStatusListener((status) {",
      "          if (status == AnimationStatus.completed) {",
      "            animationController.reverse();",
      "          } else if (status == AnimationStatus.dismissed) {",
      "            animationController.forward();",
      "          }",
      "        });",
      "  animation = Tween(begin: 0.0, end: 2.0 * pi).animate(animationController);",
      "  //开始动画",
      "  animationController.forward();",
      ")",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  return AnimatedBuilder(",
      "    animation: animation,",
      "    builder: (BuildContext context, Widget child) {",
      "      return Transform.rotate(",
      "        angle: animation.value,",
      "        child: child,",
      "      );",
      "    },",
      "    child: FlutterLogo(size: 60,),",
      "  );",
      "}",
      "@override",
      "  dispose() {",
      "    super.dispose();",
      "    animationController.dispose();",
      "  }",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "builder方法是animation的值发生变化会调用builder函数，构建新的组件。",
      "",
      "animation参数表示动画。",
      "",
      "child参数将会传递给builder方法，如果builder返回一个不依赖于animation的组件，那么这个子控件不会每次都重建，child参数可以不设置，但官方建议设置，它在某些情况下可以优化其体验。"
    ]
  },
  "ft-AnimatedContainer": {
    "scope": "dart",
    "prefix": "ft-AnimatedContainer",
    "body": [
      "AnimatedContainer",
      "Flutter中很多用于动画的控件，这篇文章介绍动画控件AnimatedContainer，我们可以通俗的理解AnimatedContainer是带动画功能的Container，关于Container的详细介绍可以查看Flutter Widgets 之 Container，这篇详细介绍了Container的用法。",
      "",
      "AnimatedContainer只需要提供动画开始值和结束值，它就会动起来并不需要我们主动调用setState方法。 变化AnimatedContainer的宽高实现变大的效果，代码如下：​",
      "",
      "bool click = false;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: GestureDetector(",
      "        onTap: () {",
      "          setState(() {",
      "            click = !click;",
      "          });",
      "        },",
      "        child: AnimatedContainer(",
      "          height: click ? 200 : 100,",
      "          width: click ? 200 : 100,",
      "          color: Colors.blue,",
      "          duration: Duration(seconds: 3),",
      "",
      "        ),",
      "      ),",
      "    );",
      "  }",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下： ",
      "",
      "动画不仅可以作用在宽高上，还可以作用在颜色、边界、边界圆角半径、背景图片、形状等。",
      "",
      "AnimatedContainer有2个必须的参数，一个时长duration，即动画执行的时长，另一个是动画曲线curve，默认是线性，系统为我们提供了很多动画曲线（加速、减速等）。 设置动画曲线代码如下：",
      "",
      "AnimatedContainer(",
      "	curve: Curves.bounceIn,",
      "	...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "如果想在动画执行结束时做一些事情，需要设置onEnd，代码如下：",
      "",
      "AnimatedContainer(",
      "	onEnd: (){",
      "		...",
      "	}",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#实战",
      "将图片放大并过度到圆形，动画执行结束后在反向执行动画，如此反复，代码如下：",
      "",
      "AnimatedContainer(",
      "      height: click ? 200 : 100,",
      "      width: click ? 200 : 100,",
      "      decoration: BoxDecoration(",
      "          image: DecorationImage(",
      "            image: NetworkImage(",
      "                'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl-2.jpg'),",
      "            fit: BoxFit.cover,",
      "          ),",
      "          borderRadius: BorderRadius.all(Radius.circular(",
      "            click ? 200 : 0,",
      "          ))),",
      "      duration: Duration(seconds: 3),",
      "      curve: Curves.linear,",
      "      onEnd: (){",
      "        setState(() {",
      "          click = !click;",
      "        });",
      "      },",
      "    )",
      " ",
      " "
    ]
  },
  "ft-AnimatedCrossFade": {
    "scope": "dart",
    "prefix": "ft-AnimatedCrossFade",
    "body": [
      "AnimatedCrossFade",
      "AnimatedCrossFade组件让2个组件在切换时出现交叉渐入的效果，因此AnimatedCrossFade需要设置2个子控件、动画时间和显示第几个子控件，用法如下：",
      "",
      "AnimatedCrossFade(",
      "  duration: Duration(seconds: 1),",
      "  crossFadeState:",
      "      _showFirst ? CrossFadeState.showFirst : CrossFadeState.showSecond,",
      "  firstChild: Container(",
      "    height: 150,",
      "    width: 150,",
      "    alignment: Alignment.center,",
      "    decoration: BoxDecoration(shape: BoxShape.circle, color: Colors.blue),",
      "    child: Text('first child',style: TextStyle(color: Colors.white),),",
      "  ),",
      "  secondChild: Container(",
      "    height: 150,",
      "    width: 150,",
      "    alignment: Alignment.center,",
      "    decoration:",
      "        BoxDecoration(shape: BoxShape.rectangle, color: Colors.orange,borderRadius:BorderRadius.circular(20)),",
      "    child: Text('second child',style: TextStyle(color: Colors.white),),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "_showFirst参数由一个按钮按住，代码如下：",
      "",
      " bool _showFirst = true;",
      "RaisedButton(",
      "  child: Text('切换'),",
      "  onPressed: () {",
      "    setState(() {",
      "      _showFirst = !_showFirst;",
      "    });",
      "  },",
      "),",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "AnimatedCrossFade不仅支持同尺寸，还支持不同尺寸的控件进行切换，效果如下：",
      "",
      "",
      "",
      "当矩形过渡到圆形时有一个抖动，矩形直接变为圆形直径，解决抖动问题使用layoutBuilder，用法如下：",
      "",
      "AnimatedCrossFade(",
      "  layoutBuilder: (child1, key1, child2, key2) {",
      "    return Stack(",
      "      overflow: Overflow.visible,",
      "      alignment: Alignment.center,",
      "      children: <Widget>[",
      "        Positioned(",
      "          top: 0,",
      "          bottom: 0,",
      "          key: key2,",
      "          child: child2,",
      "        ),",
      "        Positioned(",
      "          key: key1,",
      "          child: child1,",
      "        ),",
      "      ],",
      "    );",
      "  },",
      "  )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "我们还可以设置尺寸和子组件的动画曲线，用法如下：",
      "",
      "AnimatedCrossFade(",
      "  firstCurve: Curves.bounceIn,",
      "  secondCurve: Curves.bounceInOut,",
      "  sizeCurve: Curves.easeIn,",
      "  )",
      " "
    ]
  },
  "ft-AnimatedDefaultTextStyle": {
    "scope": "dart",
    "prefix": "ft-AnimatedDefaultTextStyle",
    "body": [
      "AnimatedDefaultTextStyle",
      "TextStyle属性动画，用法如下：",
      "",
      "class AnimationDemo extends StatefulWidget {",
      "  @override",
      "  State<StatefulWidget> createState() => _AnimationDemo();",
      "}",
      "",
      "class _AnimationDemo extends State<AnimationDemo>",
      "    with SingleTickerProviderStateMixin {",
      "  TextStyle _style;",
      "  @override",
      "  void initState() {",
      "    _style=TextStyle(color: Colors.blue, fontSize: 14);",
      "  super.initState();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Column(",
      "      children: <Widget>[",
      "        SizedBox(height: 200,),",
      "        AnimatedDefaultTextStyle(",
      "          style: _style,",
      "          duration: Duration(seconds: 2),",
      "          child: Text('老孟'),",
      "        ),",
      "        SizedBox(height: 100,),",
      "        RaisedButton(",
      "          onPressed: (){",
      "            setState(() {",
      "              _style = TextStyle(color: Colors.red, fontSize: 24);",
      "            });",
      "          },",
      "        )",
      "      ],",
      "    );",
      "  }",
      "",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-AnimatedIcon": {
    "scope": "dart",
    "prefix": "ft-AnimatedIcon",
    "body": [
      "AnimatedIcon",
      "我们都知道Flutter系统中提供了大量的图标，但你是否知道Flutter还提供了很多动画图标，想要使用这些动画图标需要使用AnimatedIcon控件，首先需要设置图标，代码如下：",
      "",
      "AnimatedIcon(",
      "  icon: AnimatedIcons.view_list,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "还需要设置progress，progress用于图标的动画，设置如下：",
      "",
      "import 'package:flutter/material.dart';",
      "",
      "class Test extends StatefulWidget {",
      "  @override",
      "  State<StatefulWidget> createState() => _TestState();",
      "}",
      "",
      "class _TestState extends State<Test> with TickerProviderStateMixin {",
      "  AnimationController animationController;",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    animationController =",
      "        AnimationController(duration: Duration(seconds: 1), vsync: this)",
      "          ..addStatusListener((AnimationStatus status) {",
      "            if (status == AnimationStatus.completed) {",
      "              animationController.reverse();",
      "            } else if (status == AnimationStatus.dismissed) {",
      "              animationController.forward();",
      "            }",
      "          });",
      "    animationController.forward();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "      height: 100,",
      "      width: 100,",
      "      alignment: Alignment.center,",
      "      child: AnimatedIcon(",
      "        icon: AnimatedIcons.view_list,",
      "        progress: animationController,",
      "      ),",
      "    );",
      "  }",
      "",
      "  @override",
      "  dispose() {",
      "    super.dispose();",
      "    animationController.dispose();",
      "  }",
      "}",
      "",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "上面的代码同时对动画的状态进行了监听使动画往复运动，动画效果："
    ]
  },
  "ft-AnimatedModalBarrier": {
    "scope": "dart",
    "prefix": "ft-AnimatedModalBarrier",
    "body": [
      "AnimatedModalBarrier",
      "对ModalBarrier控件的颜色进行动画，用法如下：",
      "",
      "class AnimationDemo extends StatefulWidget {",
      "  @override",
      "  State<StatefulWidget> createState() => _AnimationDemo();",
      "}",
      "",
      "class _AnimationDemo extends State<AnimationDemo>",
      "    with SingleTickerProviderStateMixin {",
      "  AnimationController _animationController;",
      "  Animation _animation;",
      "",
      "  @override",
      "  void initState() {",
      "    _animationController =",
      "        AnimationController(duration: Duration(seconds: 2), vsync: this);",
      "",
      "    _animation = ColorTween(",
      "            begin: Colors.red,",
      "            end: Colors.blue)",
      "        .animate(_animationController);",
      "",
      "    //开始动画",
      "    _animationController.forward();",
      "    super.initState();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: Container(",
      "        height: 100,",
      "        width: 100,",
      "        child: AnimatedModalBarrier(",
      "          color: _animation,",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "",
      "  @override",
      "  void dispose() {",
      "    _animationController.dispose();",
      "    super.dispose();",
      "  }",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-AnimatedOpacity": {
    "scope": "dart",
    "prefix": "ft-AnimatedOpacity",
    "body": [
      "AnimatedOpacity",
      "AnimatedOpacity是一个隐式的动画组件，它可以使子组件变的透明，用法如下：",
      "",
      "var _opacity = 1.0;",
      "AnimatedOpacity(",
      "  opacity: _opacity,",
      "  duration: Duration(seconds: 2),",
      "  child: Container(",
      "    height: 60,",
      "    width: 150,",
      "    color: Colors.blue,",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "duration参数是动画执行的时间，opacity参数是透明值，值的范围是0.0-1.0。如果仅仅是构建这样一个组件是不会有动画效果，需要让opacity参数发生变化，点击按钮设置新的opacity值：",
      "",
      "RaisedButton(",
      "  onPressed: (){",
      "    setState(() {",
      "      _opacity = 0;",
      "    });",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "通过curve参数设置动画执行的曲线，默认直线执行，系统提供了很多中动画执行曲线，比如加速、减速、弹簧等，用法如下：",
      "",
      "AnimatedOpacity(",
      "  curve: Curves.easeIn,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "如果想要在动画执行结束时处理一些事情，可以在onEnd回调中处理，用法如下：",
      "",
      "AnimatedOpacity(",
      "  onEnd: (){",
      "    //动画执行结束回调",
      "  },",
      "  ...",
      ")",
      " "
    ]
  },
  "ft-AnimatedPadding": {
    "scope": "dart",
    "prefix": "ft-AnimatedPadding",
    "body": [
      "AnimatedPadding",
      "AnimatedPadding是一个隐式的动画组件，提供动态改变内边距的动画组件，用法如下：",
      "",
      "var _padding = 0.0;",
      "AnimatedPadding(",
      "      padding: EdgeInsets.symmetric(horizontal: _padding),",
      "      duration: Duration(seconds: 2),",
      "      child: Container(color: Colors.red),",
      "    )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "duration参数是动画执行的时间。如果仅仅是构建这样一个组件是不会有动画效果，需要让padding参数发生变化，点击按钮设置新的_padding值：",
      "",
      "RaisedButton(",
      "          onPressed: () {",
      "            setState(() {",
      "              _padding = 50;",
      "            });",
      "          },",
      "        )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "通过curve参数设置动画执行的曲线，默认直线执行，系统提供了很多中动画执行曲线，比如加速、减速、弹簧等，用法如下：",
      "",
      "AnimatedOpacity(",
      "  curve: Curves.easeIn,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "如果想要在动画执行结束时处理一些事情，可以在onEnd回调中处理，用法如下：",
      "",
      "AnimatedOpacity(",
      "  onEnd: (){",
      "    //动画执行结束回调",
      "  },",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    "
    ]
  },
  "ft-AnimatedPhysicalModel": {
    "scope": "dart",
    "prefix": "ft-AnimatedPhysicalModel",
    "body": [
      "AnimatedPhysicalModel",
      "AnimatedPhysicalModel组件为动画组件，对PhysicalModel组件进行动画，用法如下：",
      "",
      "@override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: Column(",
      "        mainAxisSize: MainAxisSize.min,",
      "        children: <Widget>[",
      "          RaisedButton(",
      "            child: Text('动画'),",
      "            onPressed: () {",
      "              setState(() {",
      "                _animated = !_animated;",
      "              });",
      "            },",
      "          ),",
      "          _buildAnimatedPhysicalModel(),",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "",
      "  bool _animated = false;",
      "",
      "  _buildAnimatedPhysicalModel() {",
      "    return AnimatedPhysicalModel(",
      "      borderRadius: BorderRadius.circular(_animated ? 20 : 10),",
      "      shape: BoxShape.rectangle,",
      "      color: _animated ? Colors.blue : Colors.red,",
      "      elevation: _animated ? 18 : 8,",
      "      shadowColor: !_animated ? Colors.blue : Colors.red,",
      "      child: Container(",
      "        height: 100,",
      "        width: 100,",
      "      ),",
      "      duration: Duration(seconds: 1),",
      "    );",
      "  }",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-AnimatedPositioned": {
    "scope": "dart",
    "prefix": "ft-AnimatedPositioned",
    "body": [
      "AnimatedPositioned",
      "AnimatedPositioned是一个隐式的动画组件，提供动态改变位置的动画组件，用法如下：",
      "",
      "var _top = 30.0;",
      "Stack(",
      "      alignment: Alignment.center,",
      "      children: <Widget>[",
      "        AnimatedPositioned(",
      "          top: _top,",
      "          duration: Duration(seconds: 2),",
      "          child: Container(height: 50, width: 50, color: Colors.red),",
      "        )",
      "      ],",
      "    )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "相关参数说：",
      "",
      "duration参数是动画执行的时间。",
      "",
      "AnimatedPositioned提供left、top、right、bottom四种定位属性，和 Positioned组件用相同。",
      "",
      "AnimatedPositioned只能用于Stack组件中。",
      "",
      "left、right和width3个参数只能设置其中2个，因为设置了其中2个，第三个已经确定了，同理top、bottom和height也只能设置其中2个。",
      "",
      "仅仅是构建这样一个组件是不会有动画效果，需要让_top参数发生变化，点击按钮设置新的_top值：",
      "",
      "RaisedButton(",
      "          onPressed: () {",
      "            setState(() {",
      "              _top = 180;",
      "            });",
      "          },",
      "        )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "通过curve参数设置动画执行的曲线，默认直线执行，系统提供了很多中动画执行曲线，比如加速、减速、弹簧等，用法如下：",
      "",
      "AnimatedOpacity(",
      "  curve: Curves.easeIn,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "如果想要在动画执行结束时处理一些事情，可以在onEnd回调中处理，用法如下：",
      "",
      "AnimatedOpacity(",
      "  onEnd: (){",
      "    //动画执行结束回调",
      "  },",
      "  ...",
      ")",
      " "
    ]
  },
  "ft-AnimatedPositionedDirectional": {
    "scope": "dart",
    "prefix": "ft-AnimatedPositionedDirectional",
    "body": [
      "AnimatedPositionedDirectional",
      "AnimatedPositionedDirectional是一个隐式的动画组件，提供动态改变位置的动画组件，用法如下：",
      "",
      "Stack(",
      "      children: <Widget>[",
      "        AnimatedPositionedDirectional(",
      "          start: _start,",
      "          width: 50,",
      "          height: 50,",
      "          duration: Duration(seconds: 2),",
      "          child: Container(color: Colors.red),",
      "        ),",
      "      ],",
      "    )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "相关参数说：",
      "",
      "duration参数是动画执行的时间。",
      "",
      "提供top、bottom、start、end四种定位属性，分别表示距离上、下、开始、结尾的距离。",
      "",
      "只能用于Stack组件中。",
      "",
      "start、end和width3个参数只能设置其中2个，因为设置了其中2个，第三个已经确定了，同理top、bottom和height也只能设置其中2个。",
      "",
      "仅仅是构建这样一个组件是不会有动画效果，需要让_start参数发生变化，点击按钮设置新的_start值：",
      "",
      "RaisedButton(",
      "          onPressed: () {",
      "            setState(() {",
      "              _start = 180;",
      "            });",
      "          },",
      "        )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "通过curve参数设置动画执行的曲线，默认直线执行，系统提供了很多中动画执行曲线，比如加速、减速、弹簧等，用法如下：",
      "",
      "AnimatedOpacity(",
      "  curve: Curves.easeIn,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "如果想要在动画执行结束时处理一些事情，可以在onEnd回调中处理，用法如下：",
      "",
      "AnimatedOpacity(",
      "  onEnd: (){",
      "    //动画执行结束回调",
      "  },",
      "  ...",
      ")",
      " "
    ]
  },
  "ft-AnimatedSize": {
    "scope": "dart",
    "prefix": "ft-AnimatedSize",
    "body": [
      "AnimatedSize",
      "AnimatedSize是一个动画组件，当指定子组件的尺寸发生变化时，它就会在给定的时间内自动变换其尺寸。",
      "",
      "用法如下：",
      "",
      "class _WidgetsDemo extends State<WidgetsDemo>",
      "    with SingleTickerProviderStateMixin {",
      "  var _height = 100.0;",
      "  var _width = 100.0;",
      "  var _color = Colors.red;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: Column(",
      "        mainAxisAlignment: MainAxisAlignment.center,",
      "        children: <Widget>[",
      "          RaisedButton(",
      "            onPressed: () {",
      "              setState(() {",
      "                _height = 200.0;",
      "                _width = 200.0;",
      "                _color = Colors.blue;",
      "              });",
      "            },",
      "          ),",
      "          AnimatedSize(",
      "            vsync: this,",
      "            duration: Duration(seconds: 1),",
      "            child: Container(",
      "              height: _height,",
      "              width: _width,",
      "              color: _color,",
      "            ),",
      "          )",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-AnimatedSwitcher": {
    "scope": "dart",
    "prefix": "ft-AnimatedSwitcher",
    "body": [
      "AnimatedSwitcher",
      "AnimatedSwitcher在2个或者多个子组件之间切换时使用动画，基本用法如下：",
      "",
      "var _currChild = Container(",
      "    key: ValueKey(\"1\"),",
      "    height: 300,",
      "    width: 300,",
      "    color: Colors.red,",
      "  );",
      "",
      "AnimatedSwitcher(",
      "      duration: Duration(seconds: 1),",
      "      child: _currChild,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "duration参数为动画执行时间。",
      "",
      "点击按钮切换为另一个子组件：",
      "",
      "RaisedButton(",
      "  onPressed: () {",
      "    setState(() {",
      "      _currChild = Container(",
      "                  key: ValueKey(\"2\"),",
      "                  height: 100,",
      "                  width: 100,",
      "                  color: Colors.blue,",
      "                );",
      "    });",
      "  },",
      "),",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "切换的子组件一定要有不同的key，子组件从红色切换到蓝色，默认情况下使用的动画是FadeTransiton，即渐隐渐显。效果如下：",
      "",
      "",
      "",
      "我们也可以使用其他动画，比如缩放动画、旋转动画等，缩放动画用法如下：",
      "",
      "AnimatedSwitcher(",
      "  duration: Duration(seconds: 1),",
      "  child: _currChild,",
      "  transitionBuilder: (Widget child, Animation<double> value) {",
      "    return ScaleTransition(",
      "      child: child,",
      "      scale: value,",
      "    );",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "缩放动画效果如下：",
      "",
      "",
      "",
      "通过switchInCurve和switchOutCurve参数是进出场动画执行的曲线，默认直线执行，系统提供了很多中动画执行曲线，比如加速、减速、弹簧等，用法如下：",
      "",
      "AnimatedSwitcher(",
      "  switchInCurve: Curves.easeIn,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "transitionBuilder参数是转换动画，如上面缩放动画。",
      "",
      "layoutBuilder是定位子组件位置的函数，用法如下：",
      "",
      "AnimatedSwitcher(",
      "  duration: Duration(seconds: 1),",
      "  child: _currChild,",
      "  layoutBuilder: (Widget currentChild, List<Widget> previousChildren){",
      "    return Stack(",
      "      children: <Widget>[",
      "        ...previousChildren,",
      "        currentChild",
      "      ],",
      "      alignment: Alignment.center,",
      "    );",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "将当前的子组件和前面的子组件封装在Stack中，叠加显示。"
    ]
  },
  "ft-AppBar": {
    "scope": "dart",
    "prefix": "ft-AppBar",
    "body": [
      "AppBar",
      "AppBar是material风格的应用程序栏，结构图如下：",
      "",
      "",
      "",
      "leading属性通常设置返回按钮，用法如下：",
      "",
      "Scaffold(",
      "  appBar: AppBar(",
      "    leading: BackButton(),",
      "    title: Text('老孟'),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "如果leading属性未设置，且Scaffold设置了Drawer则显示打开Drawer的图标，用法如下：",
      "",
      "Scaffold(",
      "  appBar: AppBar(",
      "    title: Text('老孟'),",
      "  ),",
      "  drawer: Drawer(),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "如果leading属性未设置，Scaffold也未设置Drawer，此时如果有前一个路由，则显示BackButton，设置如下：",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  return Scaffold(",
      "    appBar: AppBar(",
      "      title: Text('老孟'),",
      "    ),",
      "    body: Center(",
      "      child: RaisedButton(",
      "        onPressed: () {",
      "          Navigator.push(context, MaterialPageRoute(builder: (context) {",
      "            return Scaffold(",
      "              appBar: AppBar(",
      "                title: Text('老孟1'),",
      "              ),",
      "            );",
      "          }));",
      "        },",
      "      ),",
      "    ),",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "通过automaticallyImplyLeading属性改变其行为，设置为false将不会自动设置控件，用法如下：",
      "",
      "AppBar(",
      "  automaticallyImplyLeading: false,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "title属性是应用栏上的标题，一般设置Text文本，用法如下：",
      "",
      "AppBar(",
      "  title: Text('老孟'),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "注意title不一定是居中的，在Android平台默认是靠左的，设置居中代码如下：",
      "",
      "AppBar(",
      "  title: Text('老孟'),",
      "  centerTitle: true,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "actions在程序栏的右边，可以设置多个功能按钮，用法如下：",
      "",
      "Scaffold(",
      "  appBar: AppBar(",
      "    title: Text('老孟'),",
      "    actions: <Widget>[",
      "      IconButton(icon: Icon(Icons.menu),onPressed: (){},),",
      "      IconButton(icon: Icon(Icons.add),onPressed: (){},)",
      "    ],",
      "  )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "flexibleSpace属性在AppBar中一般用不到，此控件和AppBar的height保持一致，只有在改变AppBar的尺寸的时候才会出现效果，因此一般用在SliverAppBar中。",
      "",
      "bottom属性通常请求下设置TabBar，用法如下：",
      "",
      "Scaffold(",
      "  appBar: AppBar(",
      "    title: Text('老孟'),",
      "    bottom:TabBar(",
      "      tabs: <Widget>[",
      "        Text('语文'),",
      "        Text('数学'),",
      "        Text('英语'),",
      "        Text('体育'),",
      "        Text('音乐'),",
      "      ],",
      "      controller: TabController(length: 5,vsync: this),",
      "    )",
      "  )",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置阴影、形状、背景颜色：",
      "",
      "AppBar(",
      "          elevation: 10,",
      "          shape:",
      "              RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),",
      "          backgroundColor: Colors.red,",
      "  )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置icon样式及文字样式：",
      "",
      "AppBar(",
      "    iconTheme:IconThemeData(size: 24),",
      "    actionsIconTheme: IconThemeData(size: 24),",
      "    textTheme: TextTheme(title: TextStyle(color: Colors.red)),",
      "    title: Text('老孟'),",
      "  )",
      " "
    ]
  },
  "ft-ConstrainedBox": {
    "scope": "dart",
    "prefix": "ft-ConstrainedBox",
    "body": [
      "ConstrainedBox",
      "ConstrainedBox组件约束子组件的最大宽高和最小宽高，假如一个组件宽高都是300，包裹在ConstrainedBox中，并给ConstrainedBox添加最大宽高约束，用法如下：",
      "",
      "ConstrainedBox(",
      "  constraints: BoxConstraints(maxHeight: 60, maxWidth: 200),",
      "  child: Container(height: 300, width: 300, color: Colors.red),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "这时子组件是无法突破BoxConstraints设置的最大宽高，效果如下：",
      "",
      "",
      "",
      "BoxConstraints的默认值如下：",
      "",
      "const BoxConstraints({",
      "  this.minWidth = 0.0,",
      "  this.maxWidth = double.infinity, //无限大",
      "  this.minHeight = 0.0,",
      "  this.maxHeight = double.infinity, //无限大",
      "});",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "BoxConstraints提供了便捷的构建函数，方便开发者调用，如BoxConstraints.tight(Size size)和BoxConstraints.expand()等。",
      "",
      "如果BoxConstraints嵌套使用，有2个ConstrainedBox，如下：",
      "",
      "ConstrainedBox(",
      "  constraints: BoxConstraints(maxHeight: 60, maxWidth: 200),",
      "  child: ConstrainedBox(",
      "    constraints: BoxConstraints(maxHeight: 100, maxWidth: 240),",
      "    child: Container(height: 300, width: 300, color: Colors.red),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "以最大宽为例，第一个BoxConstraints的maxHeight值是60，也就是约束其子控件最大高是60，第二个BoxConstraints的maxHeight值是100，由于第二个BoxConstraints也受第一个的约束，所以第二个BoxConstraints最大高也只能是60，最终子组件的最大高是60，同理最大宽是200，因此多级BoxConstraints嵌套约束最大值最终值等于多个BoxConstraints约束中的最小值。同理嵌套约束最小值等于多个BoxConstraints约束中的最大值。",
      "",
      "#UnconstrainedBox",
      "UnconstrainedBox组件不对子组件做任何约束，比如有一个父组件大小是200x200，子组件是UnconstrainedBox，UnconstrainedBox包裹一个300x300的组件，代码如下：",
      "",
      "Container(",
      "  height: 200,",
      "  width: 200,",
      "  child: UnconstrainedBox(",
      "    child: Container(height: 300, width: 300, color: Colors.red),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "注意：黄色区域表示子控件超出父控件的区域了，黄色区域只会在debug模式下存在，在release模式下，只有红色区域。",
      "",
      "UnconstrainedBox虽然不限制其子控件的大小，但仍然受父控件的约束，超出父控件的区域将会截取。",
      "",
      "UnconstrainedBox允许设置对齐方式，用法如下：",
      "",
      "UnconstrainedBox(",
      "  alignment: Alignment.topLeft,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "和上一个图对比，这次左边和上边没有超出区域，右边和下边各超出100px"
    ]
  },
  "ft-SizedBox": {
    "scope": "dart",
    "prefix": "ft-SizedBox",
    "body": [
      "SizedBox是具有固定宽高的组件，直接指定具体的宽高，用法如下：",
      "",
      "SizedBox(",
      "  height: 60,",
      "  width: 200,",
      "  child: RaisedButton(",
      "    child: Text('this is SizedBox'),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "我们也可以设置尺寸无限大，如下：",
      "",
      "SizedBox(",
      "  height: double.infinity,",
      "  width: double.infinity,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "虽然设置了无限大，子控件是否会无限长呢？不，不会，子控件依然会受到父组件的约束，会扩展到父组件的尺寸，还有一个便捷的方式设置此方式：",
      "",
      "SizedBox.expand(",
      "  child: RaisedButton(",
      "    child: Text('this is SizedBox'),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "SizedBox可以没有子组件，但仍然会占用空间，所以SizedBox非常适合控制2个组件之间的空隙，用法如下：",
      "",
      "Column(",
      "  children: <Widget>[",
      "    Container(height: 30,),",
      "    SizedBox(height: 10,),",
      "    Container(height: 30,),",
      "  ],",
      ")",
      " "
    ]
  },
  "ft-AspectRatio": {
    "scope": "dart",
    "prefix": "ft-AspectRatio",
    "body": [
      "AspectRatio",
      "AspectRatio组件是固定宽高比的组件，如果组件的宽度固定，希望高是宽的1/2，可以用AspectRatio实现此效果，用法如下：",
      "",
      "AspectRatio(",
      "  aspectRatio: 2 / 1,",
      "  child: Container(color: Colors.red),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "aspectRatio参数是宽高比，可以直接写成分数的形式，也可以写成小数的形式，但建议写成分数的形式，可读性更高。效果如下："
    ]
  },
  "ft-FractionallySizedBox": {
    "scope": "dart",
    "prefix": "ft-FractionallySizedBox",
    "body": [
      "FractionallySizedBox",
      "当我们需要一个控件的尺寸是相对尺寸时，比如当前按钮的宽度占父组件的70%，可以使用FractionallySizedBox来实现此效果。",
      "",
      "使用FractionallySizedBox包裹子控件，设置widthFactor宽度系数或者heightFactor高度系数，系数值的范围是0-1，0.7表示占父组件的70%，用法如下：",
      "",
      "FractionallySizedBox(",
      "  widthFactor: .7,",
      "  child: RaisedButton(",
      "    child: Text('button'),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "通过alignment参数控制子组件显示的位置，默认为center，用法如下：",
      "",
      "FractionallySizedBox(",
      "  alignment: Alignment.centerLeft,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "如果想让2个控件之间的间隔是当前父控件的10%，可以使用无子控件的FractionallySizedBox，用法如下：",
      "",
      "Container(",
      "  height: 200,",
      "  color: Colors.grey,",
      "  child: Column(",
      "    children: <Widget>[",
      "      Container(",
      "        height: 50,",
      "        color: Colors.red,",
      "      ),",
      "      Flexible(",
      "        child: FractionallySizedBox(",
      "          heightFactor: .1,",
      "        ),",
      "      ),",
      "      Container(",
      "        height: 50,",
      "        color: Colors.blue,",
      "      ),",
      "    ],",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-LimitedBox": {
    "scope": "dart",
    "prefix": "ft-LimitedBox",
    "body": [
      "LimitedBox组件是当不受父组件约束时限制它的尺寸，什么叫不受父组件约束？就像这篇文章介绍的其他组件，它们都会对子组件约束，没有约束的父组件有ListView、Row、Column等，如果LimitedBox的父组件受到约束，此时LimitedBox将会不做任何操作，我们可以认为没有这个组件，代码如下：",
      "",
      "Container(",
      "  height: 100,",
      "  width: 100,",
      "  child: LimitedBox(",
      "    maxHeight: 50,",
      "    maxWidth: 100,",
      "    child: Container(color: Colors.green,),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "LimitedBox设置的宽高不是正方形，此时效果时正方形，说明LimitedBox没有起作用。",
      "",
      "在ListView中直接添加Container组件，如下：",
      "",
      "ListView(",
      "  children: <Widget>[",
      "    Container(",
      "      color: Colors.green,",
      "    ),",
      "    Container(",
      "      color: Colors.red,",
      "    ),",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "这时你会发现什么也没有，因为在容器不受约束时，大小将会设置0，只需将Container包裹在LimitedBox中即可：",
      "",
      "ListView(",
      "  children: <Widget>[",
      "    LimitedBox(",
      "      maxHeight: 100,",
      "      child: Container(",
      "        color: Colors.green,",
      "      ),",
      "    ),",
      "    LimitedBox(",
      "      maxHeight: 100,",
      "      child: Container(",
      "        color: Colors.red,",
      "      ),",
      "    ),",
      "  ],",
      ")"
    ]
  },
  "ft-Container": {
    "scope": "dart",
    "prefix": "ft-Container",
    "body": [
      "Container组件应该是最常用的组件之一，Container组件可以直接设置其宽高，用法如下：",
      "",
      "Container(",
      "  height: 100,",
      "  width: 100,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "Container组件是这些组件里面属性最多的一个，当然也是用法最复杂的一个，这里重点介绍Container对子组件的约束，我在前面的文章中已经详细的介绍了Container，这里不在介绍，奉上跳转地址：https://blog.csdn.net/mengks1987/article/details/104388393",
      "",
      "#总结",
      "这么多约束类的容器组件，到底要使用哪一个组件呢？总结如下：",
      "",
      "ConstrainedBox：适用于需要设置最大/小宽高，组件大小以来子组件大小，但不能超过设置的界限。",
      "UnconstrainedBox：用到情况不多，当作ConstrainedBox的子组件可以“突破”ConstrainedBox的限制，超出界限的部分会被截取。",
      "SizedBox：适用于固定宽高的情况，常用于当作2个组件之间间隙组件。",
      "AspectRatio：适用于固定宽高比的情况。",
      "FractionallySizedBox：适用于占父组件百分比的情况。",
      "LimitedBox：适用于没有父组件约束的情况。",
      "Container：适用于不仅有尺寸的约束，还有装饰（颜色、边框、等）、内外边距等需求的情况。"
    ]
  },
  "ft-Icon": {
    "scope": "dart",
    "prefix": "ft-Icon",
    "body": [
      "Icon是图标控件，Icon不具有交互属性，如果想要交互，可以使用IconButton，另外Icon是具有方向性（Directionality）的，但通常情况下不会在Icon中设置textDirection，而是使用顶级控件中的设置。",
      "",
      "使用图标需要在pubspec.yaml中进行设置：",
      "",
      "flutter:",
      "  uses-material-design: true",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "创建Flutter项目的时候默认配置了此项，所以正常情况下不需要关注。",
      "",
      "基本用法：",
      "",
      "Icon(Icons.add)",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "系统提供的图标都在Icons中，效果如下：",
      "",
      "",
      "",
      "到官网查看所有图标：https://api.flutter.dev/flutter/material/Icons-class.html",
      "",
      "所有图标一览：",
      "",
      "",
      "",
      "推荐一些图标库：",
      "",
      "https://github.com/google/fonts",
      "https://fonts.google.com",
      "https://www.iconfont.cn",
      "建议大家多使用图标，不仅包体会小很多，而且图标都是矢量的，不存在失真的问题。",
      "",
      "设置其大小和颜色：",
      "",
      "Icon(",
      "  Icons.add,",
      "  size: 28,",
      "  color: Colors.red,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-AssetImage": {
    "scope": "dart",
    "prefix": "ft-AssetImage",
    "body": [
      "AssetImage控件是根据图片绘制图标，就是图片上的透明通道不绘制，而不透明的地方使用设置的颜色绘制，",
      "",
      "比如下面这张原图",
      "",
      "",
      "",
      "除了字体外，其他地方是透明的，将字体显示为蓝色：",
      "",
      "ImageIcon(",
      "  AssetImage('images/name1.png'),",
      "  size: 100,",
      "  color: Colors.blue,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "这里说下image参数，它接收的类型是ImageProvider，平时使用的Image.asset、Image.memory等不是此类型，需要使用AssetImage、MemoryImage等。"
    ]
  },
  "ft-RaisedButton": {
    "scope": "dart",
    "prefix": "ft-RaisedButton",
    "body": [
      "RaisedButton",
      "RaisedButton是一个material风格”凸起“的按钮，基本用法：",
      "",
      "RaisedButton(",
      "  child: Text('Button'),",
      "  onPressed: (){",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果：",
      "",
      "",
      "",
      "onPressed为null或不设置时，按钮是禁用状态。",
      "",
      "onHighlightChanged为高亮变化回调，按下时处于高亮状态，抬起处于不高亮状态，用法如下：",
      "",
      "RaisedButton(",
      "  onHighlightChanged: (high){",
      "  },",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "按钮可以设置字体及各种状态颜色，总结如下：",
      "",
      "属性	说明",
      "textColor	字体颜色",
      "disabledTextColor	禁用状态下字体颜色",
      "color	背景颜色",
      "disabledColor	禁用状态下背景颜色",
      "highlightColor	高亮颜色，按下时的颜色",
      "splashColor	水波纹颜色，按下松开会有水波纹效果",
      "以textColor为例，用法如下：",
      "",
      "RaisedButton(",
      "  textColor: Colors.red,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "也可以通过textTheme设置字体样式，用法如下：",
      "",
      "RaisedButton(",
      "  textTheme: ButtonTextTheme.primary,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "ButtonTextTheme的值介绍如下：",
      "",
      "normal：黑色或者白色字体，依赖于ThemeData.brightness",
      "accent：字体颜色依赖于ThemeData.accentColor",
      "primary ：字体颜色依赖于ThemeData.primaryColor",
      "这3个值在MaterialApp控件中进行全局设置，设置如下：",
      "",
      "MaterialApp(",
      "  title: 'Flutter Demo',",
      "  theme: ThemeData(",
      "    primaryColor: Color(0xFF42A5F5),",
      "    accentColor: Colors.yellow,",
      "    brightness: Brightness.light",
      "  ),",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "设置按钮阴影、高亮阴影、禁用阴影，用法如下：",
      "",
      "RaisedButton(",
      "  elevation: 5.0,",
      "  highlightElevation: 5.0,",
      "  disabledElevation: 5.0,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "shape设置按钮的形状，比如设置为圆形，代码如下：",
      "",
      "RaisedButton(",
      "  shape: CircleBorder(),",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "和hover相关的属性是指鼠标悬停时的状态，移动端没有效果，focus相关的属性为获取焦点时的状态。"
    ]
  },
  "ft-FlatButton": {
    "scope": "dart",
    "prefix": "ft-FlatButton",
    "body": [
      "FlatButton是一个扁平的按钮，用法和RaisedButton一样，代码如下：",
      "",
      "FlatButton(",
      "  child: Text('Button'),",
      "  color: Colors.blue,",
      "  onPressed: () {},",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-OutlineButton": {
    "scope": "dart",
    "prefix": "ft-OutlineButton",
    "body": [
      "OutlineButton 是一个带边框的按钮，用法和RaisedButton一样，代码如下：",
      "",
      "OutlineButton(",
      "  child: Text('Button'),",
      "  onPressed: () {},",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置其边框样式，代码如下：",
      "",
      "OutlineButton(",
      "  borderSide: BorderSide(color: Colors.blue,width: 2),",
      "  disabledBorderColor: Colors.black,",
      "  highlightedBorderColor: Colors.red,",
      "  child: Text('Button'),",
      "  onPressed: () {},",
      ")",
      " "
    ]
  },
  "ft-DropdownButton": {
    "scope": "dart",
    "prefix": "ft-DropdownButton",
    "body": [
      "DropdownButton为下拉选择按钮，基本用法如下：",
      "",
      "var _dropValue = '语文';",
      "",
      "_buildButton() {",
      "  return DropdownButton(",
      "    value: _dropValue,",
      "    items: [",
      "      DropdownMenuItem(child: Text('语文'),value: '语文',),",
      "      DropdownMenuItem(child: Text('数学'),value: '数学'),",
      "      DropdownMenuItem(child: Text('英语'),value: '英语'),",
      "    ],",
      "    onChanged: (value){",
      "      setState(() {",
      "        _dropValue = value;",
      "      });",
      "    },",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "items是点击时弹出选项，onChanged选项发生变化时回调。效果如下：",
      "",
      "",
      "",
      "如果你对选中的选项的样式不满意，可以自定义，用法如下：",
      "",
      "DropdownButton(",
      "  selectedItemBuilder: (context){",
      "    return [",
      "      Text('语文',style: TextStyle(color: Colors.red),),",
      "      Text('数学',style: TextStyle(color: Colors.red),),",
      "      Text('英语',style: TextStyle(color: Colors.red),)",
      "    ];",
      "  },",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "selectedItemBuilder返回的组件要和items中一一对应，选中样式如下：",
      "",
      "",
      "",
      "当用户未选中时，即value 为null，显示''请选中\"，用法如下：",
      "",
      "DropdownButton(",
      "  hint: Text('请选择'),",
      "  value: null,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "默认情况下，下拉选项的图标是倒立的三角，也可以进行自定义，用法如下：",
      "",
      "DropdownButton(",
      "  icon: Icon(Icons.add),",
      "  iconSize: 24,",
      "  iconDisabledColor: Colors.red,",
      "  iconEnabledColor: Colors.red,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-RawMaterialButton": {
    "scope": "dart",
    "prefix": "ft-RawMaterialButton",
    "body": [
      "RawMaterialButton是基于Semantics, Material和InkWell创建的组件，它不使用当前的系统主题和按钮主题，用于自定义按钮或者合并现有的样式，而RaisedButton和FlatButton都是基于RawMaterialButton配置了系统主题和按钮主题，相关属性可以参考RaisedButton，参数基本一样，基本用法如下：",
      "",
      "RawMaterialButton(",
      "  onPressed: (){},",
      "  fillColor: Colors.blue,",
      "  child: Text('Button'),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-PopupMenuButton": {
    "scope": "dart",
    "prefix": "ft-PopupMenuButton",
    "body": [
      "PopupMenuButton",
      "PopupMenuButton是一个菜单选中控件，用法如下：",
      "",
      "PopupMenuButton<String>(",
      "  itemBuilder: (context) {",
      "    return <PopupMenuEntry<String>>[",
      "      PopupMenuItem<String>(",
      "        value: '语文',",
      "        child: Text('语文'),",
      "      ),",
      "      PopupMenuItem<String>(",
      "        value: '数学',",
      "        child: Text('数学'),",
      "      ),",
      "      PopupMenuItem<String>(",
      "        value: '英语',",
      "        child: Text('英语'),",
      "      ),",
      "      PopupMenuItem<String>(",
      "        value: '生物',",
      "        child: Text('生物'),",
      "      ),",
      "      PopupMenuItem<String>(",
      "        value: '化学',",
      "        child: Text('化学'),",
      "      ),",
      "    ];",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置其初始值：",
      "",
      "PopupMenuButton<String>(",
      "  initialValue: '语文',",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "设置初始值后，打开菜单后，设置的值将会高亮，效果如下：",
      "",
      "",
      "",
      "获取用户选择了某一项的值，或者用户未选中，代码如下：",
      "",
      "PopupMenuButton<String>(",
      "  onSelected: (value){",
      "    print('$value');",
      "  },",
      "  onCanceled: (){",
      "    print('onCanceled');",
      "  },",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "tooltip是长按时弹出的提示，用法如下：",
      "",
      "PopupMenuButton<String>(",
      "  tooltip: 'PopupMenuButton',",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置其阴影值、内边距和弹出菜单的背景颜色：",
      "",
      "PopupMenuButton<String>(",
      "  elevation: 5,",
      "  padding: EdgeInsets.all(5),",
      "  color: Colors.red,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "默认情况下，PopupMenuButton显示3个小圆点，我们也可以对齐进行设置，设置文字如下：",
      "",
      "PopupMenuButton<String>(",
      "  child: Text('学科'),",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "child组件将会被InkWell包裹，点击弹出菜单，效果如下：",
      "",
      "",
      "",
      "也可以设置其他图标：",
      "",
      "PopupMenuButton<String>(",
      " icon: Icon(Icons.add),",

      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置弹出菜单边框：",
      "",
      "PopupMenuButton<String>(",
      "  shape: RoundedRectangleBorder(",
      "    side: BorderSide(",
      "      color: Colors.red",
      "    ),",
      "    borderRadius: BorderRadius.circular(10)",
      "  ),",

      ")"
    ]
  },
  "ft-IconButton": {
    "scope": "dart",
    "prefix": "ft-IconButton",
    "body": [
      "IconButton是一个图标按钮，用法如下：",
      "",
      "IconButton(",
      "  icon: Icon(Icons.person),",
      "  iconSize: 30,",
      "  color: Colors.red,",
      "  onPressed: () {},",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "设置提示属性：",
      "",
      "IconButton(",
      "  tooltip: '这是一个图标按钮',",
      "  icon: Icon(Icons.person),",
      "  iconSize: 30,",
      "  color: Colors.red,",
      "  onPressed: () {},",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "当长按时显示提示，效果如下："
    ]
  },
  "ft-BackButton": {
    "scope": "dart",
    "prefix": "ft-BackButton",
    "body": [
      "BackButton是一个material风格的返回按钮，本身是一个IconButton，点击时默认执行Navigator.maybePop即如果路由栈有上一页则返回到上一页。",
      "",
      "BackButton()",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "Android和IOS平台显示的图标是不一样的，ios效果如下："
    ]
  },
  "ft-CloseButton": {
    "scope": "dart",
    "prefix": "ft-CloseButton",
    "body": [
      "CloseButton是一个material风格的关闭按钮，本身是一个IconButton，点击时默认执行Navigator.maybePop即如果路由栈有上一页则返回到上一页。",
      "",
      "和BackButton适用场景不同，BackButton适用于全屏的页面，而CloseButton适用于弹出的Dialog。",
      "",
      "用法如下：",
      "",
      "CloseButton()",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下"
    ]
  },
  "ft-ButtonBar": {
    "scope": "dart",
    "prefix": "ft-ButtonBar",
    "body": [
      "ButtonBar并不是一个单独的按钮控件，而是末端对齐的容器类控件，当在水平方向上没有足够空间时候，按钮将整体垂直排列，而不是换行。基本用法如下：",
      "",
      "ButtonBar(",
      "  children: <Widget>[",
      "    RaisedButton(),",
      "    RaisedButton(),",
      "    RaisedButton(),",
      "    RaisedButton(),",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置主轴的对齐方式及主轴的尺寸：",
      "",
      "ButtonBar(",
      "  alignment: MainAxisAlignment.center,",
      "  mainAxisSize: MainAxisSize.max,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-CupertinoButton": {
    "scope": "dart",
    "prefix": "ft-CupertinoButton",
    "body": [
      "CupertinoButton ios风格的按钮，基本用法如下：",
      "",
      "CupertinoButton(",
      "  child: Text('ios 风格按钮'),",
      "  onPressed: (){},",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置背景色及按下时透明度：",
      "",
      "CupertinoButton(",
      "  child: Text('ios 风格按钮'),",
      "  onPressed: (){},",
      "  color: Colors.blue,",
      "  pressedOpacity: .5,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置圆角半径：",
      "",
      "CupertinoButton(",
      "  borderRadius: BorderRadius.circular(40),",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-BackButtonIcon": {
    "scope": "dart",
    "prefix": "ft-BackButtonIcon",
    "body": [
      "看名字你以为这是一个Button，其实是一个Icon，没有点击效果，具有点击效果的组件是BackButton",
      "",
      "用法如下：",
      "",
      "BackButtonIcon()",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "此在不同平台上显示的效果不同，iOS效果如下：",
      "",
      "",
      "",
      "android和fuchsia效果如下：",
      "",
      "",
      "",
      "源代码实现也比较简单，如下：",
      "",
      "/// Returns the appropriate \"back\" icon for the given `platform`.",
      "static IconData _getIconData(TargetPlatform platform) {",
      "  switch (platform) {",
      "    case TargetPlatform.android:",
      "    case TargetPlatform.fuchsia:",
      "      return Icons.arrow_back;",
      "    case TargetPlatform.iOS:",
      "      return Icons.arrow_back_ios;",
      "  }",
      "  assert(false);",
      "  return null;",
      "}",
      "",
      "@override",
      "Widget build(BuildContext context) => Icon(_getIconData(Theme.of(context).platform));",
      " "
    ]
  },
  "ft-BackdropFilter": {
    "scope": "dart",
    "prefix": "ft-BackdropFilter",
    "body": [
      "BackdropFilter",
      "使用BackdropFilter和ImageFilter可以将图片模糊处理。",
      "",
      "基本用法如下：",
      "",
      "Stack(",
      "  alignment: Alignment.center,",
      "  children: <Widget>[",
      "    Container(",
      "      width: 300,",
      "      height: 400,",
      "      child: Image.asset('images/1.png'),",
      "    ),",
      "    BackdropFilter(",
      "      filter: ImageFilter.blur(sigmaX: 5.0,sigmaY: 5.0),",
      "      child: Center(",
      "        child: Container(",
      "          color: Colors.red.withOpacity(0),",
      "        ),",
      "      ),",
      "    )",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下： ",
      "",
      "BackdropFilter不仅可以模糊图片，还可以模糊任何组件，BackdropFilter只处理它下面的控件，child参数的组件不模糊处理，如果想在模糊图片的显示文字，只需修改如下：",
      "",
      "BackdropFilter(",
      "  filter: ImageFilter.blur(sigmaX: 5.0,sigmaY: 5.0),",
      "  child: Center(",
      "    child: Container(",
      "      color: Colors.red.withOpacity(0),",
      "      child: Text('老孟，一枚有态度的程序员',style: TextStyle(color: Colors.blue),),",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下"
    ]
  },
  "ft-Banner": {
    "scope": "dart",
    "prefix": "ft-Banner",
    "body": [
      "在父组件的角上显示一个对角线的消息的控件，比如debug模式下，显示在App右上角的DEBUG就是此组件实现的。",
      "",
      "用法如下：",
      "",
      "Banner(",
      "  message: '老孟',",
      "  location: BannerLocation.topStart,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "默认情况下Banner超出了父控件的范围，可以使用ClipRect截取超出的部分。",
      "",
      "设置背景颜色、消息样式及位置：",
      "",
      "Banner(",
      "  message: '老孟',",
      "  location: BannerLocation.topEnd,",
      "  color: Colors.blue,",
      "  textStyle: TextStyle(color: Colors.red),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置child参数，child显示在消息后面：",
      "",
      "Banner(",
      "  message: '老孟',",
      "  child: Container(color: Colors.yellow,),",
      "  location: BannerLocation.topEnd,",
      ")",
      " "
    ]
  },
  "ft-CheckedModeBanner": {
    "scope": "dart",
    "prefix": "ft-CheckedModeBanner",
    "body": [
      "封装了Banner，MaterialApp使用此控件在右上角显示DEBUG标签，源代码如下：",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  Widget result = child;",
      "  assert(() {",
      "    result = Banner(",
      "      child: result,",
      "      message: 'DEBUG',",
      "      textDirection: TextDirection.ltr,",
      "      location: BannerLocation.topEnd,",
      "    );",
      "    return true;",
      "  }());",
      "  return result;",
      "}",
      " "
    ]
  },
  "ft-Baseline": {
    "scope": "dart",
    "prefix": "ft-Baseline",
    "body": [
      "Baseline",
      "基准线布局，是指将所有的元素都统一的放在一条水平线上，是根据child的baseline，来调整child的位置，即在不同的child都处在规定的基准线位置，多用文字排版中的时候，就算是不同大小的文字处于同一水平线上，基本用法：",
      "",
      "Baseline({",
      "    Key key,",
      "    @required this.baseline,",
      "    @required this.baselineType,",
      "    Widget child",
      "})",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "baseline1",
      "",
      "属性说明:",
      "",
      "baseline 基准线位置，是以像素为基本的单位，从顶部算.",
      "baselineType bseline类型，定位child的基准线类型，分为两种：",
      "​ baselineType.alphabetic 对齐字符底部的水平线.",
      "",
      "​ baselineType.ideographic 表意字符的水平线.",
      "",
      "baseline2",
      "",
      "案例",
      "",
      "Row(",
      "  mainAxisAlignment: MainAxisAlignment.spaceBetween,",
      "  children: <Widget>[",
      "    Baseline(",
      "      baseline: 50.0,",
      "      baselineType: TextBaseline.alphabetic,",
      "      child: Text(",
      "        'TjTjTj',",
      "        style: new TextStyle(",
      "          fontSize: 20.0,",
      "          textBaseline: TextBaseline.alphabetic,",
      "        ),",
      "      ),",
      "    ),",
      "    Baseline(",
      "      baseline: 50.0,",
      "      baselineType: TextBaseline.alphabetic,",
      "      child: Container(",
      "        width: 30.0,",
      "        height: 30.0,",
      "        color: Colors.red,",
      "      ),",
      "    ),",
      "    Baseline(",
      "      baseline: 50.0,",
      "      baselineType: TextBaseline.alphabetic,",
      "      child: Text(",
      "        'RyRyRy',",
      "        style: TextStyle(",
      "          fontSize: 35.0,",
      "          textBaseline: TextBaseline.alphabetic,",
      "        ),",
      "      ),",
      "    ),",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "上述运行结果是左右两个文本跟中间的Container底部在一个水平线上，这也印证了Baseline的布局行为。",
      "",
      "效果:",
      "",
      "baseline3",
      "",
      "本文由Rock提供。"
    ]
  },
  "ft-BeveledRectangleBorder": {
    "scope": "dart",
    "prefix": "ft-BeveledRectangleBorder",
    "body": [
      "ShapeBorder",
      "Flutter中很多组件都有一个叫做shape的属性，类型是ShapeBorder，比如Button类、Card等组件，shape表示控件的形状，系统已经为我们提供了很多形状。",
      "",
      "#BeveledRectangleBorder",
      "斜角矩形边框，用法如下：",
      "",
      "RaisedButton(",
      "  shape: BeveledRectangleBorder(",
      "      side: BorderSide(width: 1, color: Colors.red),",
      "      borderRadius: BorderRadius.circular(10)),",
      "  child: Text('老孟'),",
      "  onPressed: () {},",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "image-20200522172909192",
      "",
      "如果设置的半径比控件还大，就会变成菱形：",
      "",
      " 3RaisedButton(",
      "  shape: BeveledRectangleBorder(",
      "      side: BorderSide(width: 1, color: Colors.red),",
      "      borderRadius: BorderRadius.circular(100)),",
      "  child: Text('老孟'),",
      "  onPressed: () {},",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "image-20200522173147073",
      "",
      "同理，如果半径设置为0，就是矩形。",
      "",
      "RaisedButton(",
      "  shape: BeveledRectangleBorder(",
      "      side: BorderSide(width: 1, color: Colors.red),",
      "      borderRadius: BorderRadius.circular(0)),",
      "  child: Text('老孟'),",
      "  onPressed: () {},",
      ")",
      " "
    ]
  },
  "ft-Border": {
    "scope": "dart",
    "prefix": "ft-Border",
    "body": [
      "Border允许单独设置每一个边上的线条样式.",
      "",
      "RaisedButton(",
      "  shape: Border(",
      "    top: BorderSide(color: Colors.red,width: 2)",
      "  ),",
      "  child: Text('老孟'),",
      "  onPressed: () {},",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "image-20200522173801387",
      "",
      "设置全部",
      "",
      "RaisedButton(",
      "        shape: Border(",
      "          top: BorderSide(color: Colors.red,width: 10),",
      "          right: BorderSide(color: Colors.blue,width: 10),",
      "          bottom: BorderSide(color: Colors.yellow,width: 10),",
      "          left: BorderSide(color: Colors.green,width: 10),",
      "        ),",
      "        child: Text('老孟'),",
      "        onPressed: () {},",
      "      )",
      " "
    ]
  },
  "ft-BorderDirectional": {
    "scope": "dart",
    "prefix": "ft-BorderDirectional",
    "body": [
      "BorderDirectional和Border基本一样，区别就是BorderDirectional带有阅读方向，大部分国家阅读是从左到右，但有的国家是从右到左的，比如阿拉伯等。",
      "",
      "RaisedButton(",
      "  shape: BorderDirectional(",
      "    start: BorderSide(color: Colors.red,width: 2),",
      "    end: BorderSide(color: Colors.blue,width: 2),",
      "  ),",
      "  child: Text('老孟'),",
      "  onPressed: () {},",
      ")",
      " "
    ]
  },
  "ft-CircleBorder": {
    "scope": "dart",
    "prefix": "ft-CircleBorder",
    "body": [
      "圆形",
      "",
      "RaisedButton(",
      "  shape: CircleBorder(side: BorderSide(color: Colors.red)),",
      "  child: Text('老孟'),",
      "  onPressed: () {},",
      ")",
      " "
    ]
  },
  "ft-ContinuousRectangleBorder": {
    "scope": "dart",
    "prefix": "ft-ContinuousRectangleBorder",
    "body": [
      "连续的圆角矩形，直线和圆角平滑连续的过渡，和RoundedRectangleBorder相比，圆角效果会小一些。",
      "",
      "RaisedButton(",
      "  shape: ContinuousRectangleBorder(",
      "      side: BorderSide(color: Colors.red),",
      "      borderRadius: BorderRadius.circular(20)),",
      "  child: Text('老孟'),",
      "  onPressed: () {},",
      ")",
      " "
    ]
  },
  "ft-RoundedRectangleBorder": {
    "scope": "dart",
    "prefix": "ft-RoundedRectangleBorder",
    "body": [
      "RoundedRectangleBorder",
      "圆角矩形",
      "",
      "RaisedButton(",
      "  shape: RoundedRectangleBorder(",
      "      side: BorderSide(color: Colors.red),",
      "      borderRadius: BorderRadius.circular(10)),",
      "  child: Text('老孟'),",
      "  onPressed: () {},",
      ")"
    ]
  },
  "ft-StadiumBorder": {
    "scope": "dart",
    "prefix": "ft-StadiumBorder",
    "body": [
      "类似足球场的形状，两边圆形，中间矩形",
      "",
      "RaisedButton(",
      "  shape: StadiumBorder(",
      "      side: BorderSide(color: Colors.red),),",
      "  child: Text('老孟'),",
      "  onPressed: () {},",
      ")",
      " "
    ]
  },
  "ft-OutlineInputBorder": {
    "scope": "dart",
    "prefix": "ft-OutlineInputBorder",
    "body": [
      "带外边框",
      "",
      "RaisedButton(",
      "  shape: OutlineInputBorder(",
      "    borderSide: BorderSide(color: Colors.red),",
      "    borderRadius: BorderRadius.circular(10),",
      "  ),",
      "  child: Text('老孟'),",
      "  onPressed: () {},",
      ")"
    ]
  },
  "ft-UnderlineInputBorder": {
    "scope": "dart",
    "prefix": "ft-UnderlineInputBorder",
    "body": [
      "下划线边框",
      "",
      "RaisedButton(",
      "  shape: UnderlineInputBorder(",
      "    borderSide: BorderSide(color: Colors.red),",
      "  ),",
      "  child: Text('老孟'),",
      "  onPressed: () {},",
      ")"
    ]
  },
  "ft-BottomAppBar": {
    "scope": "dart",
    "prefix": "ft-BottomAppBar",
    "body": [
      "BottomAppBar",
      "BottomAppBar通常用于Scaffold.bottomNavigationBar，并且可以在其顶部留出一个缺口给floatingActionButton使用。",
      "",
      "用法如下：",
      "",
      "Scaffold(",
      "        bottomNavigationBar: BottomAppBar(",
      "          child: Row(",
      "            mainAxisAlignment: MainAxisAlignment.spaceAround,",
      "            children: <Widget>[",
      "              IconButton(",
      "                icon: Icon(Icons.home),",
      "              ),",
      "              IconButton(",
      "                icon: Icon(Icons.people),",
      "              )",
      "            ],",
      "          ),",
      "        ),",
      "        floatingActionButton: FloatingActionButton(),",
      "        floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,",
      "  )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "FloatingActionButton是悬浮在BottomAppBar上面，并没有嵌入里面，嵌入里面用法如下：",
      "",
      "BottomAppBar(",
      "  shape: CircularNotchedRectangle(),",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "增加BottomAppBar的形状，效果如下：",
      "",
      "",
      "",
      "elevation参数为阴影值：",
      "",
      "BottomAppBar(",
      "  elevation: 8.0,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "notchMargin参数表示缺口外边距：",
      "",
      "BottomAppBar(",
      "  notchMargin: 10,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "改变FloatingActionButton的形状为足球场形状，切嵌入的形状随之变化，代码如下：",
      "",
      "Scaffold(",
      "        bottomNavigationBar: BottomAppBar(",
      "          shape: AutomaticNotchedShape(",
      "              RoundedRectangleBorder(), StadiumBorder(side: BorderSide())),",
      "          child: Row(",
      "            mainAxisAlignment: MainAxisAlignment.spaceAround,",
      "            children: <Widget>[",
      "              IconButton(",
      "                icon: Icon(Icons.home),",
      "              ),",
      "              IconButton(",
      "                icon: Icon(Icons.people),",
      "              )",
      "            ],",
      "          ),",
      "        ),",
      "        floatingActionButton: FloatingActionButton.extended(",
      "          onPressed: () {},",
      "          icon: new Icon(Icons.add),",
      "          label: const Text(\"label\"),",
      "        ),",
      "        floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,",
      "      )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "改为多边形：",
      "",
      "Scaffold(",
      "        bottomNavigationBar: BottomAppBar(",
      "          shape: AutomaticNotchedShape(",
      "              RoundedRectangleBorder(), BeveledRectangleBorder(borderRadius: BorderRadius.circular(10))),",
      "          child: Row(",
      "            mainAxisAlignment: MainAxisAlignment.spaceAround,",
      "            children: <Widget>[",
      "              IconButton(",
      "                icon: Icon(Icons.home),",
      "              ),",
      "              IconButton(",
      "                icon: Icon(Icons.people),",
      "              )",
      "            ],",
      "          ),",
      "        ),",
      "        floatingActionButton: FloatingActionButton.extended(",
      "          onPressed: () {},",
      "          shape: BeveledRectangleBorder(borderRadius: BorderRadius.circular(10)),",
      "          icon: new Icon(Icons.add),",
      "          label: const Text(\"label\"),",
      "        ),",
      "        floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,",
      "      )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "当然也可以改为棱形：",
      "",
      "Scaffold(",
      "        bottomNavigationBar: BottomAppBar(",
      "          shape: AutomaticNotchedShape(",
      "              RoundedRectangleBorder(), BeveledRectangleBorder(borderRadius: BorderRadius.circular(100))),",
      "          ...",
      "        floatingActionButton: FloatingActionButton.extended(",
      "          onPressed: () {},",
      "          shape: BeveledRectangleBorder(borderRadius: BorderRadius.circular(100)),",
      "          icon: new Icon(Icons.add),",
      "          label: const Text(\"label\"),",
      "        ),",
      "        ...",
      "      )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "我们可以通过此控件定义任何我们想要的效果。"
    ]
  },
  "ft-BottomNavigationBar": {
    "scope": "dart",
    "prefix": "ft-BottomNavigationBar",
    "body": [
      "BottomNavigationBar",
      "BottomNavigationBar 和 BottomNavigationBarItem配合Scaffold控件使用可以实现底部导航效果，类似于微信底部的导航效果，下面是一个简单的底部导航案例：",
      "",
      "Scaffold(",
      "      bottomNavigationBar: BottomNavigationBar(",
      "        items: <BottomNavigationBarItem>[",
      "          BottomNavigationBarItem(title: Text('首页'),icon: Icon(Icons.home)),",
      "          BottomNavigationBarItem(title: Text('书籍'),icon: Icon(Icons.book)),",
      "          BottomNavigationBarItem(title: Text('我的'),icon: Icon(Icons.perm_identity)),",
      "        ],",
      "      ),",
      "    );",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果：",
      "",
      "",
      "",
      "点击其他2个item时没有反应，添加切换效果：",
      "",
      "int _currentIndex = 0;",
      "BottomNavigationBar(",
      "	onTap: (int index) {",
      "    	setState(() {",
      "        	_currentIndex = index;",
      "        });",
      "    },",
      "    currentIndex: _currentIndex,",
      "	...",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "currentIndex代表当前显示导航的索引，当前切换时调用onTap，在onTap回调中调用setState方法改变_currentIndex的值达到切换的效果。",
      "",
      "效果如下：",
      "",
      "",
      "",
      "BottomNavigationBar有2种显示模式，其中一种是fixed效果，前面的展示就是fixed效果，这也是默认值，另一种是shifting效果，",
      "",
      "BottomNavigationBar(",
      "	type:BottomNavigationBarType.shifting,",
      "    selectedItemColor: Theme.of(context).primaryColor,",
      "    unselectedItemColor: Colors.black,",
      "	...",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "设置shifting时需要设置selectedItemColor和 unselectedItemColor，效果如下：",
      "",
      "",
      "",
      "我们还可以设置其背景颜色（backgroundColor）、图标大小（iconSize）、选中和未选中图标、字体的颜色，大小等。",
      "",
      "#BottomNavigationBarItem",
      "如果导航的图标是自己设计的图标，这时仅仅通过BottomNavigationBar是无法实现我们想要的效果的，比如微信的导航的效果，虽然选中和未选中也是颜色的区别，但图标不是Icons自带的图标，想要实现切换2个图标需要BottomNavigationBarItem控件的支持，其中的icon和activeIcon分别代表未选中和选中。",
      "",
      "通过切换导航而改变页面是App中最常用的方式，开始构建页面的切换：",
      "",
      "int _currentIndex = 0;",
      "",
      "Widget _currBody = HomePage();",
      "",
      "_onTap(int index) {",
      "    switch (index) {",
      "      case 0:",
      "        _currBody = HomePage();;",
      "        break;",
      "      case 1:",
      "        _currBody = BookPage();",
      "        break;",
      "      case 2:",
      "        _currBody = MyPage();",
      "        break;",
      "    }",
      "    setState(() {",
      "      _currentIndex = index;",
      "    });",
      "  }",
      "",
      "Scaffold(",
      "      body: _currBody,",
      "      bottomNavigationBar: BottomNavigationBar(",
      "        onTap: _onTap,",
      "        type: BottomNavigationBarType.shifting,",
      "        selectedItemColor: Theme.of(context).primaryColor,",
      "        unselectedItemColor: Colors.black,",
      "        currentIndex: _currentIndex,",
      "        items: <BottomNavigationBarItem>[",
      "          BottomNavigationBarItem(title: Text('首页'), icon: Icon(Icons.home)),",
      "          BottomNavigationBarItem(title: Text('书籍'), icon: Icon(Icons.book)),",
      "          BottomNavigationBarItem(",
      "              title: Text('我的'), icon: Icon(Icons.perm_identity)),",
      "        ],",
      "      ),",
      "    );",
      "",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "Scaffold控件的body表示导航上面，AppBar下面的页面，HomePage,BookPage,MyPage对应3个导航的页面，背景分别是红、蓝、黄色，效果如下："
    ]
  },
  "ft-ScrollPhysics": {
    "scope": "dart",
    "prefix": "ft-ScrollPhysics",
    "body": [
      "ScrollPhysics",
      "ScrollPhysics并不是一个组件，它定义了可滚动组件的物理滚动特性。例如，当用户达到最大滚动范围时，是停止滚动，还是继续滚动。",
      "",
      "滚动组件（CustomScrollView、ScrollView、GridView、ListView等）的physics参数表示此属性，",
      "",
      "系统提供的ScrollPhysics有：",
      "",
      "#AlwaysScrollableScrollPhysics",
      "总是可以滑动，用法如下：",
      "",
      "CustomScrollView(",
      "  physics: AlwaysScrollableScrollPhysics()",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#NeverScrollableScrollPhysics",
      "禁止滚动，用法如下：",
      "",
      "CustomScrollView(",
      "  physics: NeverScrollableScrollPhysics()",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#BouncingScrollPhysics",
      "内容超过一屏 上拉有回弹效果，用法如下：",
      "",
      "CustomScrollView(",
      "  physics: BouncingScrollPhysics()",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#ClampingScrollPhysics",
      "包裹内容 不会有回弹，用法如下：",
      "",
      "CustomScrollView(",
      "  physics: ClampingScrollPhysics()",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#FixedExtentScrollPhysics",
      "滚动条直接落在某一项上，而不是任何位置，类似于老虎机，只能在确定的内容上停止，而不能停在2个内容的中间，用于可滚动组件的FixedExtentScrollController。",
      "",
      "#PageScrollPhysics",
      "用于PageView的滚动特性，停留在页面的边界",
      "",
      "喜欢"
    ]
  },
  "ft-Builder": {
    "scope": "dart",
    "prefix": "ft-Builder",
    "body": [
      "官方介绍A platonic widget that calls a closure to obtain its child widget，直接翻译是：",
      "",
      "调用闭包以获取其子小部件的小部件",
      "",
      "嗯...，反正只看介绍和翻译看不懂，下面来说下Builder能干什么吧。",
      "",
      "基础用法：",
      "",
      "Builder(",
      "  builder: (BuildContext context){",
      "    return Container();",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "Builder中有一个builder，返回一个Widget即可，那和直接使用Container有什么区别吗？",
      "",
      "答案肯定是有的，用处主要体现在context上。",
      "",
      "#使用场景一",
      "看下这个异常信息：Scaffold.of() called with a context that does not contain a Scaffold，这个异常学习Flutter的过程中会经常遇到，原因就是当前的context没有包含在Scaffold控件中，比如下面的写法就会出现此异常：",
      "",
      "class HomePage extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: Text('老孟'),",
      "      ),",
      "      body: Center(",
      "        child: RaisedButton(",
      "          color: Colors.pink,",
      "          textColor: Colors.white,",
      "          onPressed: _displaySnackBar(context),",
      "          child: Text('show SnackBar'),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "_displaySnackBar(BuildContext context) {",
      "  final snackBar = SnackBar(content: Text('老孟'));",
      "  Scaffold.of(context).showSnackBar(snackBar);",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "使用Build解决此问题：",
      "",
      "Scaffold(",
      "    appBar: AppBar(",
      "        title: Text('老孟'),",
      "    ),",
      "    body: Builder(",
      "        builder: (context) => ",
      "            Center(",
      "            child: RaisedButton(",
      "            color: Colors.pink,",
      "            textColor: Colors.white,",
      "            onPressed: () => _displaySnackBar(context),",
      "            child: Text('老孟'),",
      "            ),",
      "        ),",
      "    ),",
      ");",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#使用场景二",
      "自定义事件分发，代码如下：",
      "",
      "NotificationListener<CustomNotification>(",
      "  onNotification: (CustomNotification notification) {",
      "    print('介绍事件——2：${notification.value}');",
      "    return false;",
      "  },",
      "  child: Center(",
      "    child: RaisedButton(",
      "      child: Text('发送'),",
      "      onPressed: () {",
      "        CustomNotification('自定义事件').dispatch(context);",
      "      },",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "此时点击按钮并不会分发事件，修改如下：",
      "",
      "NotificationListener<CustomNotification>(",
      "  onNotification: (CustomNotification notification) {",
      "    print('介绍事件——2：${notification.value}');",
      "    return false;",
      "  },",
      "  child: Center(",
      "    child: Builder(",
      "      builder: (context) {",
      "        return RaisedButton(",
      "          child: Text('发送'),",
      "          onPressed: () {",
      "            CustomNotification('自定义事件').dispatch(context);",
      "          },",
      "        );",
      "      },",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "只需在RaisedButton外面包裹Builder即可，为什么会出现此问题？",
      "",
      "因为没有Builder的context表示当前整个控件的context，其上并没有NotificationListener监听，而加上Builder后，context表示Builder控件，其上有NotificationListener监听"
    ]
  },
  "ft-ButtonBarTheme": {
    "scope": "dart",
    "prefix": "ft-ButtonBarTheme",
    "body": [
      "继承关系 Object> DiagnosticableTree> Widget> ProxyWidget> InheritedWidget> ButtonBarTheme",
      "",
      "#构造函数",
      "const ButtonBarTheme({",
      "  Key key,",
      "  @required this.data,",
      "  Widget child,",
      "}) : assert(data != null), super(key: key, child: child);",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "key 组件的唯一标示。",
      "data 主题的数据来源ButtonBarThemeData，详细的配置信息。",
      "child 通常ButtonBar组件，默认继承ButtonBarThemeData的配置，设置局部主题时使用。",
      "ButtonBarTheme通常用于ButtonBar的主题使用，它有一套默认主题，在你没有做变更的前提下，作为ThemeData构造函数的参数，你可以轻松做到全局改主题样式。",
      "",
      "配置全局样式在中设置：",
      "",
      "MaterialApp(",
      "  theme: ThemeData(",
      "      buttonBarTheme:",
      "          ButtonBarThemeData(buttonTextTheme: ButtonTextTheme.normal)),",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "使用ButtonBar时采用此主题：",
      "",
      "ButtonBar(",
      "  children: <Widget>[",
      "    RaisedButton(child: Text('老孟'),onPressed: (){",
      "",
      "    },),",
      "    FlatButton(child: Text('专注flutter分享'),onPressed: (){",
      "",
      "    },)",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "",
      "",
      "局部用法，主题和全局主题不一致，用法如下：",
      "",
      "ButtonBarTheme(",
      "  data: ButtonBarThemeData(buttonTextTheme: ButtonTextTheme.accent),",
      "  child: ButtonBar(",
      "    children: <Widget>[",
      "      FlatButton(",
      "        onPressed: () {},",
      "        child: Text(\"局部用法测试\"),",
      "      )",
      "    ],",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "",
      "",
      "#ButtonBarThemeData",
      "ButtonBarThemeData 是ButtonBarTheme样式属性，属性如下：",
      "",
      "const ButtonBarThemeData({",
      "  this.alignment,//主轴对其方式，具体可查看MainAxisAlignment",
      "  this.mainAxisSize,//主轴方向尺寸，min：尽可能小，max：尽可能大",
      "  this.buttonTextTheme,//按钮文本样式",
      "  this.buttonMinWidth,//按钮最小宽度",
      "  this.buttonHeight,//按钮高度",
      "  this.buttonPadding,//按钮内边距",
      "  this.buttonAlignedDropdown,//当DropdownButton内包含ButtonBar时，true表示DropdownButton宽度和ButtonBar匹配",
      "  this.layoutBehavior,//按钮高度，constrained：最小高度52，padded：根据按钮主题计算",
      "  this.overflowDirection, //按钮一行放不开时，垂直方向布局方式，up：开始位置对其， down：结束位置对其",
      "})",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "用法如下：",
      "",
      "ButtonBarTheme(",
      "  data: ButtonBarThemeData(",
      "      alignment: MainAxisAlignment.spaceBetween,",
      "      mainAxisSize: MainAxisSize.max),",
      "  child: ButtonBar(",
      "    children: <Widget>[",
      "      RaisedButton(",
      "        onPressed: () {},",
      "        child: Text(\"老孟\"),",
      "      ),",
      "      RaisedButton(",
      "        onPressed: () {},",
      "        child: Text(\"老孟1\"),",
      "      ),",
      "      RaisedButton(",
      "        onPressed: () {},",
      "        child: Text(\"老孟2\"),",
      "      ),",
      "    ],",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "",
      "",
      "#总结",
      "ButtonBarTheme 是一个InheritedWidget组件，它可以高效的将数据在Widget树中向下传递、共享，所有才有了全局主题和局部主题的用法。",
      "",
      "本文由i校长提供。"
    ]
  },
  "ft-ButtonTheme": {
    "scope": "dart",
    "prefix": "ft-ButtonTheme",
    "body": [
      "用于控制Button类控件的样式。",
      "",
      "textTheme表示按钮文本的样式：",
      "",
      "ButtonTextTheme.normal：按钮文本的颜色是黑色或者白色，依赖于ThemeData.brightness",
      "ButtonTextTheme.accent：按钮文本的颜色是ThemeData.accentColor",
      "ButtonTextTheme.primary：按钮文本的颜色是ThemeData.primaryColor",
      "ButtonTheme(",
      "  textTheme: ButtonTextTheme.primary,",
      "  child: RaisedButton(",
      "    child: Text('老孟'),",
      "    onPressed: () {},",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "image-20200528182541894",
      "",
      "layoutBehavior：控制控件尺寸",
      "",
      "constrained：高最小52",
      "padded：根据样式样式计算内边距",
      "minWidth：最小宽度",
      "",
      "height：高度",
      "",
      "padding：内边距",
      "",
      "shape：形状，所有形状查看ShapeBorder",
      "",
      "buttonColor：按钮颜色",
      "",
      "disabledColor：禁用状态下颜色",
      "",
      "focusColor：获取焦点颜色",
      "",
      "hoverColor：鼠标悬浮其上时的颜色",
      "",
      "highlightColor：高亮颜色",
      "",
      "splashColor：水波纹颜色",
      "",
      "materialTapTargetSize：配置组件点击区域大小，具体查看MaterialTapTargetSize"
    ]
  },
  "ft-Card": {
    "scope": "dart",
    "prefix": "ft-Card",
    "body": [
      "Card",
      "Card是material风格的卡片控件，Card有较小的圆角和阴影。Card通常用于展示一组信息，比如相册、位置信息等。",
      "",
      "基本用法如下：",
      "",
      "Card(",
      "  child: Column(",
      "    mainAxisSize: MainAxisSize.min,",
      "    children: <Widget>[",
      "      const ListTile(",
      "        leading: Icon(Icons.album),",
      "        title: Text('老孟'),",
      "        subtitle: Text('一枚有态度的程序员'),",
      "      ),",
      "      ButtonBar(",
      "        children: <Widget>[",
      "          FlatButton(",
      "            child: const Text('OK'),",
      "            onPressed: () {",
      "",
      "            },",
      "          ),",
      "          FlatButton(",
      "            child: const Text('非常对'),",
      "            onPressed: () {",
      "",
      "            },",
      "          ),",
      "        ],",
      "      ),",
      "    ],",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "子控件可以是任何Widget，效果如下：",
      "",
      "",
      "",
      "设置其背景颜色及阴影值：",
      "",
      "Card(",
      "  color: Colors.blue,",
      "  elevation: 10,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置控件的形状为圆角矩形：",
      "",
      "Card(",
      "  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-Align和Center": {
    "scope": "dart",
    "prefix": "ft-Align和Center",
    "body": [
      "Align和Center控件都是控制子控件位置的控件。",
      "",
      "#Align",
      "基本用法：",
      "",
      "Container(",
      "  color: Colors.lightBlue,",
      "  width: 200,",
      "  height: 200,",
      "  child: Align(",
      "    child: Text('老孟',style: TextStyle(color: Colors.white,fontSize: 20),),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "Align默认居中对齐，效果如下；",
      "",
      "",
      "",
      "当然还可以设置其他对齐方法，比如bottomRight(右下角)等，用法如下：",
      "",
      "Align(",
      "  alignment: Alignment.bottomRight,",
      "  child: Text('老孟',style: TextStyle(color: Colors.white,fontSize: 20),),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "如果系统提供的位置都不是想要的，可以使用如下方式：",
      "",
      "Align(",
      "  alignment: Alignment(0.2,0.5),",
      "  child: Text('老孟',style: TextStyle(color: Colors.white,fontSize: 20),),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "Alignment参数x,y坐标系统如下，注意这个坐标系统和常见的不太一样：",
      "",
      "·",
      "",
      "widthFactor和heightFactor参数不为null且父组件没有限制大小，此时Align的宽度等于子控件的宽度乘以对应的factor，用法如下：",
      "",
      "Container(",
      "  color: Colors.lightBlue,",
      "  child: Align(",
      "    widthFactor: 3,",
      "    heightFactor: 4,",
      "    child: Container(",
      "      height: 50,",
      "      width: 50,",
      "      color: Colors.red,",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "#Center",
      "Center控件继承自Align，通过名字我们也知道Center是让子控件居中，用法如下：",
      "",
      "Center(",
      "  child: Text('老孟'),",
      ")",
      " ",
      " "
    ]
  },
  "ft-Checkbox": {
    "scope": "dart",
    "prefix": "ft-Checkbox",
    "body": [
      "Checkbox是勾选框控件，本身不包含任何状态，改变状态需要通过改变value的值改变。基本用法如下：",
      "",
      "var _checkValue = false;",
      "_buildCheckbox(){",
      "  return Checkbox(",
      "    value: _checkValue,",
      "    onChanged: (value){",
      "      setState(() {",
      "        _checkValue = value;",
      "      });",
      "    },",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "value值为bool类型，true表示选择状态。",
      "",
      "onChanged为发生变化时回调，即点击控件时回调，方法内的参数为新的值。",
      "",
      "activeColor为激活状态下颜色，是矩形区域内的颜色，checkColor是选中后“对勾”的颜色，用法如下：",
      "",
      "Checkbox(",
      "  activeColor: Colors.red,",
      "  checkColor: Colors.blue,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-CheckboxListTile": {
    "scope": "dart",
    "prefix": "ft-CheckboxListTile",
    "body": [
      "通常情况下，我们不直接使用Checkbox，而是使用CheckboxListTile，因为我们需要Checkbox后面添加说明，用法如下：",
      "",
      "Container(",
      "  width: 120,",
      "  child: CheckboxListTile(",
      "    title: Text('老孟'),",
      "    value: _checkValue,",
      "    onChanged: (value){",
      "      setState(() {",
      "        _checkValue = value;",
      "      });",
      "    },",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "CheckboxListTile默认是充满父组件的，因此需要Container限制其宽度，效果如下：",
      "",
      "",
      "",
      "一般的习惯是将勾选框放在前面，用法如下：",
      "",
      "CheckboxListTile(",
      "  controlAffinity: ListTileControlAffinity.leading,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "ListTileControlAffinity取值范围说明如下：",
      "",
      "leading：勾选框在开头位置。",
      "trailing：勾选框在结尾位置，",
      "platform：根据平台确定",
      "还可以设置其子标题和第二图标，用法如下：",
      "",
      "CheckboxListTile(",
      "  subtitle: Text('一枚有态度的程序员'),",
      "  secondary: Icon(Icons.person),",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "secondary一般放置一个图标，位于勾选框的另一边。效果如下：",
      "",
      "",
      "",
      "selected参数设置true，secondary、title和subtitle都会被渲染为activeColor的颜色。"
    ]
  },
  "ft-showMenu": {
    "scope": "dart",
    "prefix": "ft-showMenu",
    "body": [
      "showMenu",
      "如果你看下PopupMenuButton的源码会发现，PopupMenuButton也是使用showMenu实现的，用法如下：",
      "",
      "showMenu(",
      "    context: context,",
      "    position: RelativeRect.fill,",
      "    items: <PopupMenuEntry>[",
      "      PopupMenuItem(child: Text('语文')),",
      "      PopupMenuDivider(),",
      "      CheckedPopupMenuItem(",
      "        child: Text('数学'),",
      "        checked: true,",
      "      ),",
      "      PopupMenuDivider(),",
      "      PopupMenuItem(child: Text('英语')),",
      "    ]);",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "position参数表示弹出的位置，效果如下：",
      "",
      "",
      "",
      "属性和PopupMenuButton基本一样，但使用showMenu需要我们指定位置，所以一般情况下，我们不会直接使用showMenu，而是使用PopupMenuButton，免去了计算位置的过程。",
      "",
      "看下PopupMenuButton是如何计算的，有助于帮助我们理解：",
      "",
      "final PopupMenuThemeData popupMenuTheme = PopupMenuTheme.of(context);",
      "    final RenderBox button = context.findRenderObject();",
      "    final RenderBox overlay = Overlay.of(context).context.findRenderObject();",
      "    final RelativeRect position = RelativeRect.fromRect(",
      "      Rect.fromPoints(",
      "        button.localToGlobal(widget.offset, ancestor: overlay),",
      "        button.localToGlobal(button.size.bottomRight(Offset.zero), ancestor: overlay),",
      "      ),",
      "      Offset.zero & overlay.size,",
      "    );",
      "    final List<PopupMenuEntry<T>> items = widget.itemBuilder(context);",
      " "
    ]
  },
  "ft-CircleAvatar": {
    "scope": "dart",
    "prefix": "ft-CircleAvatar",
    "body": [
      "CircleAvatar",
      "代表用户的圆圈的控件，通常与用户的个人资料图片一起使用，或者在没有此类图片的情况下与用户的姓名缩写一起使用。 为了保持一致，给定用户的姓名缩写应始终与相同的背景色配对。",
      "",
      "用法如下：",
      "",
      "CircleAvatar(",
      "  child: Text('孟'),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置背景颜色：",
      "",
      "CircleAvatar(",
      "  child: Text('孟'),",
      "  backgroundColor: Colors.blue,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置文字颜色：",
      "",
      "CircleAvatar(",
      "  child: Text('孟'),",
      "  foregroundColor: Colors.red,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置背景图片：",
      "",
      "CircleAvatar(",
      "  child: Text('孟'),",
      "  backgroundImage: AssetImage('images/1.png'),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置半径：",
      "",
      "CircleAvatar(",
      "  child: Text('孟'),",
      "  radius: 40,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-LinearProgressIndicator": {
    "scope": "dart",
    "prefix": "ft-LinearProgressIndicator",
    "body": [
      "LinearProgressIndicator",
      "水平进度指示器，基本用法如下：",
      "",
      "LinearProgressIndicator()",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置具体进度值：",
      "",
      "LinearProgressIndicator(",
      "  value: 0.3,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "value的值范围是0-1，效果如下：",
      "",
      "",
      "",
      "设置背景颜色及进度值：",
      "",
      "LinearProgressIndicator(",
      "  value: 0.3,",
      "  backgroundColor: Colors.greenAccent,",
      "  valueColor: AlwaysStoppedAnimation<Color>(Colors.red),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-CircularProgressIndicator": {
    "scope": "dart",
    "prefix": "ft-CircularProgressIndicator",
    "body": [
      "CircularProgressIndicator",
      "CircularProgressIndicator 是圆形进度条，和LinearProgressIndicator用法一样：",
      "",
      "CircularProgressIndicator()",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置进度值及颜色值：",
      "",
      "CircularProgressIndicator(",
      "  value: 0.3,",
      "  backgroundColor: Colors.greenAccent,",
      "  valueColor: AlwaysStoppedAnimation<Color>(Colors.red),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-CupertinoActivityIndicator": {
    "scope": "dart",
    "prefix": "ft-CupertinoActivityIndicator",
    "body": [
      "CupertinoActivityIndicator",
      "CupertinoActivityIndicator是ios风格的指示器，CupertinoActivityIndicator不能设置进度，只能一直转“菊花”。",
      "",
      "CupertinoActivityIndicator(",
      "  radius: 10,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "radius参数是半径，值越大，控件越大。",
      "",
      "效果如下："
    ]
  },
  "ft-RefreshProgressIndicator": {
    "scope": "dart",
    "prefix": "ft-RefreshProgressIndicator",
    "body": [
      "RefreshProgressIndicator",
      "RefreshProgressIndicator 是刷新指示器，通常用于下拉刷新，基本用法如下：",
      "",
      "RefreshProgressIndicator()",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置宽度及颜色：",
      "",
      "RefreshProgressIndicator(",
      "  backgroundColor: Colors.greenAccent,",
      "  valueColor: AlwaysStoppedAnimation<Color>(Colors.red),",
      "  strokeWidth: 5.0,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-ClipRect": {
    "scope": "dart",
    "prefix": "ft-ClipRect",
    "body": [
      "ClipRect",
      "ClipRect组件使用矩形裁剪子组件，通常情况下，ClipRect作用于CustomPaint 、 CustomSingleChildLayout 、 CustomMultiChildLayout 、 Align 、 Center 、 OverflowBox 、 SizedOverflowBox组件，例如ClipRect作用于Align，可以仅显示上半部分，代码如下：",
      "",
      "ClipRect(",
      "  child: Align(",
      "    alignment: Alignment.topCenter,",
      "    heightFactor: 0.5,",
      "    child: Container(",
      "      height: 150,",
      "      width: 150,",
      "      child: Image.asset(",
      "        'images/1.png',",
      "        fit: BoxFit.cover,",
      "      ),",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "全图效果：",
      "",
      "",
      "裁剪效果：",
      "",
      "",
      "clipper参数定义裁剪规则，下面具体介绍。",
      "",
      "clipBehavior参数定义了裁剪的方式，只有子控件超出父控件的范围才有裁剪的说法，各个方式说明如下：",
      "",
      "none：不裁剪，系统默认值，如果子组件不超出边界，此值没有任何性能消耗。",
      "hardEdge：裁剪但不应用抗锯齿，速度比none慢一点，但比其他方式快。",
      "antiAlias：裁剪而且抗锯齿，此方式看起来更平滑，比antiAliasWithSaveLayer快，比hardEdge慢，通常用于处理圆形和弧形裁剪。",
      "antiAliasWithSaveLayer：裁剪、抗锯齿而且有一个缓冲区，此方式很慢，用到的情况比较少。"
    ]
  },
  "ft-ClipRRect": {
    "scope": "dart",
    "prefix": "ft-ClipRRect",
    "body": [
      "ClipRRect",
      "ClipRRect组件可以对子组件进行圆角裁剪，默认圆角半径为0，注意ClipRRect有2个R，不是上面介绍的ClipRect。",
      "",
      "用法如下：",
      "",
      "ClipRRect(",
      "  borderRadius: BorderRadius.circular(20),",
      "  child: Container(",
      "    height: 150,",
      "    width: 150,",
      "    child: Image.asset(",
      "      'images/1.png',",
      "      fit: BoxFit.cover,",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如图"
    ]
  },
  "ft-ClipOval": {
    "scope": "dart",
    "prefix": "ft-ClipOval",
    "body": [
      "ClipOval",
      "ClipOval裁剪为椭圆形，椭圆形的大小为正切父组件，因此如果父组件为正方形，切出来是圆形，用法如下：",
      "",
      "ClipOval(",
      "  child: Container(",
      "    height: 150,",
      "    width: 250,",
      "    child: Image.asset(",
      "      'images/1.png',",
      "      fit: BoxFit.cover,",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-ClipPath": {
    "scope": "dart",
    "prefix": "ft-ClipPath",
    "body": [
      "ClipPath",
      "ClipPath组件根据路径进行裁剪，我们自定义裁剪路径也可以使用系统提供的，用法如下：",
      "",
      "ClipPath.shape(",
      "  shape: StadiumBorder(),",
      "  child: Container(",
      "    height: 150,",
      "    width: 250,",
      "    child: Image.asset(",
      "      'images/1.png',",
      "      fit: BoxFit.cover,",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "shape参数是ShapeBorder类型，系统已经定义了很多形状，介绍如下：",
      "",
      "RoundedRectangleBorder：圆角矩形",
      "",
      "ContinuousRectangleBorder：直线和圆角平滑连续的过渡，和RoundedRectangleBorder相比，圆角效果会小一些。",
      "",
      "StadiumBorder：类似于足球场的形状，两端半圆。",
      "",
      "BeveledRectangleBorder：斜角矩形。效果如图：",
      "",
      "",
      "CircleBorder：圆形"
    ]
  },
  "ft-CustomClipper": {
    "scope": "dart",
    "prefix": "ft-CustomClipper",
    "body": [
      "CustomClipper",
      "CustomClipper并不是一个组件，而是一个abstract(抽象)类，使用CustomClipper可以绘制出任何我们想要的形状，比如三角形，代码如下：",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  return Center(",
      "    child: ClipPath(",
      "      clipper: TrianglePath(),",
      "      child: Container(",
      "        height: 150,",
      "        width: 250,",
      "        child: Image.asset(",
      "          'images/1.png',",
      "          fit: BoxFit.cover,",
      "        ),",
      "      ),",
      "    ),",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "自定义TrianglePath代码如下：",
      "",
      "class TrianglePath extends CustomClipper<Path>{",
      "  @override",
      "  Path getClip(Size size) {",
      "    var path = Path();",
      "    path.moveTo(size.width/2, 0);",
      "    path.lineTo(0, size.height);",
      "    path.lineTo(size.width, size.height);",
      "    return path;",
      "  }",
      "",
      "  @override",
      "  bool shouldReclip(CustomClipper<Path> oldClipper) {",
      "    return true;",
      "  }",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "我们还可以绘制五角星，代码如下：",
      "",
      "class StarPath extends CustomClipper<Path> {",
      "  StarPath({this.scale = 2.5});",
      "",
      "  final double scale;",
      "",
      "  double perDegree = 36;",
      "",
      "  /// 角度转弧度公式",
      "  double degree2Radian(double degree) {",
      "    return (pi * degree / 180);",
      "  }",
      "",
      "  @override",
      "  Path getClip(Size size) {",
      "    var R = min(size.width / 2, size.height / 2);",
      "    var r = R / scale;",
      "    var x = size.width / 2;",
      "    var y = size.height / 2;",
      "",
      "    var path = Path();",
      "    path.moveTo(x, y - R);",
      "    path.lineTo(x - sin(degree2Radian(perDegree)) * r,",
      "        y - cos(degree2Radian(perDegree)) * r);",
      "    path.lineTo(x - sin(degree2Radian(perDegree * 2)) * R,",
      "        y - cos(degree2Radian(perDegree * 2)) * R);",
      "    path.lineTo(x - sin(degree2Radian(perDegree * 3)) * r,",
      "        y - cos(degree2Radian(perDegree * 3)) * r);",
      "    path.lineTo(x - sin(degree2Radian(perDegree * 4)) * R,",
      "        y - cos(degree2Radian(perDegree * 4)) * R);",
      "    path.lineTo(x - sin(degree2Radian(perDegree * 5)) * r,",
      "        y - cos(degree2Radian(perDegree * 5)) * r);",
      "    path.lineTo(x - sin(degree2Radian(perDegree * 6)) * R,",
      "        y - cos(degree2Radian(perDegree * 6)) * R);",
      "    path.lineTo(x - sin(degree2Radian(perDegree * 7)) * r,",
      "        y - cos(degree2Radian(perDegree * 7)) * r);",
      "    path.lineTo(x - sin(degree2Radian(perDegree * 8)) * R,",
      "        y - cos(degree2Radian(perDegree * 8)) * R);",
      "    path.lineTo(x - sin(degree2Radian(perDegree * 9)) * r,",
      "        y - cos(degree2Radian(perDegree * 9)) * r);",
      "    path.lineTo(x - sin(degree2Radian(perDegree * 10)) * R,",
      "        y - cos(degree2Radian(perDegree * 10)) * R);",
      "    return path;",
      "  }",
      "",
      "  @override",
      "  bool shouldReclip(StarPath oldClipper) {",
      "    return oldClipper.scale != this.scale;",
      "  }",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "scale参数表示间隔的点到圆心的缩放比例，五角星效果如下：",
      "",
      "",
      "下面用动画动态设置scale，代码如下：",
      "",
      "class StartClip extends StatefulWidget {",
      "  @override",
      "  State<StatefulWidget> createState() => _StartClipState();",
      "}",
      "",
      "class _StartClipState extends State<StartClip>",
      "    with SingleTickerProviderStateMixin {",
      "  AnimationController _controller;",
      "  Animation _animation;",
      "",
      "  @override",
      "  void initState() {",
      "    _controller =",
      "        AnimationController(duration: Duration(seconds: 2), vsync: this)",
      "          ..addStatusListener((status) {",
      "            if (status == AnimationStatus.completed) {",
      "              _controller.reverse();",
      "            } else if (status == AnimationStatus.dismissed) {",
      "              _controller.forward();",
      "            }",
      "          });",
      "    _animation = Tween(begin: 1.0, end: 4.0).animate(_controller);",
      "    _controller.forward();",
      "    super.initState();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: AnimatedBuilder(",
      "          animation: _animation,",
      "          builder: (context, child) {",
      "            return ClipPath(",
      "              clipper: StarPath(scale: _animation.value),",
      "              child: Container(",
      "                height: 150,",
      "                width: 150,",
      "                color: Colors.red,",
      "              ),",
      "            );",
      "          }),",
      "    );",
      "  }",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-ColorFiltered": {
    "scope": "dart",
    "prefix": "ft-ColorFiltered",
    "body": [
      "ColorFiltered",
      "Flutter中大部分多组件都有color属性，可以方便的改变颜色，但如果想改变图片颜色就不是那么容易了，虽然Image组件也有color属性，但设置的color属性会覆盖整个组件，这并不是我们想要的，而ColorFiltered组件可以帮我们解决这个问题。",
      "",
      "假设我们有这么一种图片，图片只有一段文字，其他地方透明：",
      "",
      "Container(",
      "        color: Colors.grey, child: Image.asset('images/content.png'));",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "由于字体是白色的，所以将背景设置为灰色，这时来了一个需求根据系统样式改变字体颜色，大部分人第一个想法就是让UI切处所有颜色的图片，虽然效果可以实现，但问题太大了，第一：样式比较多的话必然会有大量的图片，导致App的体积较大。第二：如果允许用户自定义主题颜色，按照上面的方式基本无法实现。",
      "",
      "我们可以使用ColorFiltered来实现上面的效果：",
      "",
      "Container(",
      "        child: ColorFiltered(",
      "          colorFilter: ColorFilter.mode(Colors.blue, BlendMode.modulate),",
      "          child: Image.asset('images/content.png'),",
      "        ));",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "想要什么颜色直接改变颜色值即可。",
      "",
      "ColorFiltered还可以实现类似“滤镜”效果，让一张图片和color进行融合：",
      "",
      "Row(",
      "      children: <Widget>[",
      "        Expanded(",
      "          child: Image.asset('images/1.png'),",
      "        ),",
      "        Expanded(",
      "            child: ColorFiltered(",
      "          colorFilter: ColorFilter.mode(Colors.pink[200], BlendMode.modulate),",
      "          child: Image.asset('images/1.png'),",
      "        ))",
      "      ],",
      "    )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "原始图片和融合后图片效果对比：",
      "",
      "",
      "",
      "可以作用于任何组件，如果想让某一个区域变为灰色，用法如下：",
      "",
      "ColorFiltered(",
      "          colorFilter: ColorFilter.mode(Colors.grey, BlendMode.saturation),",
      "          child: Container(",
      "            height: 100,",
      "            width: 200,",
      "            color: Colors.blue,",
      "          ),",
      "        )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "对比效果如下：",
      "",
      "",
      "",
      "ColorFiltered用法比较简单，其中的blendMode非常重要，系统为我们提供了非常多的融合模式，关于blendMode可以查看如下文章："
    ]
  },
  "ft-Row Column": {
    "scope": "dart",
    "prefix": "ft-Row Column",
    "body": [
      "在Row和Column中有一个非常重要的概念：MainAxisAlignment（主轴）和CrossAxisAlignment（交叉轴），简单来说，MainAxisAlignment（主轴）就是与当前控件方向一致的轴，而CrossAxisAlignment（交叉轴）就是与当前控件方向垂直的轴，比如Row的主轴是水平方向，交叉轴是垂直方向，而Column的主轴是垂直方向，交叉轴是水平方向。",
      "",
      "Row和Column是多子控件的容器类控件，Row控件水平布局，Column控件垂直布局。",
      "",
      "#主轴对齐方式",
      "Row控件的主轴mainAxisAlignment对齐方式默认值是MainAxisAlignment.start，即子控件从开始处排列，这个开始处不一定是屏幕的左边，是从左到右还是从右到左排列取决于文本方向textDirection属性，比如阿拉伯文本方向是从右到左的。",
      "",
      "3个颜色块水平排列，代码如下：",
      "",
      "Row(",
      "        children: <Widget>[",
      "          Container(",
      "            height: 50,",
      "            width: 100,",
      "            color: Colors.red,",
      "          ),",
      "          Container(",
      "            height: 50,",
      "            width: 100,",
      "            color: Colors.green,",
      "          ),",
      "          Container(",
      "            height: 50,",
      "            width: 100,",
      "            color: Colors.blue,",
      "          ),",
      "        ],",
      "      )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如图：  黑色边框是Row控件的范围，默认情况下Row铺满父组件。主轴的对齐方式设置代码如下：",
      "",
      "Row(",
      "	mainAxisAlignment: MainAxisAlignment.center,",
      "	...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "主轴对齐方式有6种，效果如下图：",
      "",
      "",
      "",
      "spaceAround和spaceEvenly区别是：",
      "",
      "spaceAround：第一个子控件距开始位置和最后一个子控件距结尾位置是其他子控件间距的一半。",
      "spaceEvenly：所有间距一样。",
      "#交叉轴对齐方式",
      "和主轴相对应的就是交叉轴crossAxisAlignment，交叉轴对齐方式默认是居中。Row控件的高度是依赖子控件高度，因此子控件高都一样时，Row的高和子控件高相同，此时是无法体现交叉轴对齐方式，修改3个颜色块高分别为50，100，150，这样Row的高是150，代码如下：",
      "",
      "Row(",
      "        children: <Widget>[",
      "          Container(",
      "            height: 50,",
      "            width: 100,",
      "            color: Colors.red,",
      "          ),",
      "          Container(",
      "            height: 100,",
      "            width: 100,",
      "            color: Colors.green,",
      "          ),",
      "          Container(",
      "            height: 150,",
      "            width: 100,",
      "            color: Colors.blue,",
      "          ),",
      "        ],",
      "      )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下： ",
      "",
      "交叉轴属性设置代码如下：",
      "",
      "Row(",
      "	crossAxisAlignment: CrossAxisAlignment.center,",
      "	...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "交叉轴对齐方式介绍如下： ",
      "",
      "CrossAxisAlignment.stretch 表示使子控件填满交叉轴。",
      "",
      "#textDirection和verticalDirection",
      "属性textDirection控制水平方向布局，值包含TextDirection.ltr(从左到右)和TextDirection.rtl(从右到左)，verticalDirection控制垂直方向布局，值包含VerticalDirection.up(从上到下)和VerticalDirection.down(从下到上),用法如下：",
      "",
      "Row(",
      "	textDirection: TextDirection.rtl,",
      "	...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：  想一想这种效果完全可以通过主轴的方式实现，那么为什么还要有textDirection和verticalDirection这2个属性，官方API文档已经解释了这个问题：",
      "",
      "This is also used to disambiguate start and end values (e.g. [MainAxisAlignment.start] or [CrossAxisAlignment.end]).",
      "",
      "用于消除“start”和“end”值的歧义的。",
      "",
      "#主轴尺寸",
      "主轴尺寸由mainAxisSize属性控制，仅有min和max两种方式，默认是max方法。min表示尽可能小，而max表示尽可能大，设置min的代码如下：",
      "",
      "Row(",
      "	mainAxisSize: MainAxisSize.min,",
      "	...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：  黑色边框是Row的边框。"
    ]
  },
  "ft-Container2": {
    "scope": "dart",
    "prefix": "ft-Container2",
    "body": [
      "Container",
      "Container将会是我们以后最常用的控件之一，Container是单容器类控件，即只包含一个子控件。Container可以装饰和定位子控件，例如设置背景颜色、形状等。",
      "",
      "#无任何参数设置",
      "如果只用Container包装子控件而没有任何其他参数的设置，代码如下：",
      "",
      "Container(",
      "	child: Text('老孟'),",
      " )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "Container内的子控件不会发生任何外观上的变化，效果如下： ",
      "",
      "#设置背景颜色",
      "如果想要给子控件添加背景颜色可以使用color属性，代码如下：",
      "",
      "Container(",
      "	color: Colors.blue,",
      "    child: Text('老孟'),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：  没有其他参数设置时，Container将会根据子控件自行调整大小。",
      "",
      "#padding 和 margin",
      "如果想在Container和子元素之间添加空白可以使用padding属性，代码如下：",
      "",
      "Container(",
      "	color: Colors.blue,",
      "    child: Text('老孟'),",
      "    padding: EdgeInsets.all(20),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：  margin的用法和padding一样，padding表示内边距，margin表示外边距。",
      "",
      "#Decoration 装饰",
      "decoration属性可以设置子控件的背景颜色、形状等。设置背景为圆形，颜色为蓝色，代码如下：",
      "",
      "Container(",
      "	child: Text('老孟，一个有态度的程序员'),",
      "    decoration: BoxDecoration(",
      "    	shape: BoxShape.circle,",
      "        color: Colors.blue",
      "	),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：  默认情况下，圆形的直径等于Container的窄边长度，相当于在矩形内绘制内切圆。",
      "",
      "上面的情况明显不是我们希望看到了，太丑了，我们希望背景是圆角矩形，代码如下：",
      "",
      "Container(",
      "        child: Text('老孟，一个有态度的程序员'),",
      "        padding: EdgeInsets.symmetric(horizontal: 10),",
      "        decoration: BoxDecoration(",
      "          shape: BoxShape.rectangle,",
      "          borderRadius: BorderRadius.all(Radius.circular(20)),",
      "          color: Colors.blue",
      "        ),",
      "      )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：  这就好看多了吗。",
      "",
      "除了背景我们可以设置边框效果，代码如下：",
      "",
      "Container(",
      "        child: Text('老孟，一个有态度的程序员'),",
      "        padding: EdgeInsets.symmetric(horizontal: 10),",
      "        decoration: BoxDecoration(",
      "          borderRadius: BorderRadius.circular(12),",
      "          border: Border.all(",
      "            color: Colors.blue,",
      "            width: 2,",
      "          ),",
      "        ),",
      "      )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：  我们也可以通过此方式创建圆角图片和圆形图片，代码如下：",
      "",
      "Container(",
      "      height: 200,",
      "      width: 200,",
      "      decoration: BoxDecoration(",
      "        image:  DecorationImage(",
      "          image: NetworkImage(",
      "              'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl-2.jpg'),",
      "          fit: BoxFit.cover,",
      "        ),",
      "        border: Border.all(",
      "          color: Colors.blue,",
      "          width: 2,",
      "        ),",
      "        borderRadius: BorderRadius.circular(12),",
      "      ),",
      "    )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如图：  修改其形状为圆形，代码如下：",
      "",
      "Container(",
      "      height: 200,",
      "      width: 200,",
      "      decoration: BoxDecoration(",
      "        image: DecorationImage(",
      "          image: NetworkImage(",
      "              'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl-2.jpg'),",
      "          fit: BoxFit.cover,",
      "        ),",
      "        border: Border.all(",
      "          color: Colors.blue,",
      "          width: 2,",
      "        ),",
      "        shape: BoxShape.circle,",
      "      ),",
      "    )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如图： ",
      "",
      "#Alignment 对齐方式",
      "注意：设置对齐方式后，Container将会充满其父控件，相当于Android中match_parent,不在是根据子控件调整大小",
      "",
      "设置对齐方式为居中，背景色为蓝色，代码如下：",
      "",
      "Container(",
      "        color: Colors.blue,",
      "        child: Text('老孟，一个有态度的程序员'),",
      "        alignment: Alignment.center,",
      "      )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：  通过背景色可以看出Container充满其父控件。",
      "",
      "#宽、高、约束宽高",
      "我们也可以设置固定的宽高属性，代码如下：",
      "",
      "Container(",
      "        color: Colors.blue,",
      "        child: Text('老孟，一个有态度的程序员'),",
      "        alignment: Alignment.center,",
      "        height: 60,",
      "        width: 200,",
      "      )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如图： ",
      "",
      "还可以通过constraints属性设置最大/小宽、高来确定大小，constraints如果不设置，默认最小宽高是0，最大宽高是无限大（double.infinity），约束width代码如下：",
      "",
      "Container(",
      "        color: Colors.blue,",
      "        child: Text('老孟，一个有态度的程序员'),",
      "        alignment: Alignment.center,",
      "        constraints: BoxConstraints.tightForFinite(",
      "          width: 200",
      "        ),",
      "      )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如图： ",
      "",
      "#transform 变换",
      "通过transform可以旋转、平移、缩放Container，旋转代码如下：",
      "",
      "Container(",
      "        color: Colors.blue,",
      "        child: Text('老孟，一个有态度的程序员'),",
      "        alignment: Alignment.center,",
      "        height: 60,",
      "        width: 200,",
      "        transform: Matrix4.rotationZ(0.5),",
      "      )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "注意：Matrix4.rotationZ()参数的单位是弧度而不是角度",
      "",
      "效果如图："
    ]
  },
  "ft-CupertinoActionSheet": {
    "scope": "dart",
    "prefix": "ft-CupertinoActionSheet",
    "body": [
      "CupertinoActionSheet",
      "CupertinoActionSheet组件是Cupertino（ios）风格底部弹出的提示框，一般情况下点击按钮弹出：",
      "",
      "RaisedButton(",
      "      child: Text('点我'),",
      "      onPressed: () {",
      "        showCupertinoModalPopup(...);",
      "      },",
      "    )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "showCupertinoModalPopup方法是系统方法，其中的builder参数就是构建CupertinoActionSheet，用法如下：",
      "",
      "showCupertinoModalPopup(",
      "        context: context,",
      "        builder: (context) {",
      "          return CupertinoActionSheet();",
      "		}",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "CupertinoActionSheet组件的actions属性提供给用户几个选项，",
      "",
      "CupertinoActionSheet(",
      "            title: Text('提示'),",
      "            message: Text('是否要删除当前项？'),",
      "            actions: <Widget>[",
      "              CupertinoActionSheetAction(",
      "                child: Text('删除'),",
      "                onPressed: () {},",
      "                isDefaultAction: true,",
      "              ),",
      "              CupertinoActionSheetAction(",
      "                child: Text('暂时不删'),",
      "                onPressed: () {},",
      "                isDestructiveAction: true,",
      "              ),",
      "            ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#CupertinoActionSheetAction",
      "actions的子组件一般使用CupertinoActionSheetAction组件，CupertinoActionSheetAction组件向按钮组件一样，提供了子控件和onPressed回调，isDefaultAction属性设置为true时，文字加粗，isDestructiveAction属性设置为true时，文字颜色变为红色，效果如下：",
      "",
      "",
      "",
      "如果想要一个和其他选项分开的组件，可以使用cancelButton属性，用法如下：",
      "",
      "CupertinoActionSheet(",
      "	cancelButton: CupertinoActionSheetAction(",
      "              child: Text('取消'),",
      "              onPressed: () {},",
      "            ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "那我们如何知道用户选择了哪个选项呢，我们需要在onPressed回调中返回不同的值，如下：",
      "",
      "onPressed: () {",
      "	Navigator.of(context).pop('delete');",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "showCupertinoModalPopup方法是Future方法，用户点击了某一项时返回，完整代码如下：",
      "",
      "@override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "        child: RaisedButton(",
      "      child: Text('点我'),",
      "      onPressed: () {",
      "        _showCupertinoActionSheet();",
      "      },",
      "    ));",
      "  }",
      "",
      "  _showCupertinoActionSheet() async{",
      "    var result = await showCupertinoModalPopup(",
      "        context: context,",
      "        builder: (context) {",
      "          return CupertinoActionSheet(",
      "            title: Text('提示'),",
      "            message: Text('是否要删除当前项？'),",
      "            actions: <Widget>[",
      "              CupertinoActionSheetAction(",
      "                child: Text('删除'),",
      "                onPressed: () {",
      "                  Navigator.of(context).pop('delete');",
      "                },",
      "                isDefaultAction: true,",
      "              ),",
      "              CupertinoActionSheetAction(",
      "                child: Text('暂时不删'),",
      "                onPressed: () {",
      "                  Navigator.of(context).pop('not delete');",
      "                },",
      "                isDestructiveAction: true,",
      "              ),",
      "            ],",
      "            cancelButton: CupertinoActionSheetAction(",
      "              child: Text('取消'),",
      "              onPressed: () {",
      "                Navigator.of(context).pop('cancel');",
      "              },",
      "            ),",
      "          );",
      "        });",
      "    print('$result');",
      "  }",
      "",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "通过result不同的值判断用户选择了哪一项。"
    ]
  },
  "ft-MaterialApp": {
    "scope": "dart",
    "prefix": "ft-MaterialApp",
    "body": [
      "MaterialApp",
      "在学习Flutter的过程中我们第一个看见的控件应该就是MaterialApp，毕竟创建一个新的Flutter项目的时候，项目第一个组件就是MaterialApp，这是一个Material风格的根控件，基本用法如下：",
      "",
      "MaterialApp(",
      "  home: Scaffold(",
      "    appBar: AppBar(",
      "      title: Text('老孟'),",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "home参数是App默认显示的页面，效果如下：",
      "",
      "",
      "",
      "title参数是应用程序的描述，在Android上，在任务管理器的应用程序快照上面显示，在IOS上忽略此属性，IOS上任务管理器应用程序快照上面显示的是Info.plist文件中的CFBundleDisplayName。如果想根据区域显示不同的描述使用onGenerateTitle，用法如下：",
      "",
      "MaterialApp(",
      "  title: '老孟',",
      "  onGenerateTitle: (context) {",
      "    var local = Localizations.localeOf(context);",
      "    if (local.languageCode == 'zh') {",
      "      return '老孟';",
      "    }",
      "    return 'laomeng';",
      "  },",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "routes、initialRoute、onGenerateRoute、onUnknownRoute是和路由相关的4个属性，路由简单的理解就是页面，路由的管理通常是指页面的管理，比如跳转、返回等。",
      "",
      "MaterialApp按照如下的规则匹配路由：",
      "",
      "路由为/，home不为null则使用home。",
      "使用routes指定的路由。",
      "使用onGenerateRoute生成的路由，处理除home和routes以外的路由。",
      "如果上面都不匹配则调用onUnknownRoute。",
      "是不是还是比较迷糊，不要紧，看下面的例子就明白了：",
      "",
      "MaterialApp(",
      "  routes: {",
      "    'container': (context) => ContainerDemo(),",
      "    'fitted': (context) => FittedBoxDemo(),",
      "    'icon': (context) => IconDemo(),",
      "  },",
      "  initialRoute: '/',",
      "  home: Scaffold(",
      "    appBar: AppBar(",
      "      title: Text('老孟'),",
      "    ),",
      "  ),",
      "  onGenerateRoute: (RouteSettings routeSettings){",
      "        print('onGenerateRoute:$routeSettings');",
      "        if(routeSettings.name == 'icon'){",
      "          return MaterialPageRoute(builder: (context){",
      "            return IconDemo();",
      "          });",
      "        }",
      "      },",
      "      onUnknownRoute: (RouteSettings routeSettings){",
      "        print('onUnknownRoute:$routeSettings');",
      "        return MaterialPageRoute(builder: (context){",
      "          return IconDemo();",
      "        });",
      "      },",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "initialRoute设置为/，那么加载home页面。",
      "",
      "如果initialRoute设置为icon，在routes中存在，所以加载routes中指定的路由，即IconDemo页面。",
      "",
      "如果initialRoute设置为icons1,此时routes中并不存在名称为icons1的路由，调用onGenerateRoute，如果onGenerateRoute返回路由页面，则加载此页面，如果返回的是null，且home不为null，则加载home参数指定的页面，如果home为null，则回调onUnknownRoute。",
      "",
      "theme、darkTheme、themeMode是关于主题的参数，设置整个App的主题，包括颜色、字体、形状等，修改主题颜色为红色用法如下：",
      "",
      "MaterialApp(",
      "  theme: ThemeData(",
      "    primaryColor: Colors.red",
      "  ),",
      "  darkTheme: ThemeData(",
      "      primaryColor: Colors.red",
      "  ),",
      "  themeMode: ThemeMode.dark,",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "locale、localizationsDelegates、localeListResolutionCallback、localeResolutionCallback、supportedLocales是区域设置和国际化相关的参数，如果App支持多国语言，那么就需要设置这些参数，默认情况下，Flutter仅支持美国英语，如果想要添加其他语言支持则需要指定其他MaterialApp属性，并引入flutter_localizations 包，到2019年4月，flutter_localizations包已经支持52种语言，如果你想让你的应用在iOS上顺利运行，那么你还必须添加“flutter_cupertino_localizations”包。",
      "",
      "在pubspec.yaml文件中添加包依赖：",
      "",
      "dependencies:",
      "  flutter:",
      "    sdk: flutter",
      "  flutter_localizations:",
      "    sdk: flutter",
      "  flutter_cupertino_localizations: ^1.0.1",
      "",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "设置如下：",
      "",
      "MaterialApp(",
      "  localizationsDelegates: [",
      "    GlobalMaterialLocalizations.delegate,",
      "    GlobalWidgetsLocalizations.delegate,",
      "    GlobalCupertinoLocalizations.delegate",
      "  ],",
      "  supportedLocales: [",
      "    const Locale('zh', 'CH'),",
      "    const Locale('en', 'US'),",
      "  ],",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "GlobalMaterialLocalizations.delegate ：为Material Components库提供了本地化的字符串和其他值。",
      "GlobalWidgetsLocalizations.delegate：定义widget默认的文本方向，从左到右或从右到左。",
      "GlobalCupertinoLocalizations.delegate：为Cupertino（ios风格）库提供了本地化的字符串和其他值。",
      "supportedLocales参数指定了当前App支持的语言。",
      "",
      "localeResolutionCallback和localeListResolutionCallback都是对语言变化的监听，比如切换系统语言等，localeResolutionCallback和localeListResolutionCallback的区别是localeResolutionCallback返回的第一个参数是当前语言的Locale，而localeListResolutionCallback返回当前手机支持的语言集合，在早期的版本手机没有支持语言的集合，只显示当前语言，在设置->语言和地区的设置选项效果如下：",
      "",
      "",
      "",
      "在早期是没有红色区域的。",
      "",
      "因此我们只需使用localeListResolutionCallback即可，通过用户手机支持的语言和当前App支持的语言返回一个语言选项。",
      "",
      "通常情况下，如果用户的语言正好是App支持的语言，那么直接返回此语言，如果不支持，则返回一个默认的语言，用法如下：",
      "",
      "MaterialApp(",
      "  localeListResolutionCallback:",
      "      (List<Locale> locales, Iterable<Locale> supportedLocales) {",
      "    if (locales.contains('zh')) {",
      "      return Locale('zh');",
      "    }",
      "    return Locale('en');",
      "  },",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "在App中也可以通过如下方法获取区域设置：",
      "",
      "Locale myLocale = Localizations.localeOf(context);",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "还有几个方便调试的选项，debugShowMaterialGrid：打开网格调试",
      "",
      "MaterialApp(",
      "  debugShowMaterialGrid: true,",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "showPerformanceOverlay：打开性能检测",
      "",
      "MaterialApp(",
      "  showPerformanceOverlay: true,",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "右上角有一个DEBUG的标识，这是系统在debug模式下默认显示的，不显示的设置如下：",
      "",
      "MaterialApp(",
      "  debugShowCheckedModeBanner: true,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#CupertinoApp",
      "我想你一定能想到既然有Material风格的MaterialApp，那么也应该有Cupertino（ios）风格与之相对应，是的Cupertino风格的是CupertinoApp，CupertinoApp的属性及用法和MaterialApp一模一样，就不在具体介绍了"
    ]
  },
  "ft-CupertinoContextMenu": {
    "scope": "dart",
    "prefix": "ft-CupertinoContextMenu",
    "body": [
      "CupertinoContextMenu",
      "CupertinoContextMenu 效果类似以iOS 3D Touch，长按弹出菜单，用法如下：",
      "",
      "CupertinoContextMenu(",
      "  child: Container(",
      "    color: Colors.red,",
      "    height: 60,",
      "    width: 100,",
      "  ),",
      "  actions: <Widget>[",
      "    CupertinoContextMenuAction(",
      "      child: const Text('Action one'),",
      "      onPressed: () {",
      "        Navigator.pop(context);",
      "      },",
      "    ),",
      "    CupertinoContextMenuAction(",
      "      child: const Text('Action two'),",
      "      onPressed: () {",
      "        Navigator.pop(context);",
      "      },",
      "    ),",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "CupertinoContextMenu_1",
      "",
      "previewBuilder如果不指定则显示child，此属性展示打开状态下的样式，比如上面的红色框打开时变为圆角：",
      "",
      "CupertinoContextMenu(",
      "  child: Container(",
      "    color: Colors.red,",
      "    height: 60,",
      "    width: 100,",
      "  ),",
      "  previewBuilder: (",
      "    BuildContext context,",
      "    Animation<double> animation,",
      "    Widget child,",
      "  ) {",
      "    return Container(",
      "      decoration: BoxDecoration(",
      "        borderRadius: BorderRadius.circular(10 * animation.value),",
      "        color: Colors.red,",
      "      ),",
      "      height: 60,",
      "      width: 100,",
      "    );",
      "  },",
      "  actions: <Widget>[",
      "    CupertinoContextMenuAction(",
      "      child: const Text('Action one'),",
      "      onPressed: () {",
      "        Navigator.pop(context);",
      "      },",
      "    ),",
      "    CupertinoContextMenuAction(",
      "      child: const Text('Action two'),",
      "      onPressed: () {",
      "        Navigator.pop(context);",
      "      },",
      "    ),",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "CupertinoContextMenu_2",
      "",
      "#CupertinoContextMenuAction",
      "CupertinoContextMenuAction 用于CupertinoContextMenu组件中，当作actions，用法如下：",
      "",
      "CupertinoContextMenuAction(",
      "  child: const Text('Action one'),",
      "  onPressed: () {",
      "    Navigator.pop(context);",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "onPressed表示点击回调。",
      "",
      "设置isDefaultAction为true，字体变为加粗：",
      "",
      "CupertinoContextMenuAction(",
      "  isDefaultAction: true,",
      "  child: const Text('Action one'),",
      "  onPressed: () {",
      "    Navigator.pop(context);",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "image-20200526175910874",
      "",
      "设置isDestructiveAction为true，字体变为红色：",
      "",
      "CupertinoContextMenuAction(",
      "  isDestructiveAction: true,",
      "  child: const Text('Action one'),",
      "  onPressed: () {",
      "    Navigator.pop(context);",
      "  },",
      ")",
      " "
    ]
  },
  "ft-日期选择组件picker": {
    "scope": "dart",
    "prefix": "ft-日期选择组件picker",
    "body": [
      "日期选择组件",
      "Flutter系统提供了一些日期选择类组件，比如DayPicker、MonthPicker、YearPicker、showDatePicker、CupertinoDatePicker等，其中前4个为Material风格组件，最后一个为iOS风格组件。本文介绍了控件的基本用法及如何实现国际化，如果系统提供的国际化不满足你的需要，最后也介绍了如何实现自定义国际化。",
      "",
      "#DayPicker",
      "显示给定月份的日期，并允许选择一天。这些天以矩形网格排列，一周的每一天都有一列。",
      "",
      "DayPicker有几个必填参数，分别如下：",
      "",
      "selectedDate：选中的日期，选中的日期有圆形背景。",
      "currentDate：当前日期，文字高亮。",
      "onChanged：用户选择的日期发生变化时回调。",
      "firstDate：可选日期的开始值。",
      "lastDate：可选日期的结束值。",
      "displayedMonth：显示的月份",
      "显示2020年5月，代码如下：",
      "",
      "DateTime _selectedDate = DateTime.now();",
      "",
      "DayPicker(",
      "  selectedDate: _selectedDate,",
      "  currentDate: DateTime.now(),",
      "  onChanged: (date) {",
      "    setState(() {",
      "      _selectedDate = date;",
      "    });",
      "  },",
      "  firstDate: DateTime(2020, 5, 1),",
      "  lastDate: DateTime(2020, 5, 31),",
      "  displayedMonth: DateTime(2020, 5),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "selectableDayPredicate参数定义用户的可选日期，返回false表示不可选，例如只可选今天以前的日期：",
      "",
      "DayPicker(",
      "  selectableDayPredicate: (date) {",
      "    return date.difference(DateTime.now()).inMilliseconds < 0;",
      "  },",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "今天以后的日期全部为灰色，不可选状态。",
      "",
      "#MonthPicker",
      "可选择的月份选择器，在顶部有一个滚动的月份列表，每个月份下面展示当前月份的天，本质上MonthPicker是滚动的月份列表+ DayPicker，用法如下：",
      "",
      "DateTime _selectedDate = DateTime.now();",
      "MonthPicker(",
      "  selectedDate: _selectedDate,",
      "  onChanged: (date) {",
      "    setState(() {",
      "      _selectedDate = date;",
      "    });",
      "  },",
      "  firstDate: DateTime(2020, 1),",
      "  lastDate: DateTime(2020, 12),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "属性和DayPicker基本一致。",
      "",
      "#YearPicker",
      "年份选择器，用法如下：",
      "",
      "YearPicker(",
      "  selectedDate: _selectedDate,",
      "  onChanged: (date) {",
      "    setState(() {",
      "      _selectedDate = date;",
      "    });",
      "  },",
      "  firstDate: DateTime(2000, 1),",
      "  lastDate: DateTime(2020, 12),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "年份选择器和月份选择器略有不同，年份选择器并不包含当前年份下的月份。",
      "",
      "不管是YearPicker，还是MonthPicker、DayPicker，\"我们都很少直接使用\"，而是使用showDatePicker，它会创建一个日期选择器对话框。个人觉得showDatePicker的样式风格不是很符合国内的审美，我们可能更多的时候是使用YearPicker、MonthPicker和DayPicker自定义日期控件。",
      "",
      "#showDatePicker",
      "showDatePicker并不是一个新的控件，而是封装了YearPicker和MonthPicker，并进行了联动，用法如下：",
      "",
      "RaisedButton(",
      "  onPressed: () async {",
      "    var result = await showDatePicker(",
      "        context: context,",
      "        initialDate: DateTime.now(),",
      "        firstDate: DateTime(2020),",
      "        lastDate: DateTime(2030));",
      "    print('$result');",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "相关参数介绍如下：",
      "",
      "initialDate初始化时间，通常情况下设置为当前时间。",
      "",
      "firstDate表示开始时间，不能选择此时间前面的时间。",
      "",
      "lastDate表示结束时间，不能选择此时间之后的时间。",
      "",
      "showDatePicker方法是Future方法，点击日期选择控件的确定按钮后，返回选择的日期。",
      "",
      "selectableDayPredicate参数定义用户的可选日期，返回false表示不可选，与DayPicker用法相同。",
      "",
      "builder参数可用于包装对话框窗口小部件以添加继承的窗口小部件，例如Theme，设置深色主题用法如下：",
      "",
      "showDatePicker(",
      "  builder: (context, child) {",
      "    return Theme(",
      "      data: ThemeData.dark(),",
      "      child: child,",
      "    );",
      "  },",
      "	...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "上面是Material风格的日期控件，下面介绍下iOS风格的日期控件。",
      "",
      "#CupertinoDatePicker",
      "ios风格的日期选择器，用法如下：",
      "",
      " var _dateTime = DateTime.now();",
      "CupertinoDatePicker(",
      "  initialDateTime: _dateTime,",
      "  onDateTimeChanged: (date) {",
      "    setState(() {",
      "      _dateTime = date;",
      "    });",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "mode参数设置日期的格式：",
      "",
      "time：只显示时间，效果：4 | 14 | PM",
      "date：只显示日期，效果：July | 13 | 2012",
      "dateAndTime：时间和日期都显示，效果： Fri Jul 13 | 4 | 14 | PM",
      "设置最大日期和最小日期：",
      "",
      "CupertinoDatePicker(",
      "  minimumDate: DateTime.now().add(Duration(days: -1)),",
      "  maximumDate: DateTime.now().add(Duration(days: 1)),",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "使用24小时制：",
      "",
      "CupertinoDatePicker(",
      "  use24hFormat: true,",
      "	...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#showTimePicker",
      "时间选择器只能通过showTimePicker的方式来调用，用法如下：",
      "",
      "RaisedButton(",
      "  onPressed: () async {",
      "    showTimePicker(",
      "        context: context, initialTime: TimeOfDay.now());",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "builder参数用于控制子控件，可以向DatePicker一样设置深色主题，还可以设置其显示24小时，用法如下：",
      "",
      "showTimePicker(",
      "    context: context,",
      "    initialTime: TimeOfDay.now(),",
      "    builder: (context, child) {",
      "      return MediaQuery(",
      "        data: MediaQuery.of(context)",
      "            .copyWith(alwaysUse24HourFormat: true),",
      "        child: child,",
      "      );",
      "    });",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "#CupertinoTimerPicker",
      "CupertinoTimerPicker 是ios风格的时间选择器，基本用法如下：",
      "",
      "CupertinoTimerPicker(",
      "  onTimerDurationChanged: (Duration duration){",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置只显示小时和分钟：",
      "",
      "CupertinoTimerPicker(",
      "  mode: CupertinoTimerPickerMode.hm,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "默认情况下，CupertinoTimerPicker显示0:0:0，设置显示当前时间：",
      "",
      "var now = DateTime.now();",
      "return Container(",
      "  height: 200,",
      "  child: CupertinoTimerPicker(",
      "    initialTimerDuration: Duration(hours: now.hour,minutes: now.minute,seconds: now.second),",
      "    onTimerDurationChanged: (Duration duration) {},",
      "  ),",
      ");",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#国际化",
      "增加国际化处理，在pubspec.yaml添加支持：",
      "",
      "dependencies:",
      "  flutter_localizations:",
      "    sdk: flutter    ",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "在顶级控件MaterialApp添加支持，具体信息可查MaterialApp控件：",
      "",
      "MaterialApp(",
      "  localeListResolutionCallback:",
      "          (List<Locale> locales, Iterable<Locale> supportedLocales) {",
      "        return Locale('zh');",
      "      },",
      "      localeResolutionCallback:",
      "          (Locale locale, Iterable<Locale> supportedLocales) {",
      "        return Locale('zh');",
      "      },",
      "      localizationsDelegates: [",
      "        GlobalMaterialLocalizations.delegate,",
      "        GlobalWidgetsLocalizations.delegate,",
      "        GlobalCupertinoLocalizations.delegate,",
      "      ],",
      "      supportedLocales: [",
      "        const Locale('zh', 'CH'),",
      "        const Locale('en', 'US'),",
      "      ],",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "以上方式对所有日期控件都有效果，效果如下：",
      "",
      "",
      "",
      "",
      "",
      "#自定义国际化",
      "我们对iOS风格的控件自定义国际化为例，新建新的类MyLocalizationsDelegate：",
      "",
      "class MyLocalizationsDelegate",
      "    extends LocalizationsDelegate<CupertinoLocalizations> {",
      "  const MyLocalizationsDelegate();",
      "",
      "  @override",
      "  bool isSupported(Locale locale) => locale.languageCode == 'zh';",
      "",
      "  @override",
      "  Future<CupertinoLocalizations> load(Locale locale) =>",
      "      ZhCupertinoLocalizations.load(locale);",
      "",
      "  @override",
      "  bool shouldReload(MyLocalizationsDelegate old) => false;",
      "",
      "  @override",
      "  String toString() => 'DefaultCupertinoLocalizations.delegate(zh)';",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "ZhCupertinoLocalizations定义如下：",
      "",
      "class ZhCupertinoLocalizations implements CupertinoLocalizations {",
      "  const ZhCupertinoLocalizations();",
      "",
      "  static const List<String> _shortWeekdays = <String>[",
      "    '自周一',",
      "    '自周二',",
      "    '自周三',",
      "    '自周四',",
      "    '自周五',",
      "    '自周六',",
      "    '自周日',",
      "  ];",
      "",
      "  static const List<String> _shortMonths = <String>[",
      "    '1月',",
      "    '2月',",
      "    '3月',",
      "    '4月',",
      "    '5月',",
      "    '6月',",
      "    '7月',",
      "    '8月',",
      "    '9月',",
      "    '10月',",
      "    '11月',",
      "    '12月',",
      "  ];",
      "",
      "  static const List<String> _months = <String>[",
      "    '1月',",
      "    '2月',",
      "    '3月',",
      "    '4月',",
      "    '5月',",
      "    '6月',",
      "    '7月',",
      "    '8月',",
      "    '9月',",
      "    '10月',",
      "    '11月',",
      "    '12月',",
      "  ];",
      "",
      "  @override",
      "  String datePickerYear(int yearIndex) => yearIndex.toString();",
      "",
      "  @override",
      "  String datePickerMonth(int monthIndex) => _months[monthIndex - 1];",
      "",
      "  @override",
      "  String datePickerDayOfMonth(int dayIndex) => dayIndex.toString();",
      "",
      "  @override",
      "  String datePickerHour(int hour) => hour.toString();",
      "",
      "  @override",
      "  String datePickerHourSemanticsLabel(int hour) => hour.toString() + \" o'clock\";",
      "",
      "  @override",
      "  String datePickerMinute(int minute) => minute.toString().padLeft(2, '0');",
      "",
      "  @override",
      "  String datePickerMinuteSemanticsLabel(int minute) {",
      "    if (minute == 1) return '1 分';",
      "    return minute.toString() + ' 分';",
      "  }",
      "",
      "  @override",
      "  String datePickerMediumDate(DateTime date) {",
      "    return '${_shortWeekdays[date.weekday - DateTime.monday]} '",
      "        '${_shortMonths[date.month - DateTime.january]} '",
      "        '${date.day.toString().padRight(2)}';",
      "  }",
      "",
      "  @override",
      "  DatePickerDateOrder get datePickerDateOrder => DatePickerDateOrder.mdy;",
      "",
      "  @override",
      "  DatePickerDateTimeOrder get datePickerDateTimeOrder =>",
      "      DatePickerDateTimeOrder.date_time_dayPeriod;",
      "",
      "  @override",
      "  String get anteMeridiemAbbreviation => '上午';",
      "",
      "  @override",
      "  String get postMeridiemAbbreviation => '下午';",
      "",
      "  @override",
      "  String get todayLabel => '今天';",
      "",
      "  @override",
      "  String get alertDialogLabel => 'Alert';",
      "",
      "  @override",
      "  String timerPickerHour(int hour) => hour.toString();",
      "",
      "  @override",
      "  String timerPickerMinute(int minute) => minute.toString();",
      "",
      "  @override",
      "  String timerPickerSecond(int second) => second.toString();",
      "",
      "  @override",
      "  String timerPickerHourLabel(int hour) => hour == 1 ? '小时' : '小时';",
      "",
      "  @override",
      "  String timerPickerMinuteLabel(int minute) => '分.';",
      "",
      "  @override",
      "  String timerPickerSecondLabel(int second) => '秒.';",
      "",
      "  @override",
      "  String get cutButtonLabel => '剪贴';",
      "",
      "  @override",
      "  String get copyButtonLabel => '拷贝';",
      "",
      "  @override",
      "  String get pasteButtonLabel => '黏贴';",
      "",
      "  @override",
      "  String get selectAllButtonLabel => '选择全部';",
      "",
      "  static Future<CupertinoLocalizations> load(Locale locale) {",
      "    return SynchronousFuture<CupertinoLocalizations>(",
      "        const ZhCupertinoLocalizations());",
      "  }",
      "",
      "  /// A [LocalizationsDelegate] that uses [DefaultCupertinoLocalizations.load]",
      "  /// to create an instance of this class.",
      "  static const LocalizationsDelegate<CupertinoLocalizations> delegate =",
      "      MyLocalizationsDelegate();",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "注意开始的属性_shortWeekdays，这个属性表示星期几，故意写成'自周x'，为了和系统的区分，在根控件MaterialApp的localizationsDelegates属性中增加：ZhCupertinoLocalizations.delegate，这个就是上面定义的国际化文件，效果如下：",
      "",
      "",
      "",
      "注意：ZhCupertinoLocalizations.delegate要放在GlobalCupertinoLocalizations.delegate,的前面，系统加载顺序为从上到下。",
      "",
      "效果如下："
    ]
  },
  "ft-CupertinoFullscreenDialogTransition": {
    "scope": "dart",
    "prefix": "ft-CupertinoFullscreenDialogTransition",
    "body": [
      "CupertinoFullscreenDialogTransition",
      "不要被这个组件的名字迷惑了，它本质上是一个SlideTransition组件，从（0，1）移动到（0，0）。用法如下：",
      "",
      "AnimationController _animationController;",
      "",
      "@override",
      "void initState() {",
      "  _animationController = AnimationController(",
      "    vsync: this,",
      "    duration: Duration(milliseconds: 500),",
      "  );",
      "  super.initState();",
      "}",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  return Column(",
      "    children: <Widget>[",
      "      Expanded(",
      "        child: Container(),",
      "      ),",
      "      Row(",
      "        mainAxisAlignment: MainAxisAlignment.spaceAround,",
      "        children: <Widget>[",
      "          RaisedButton(",
      "            onPressed: () => _animationController.forward(),",
      "            child: Text('Forward'),",
      "          ),",
      "          RaisedButton(",
      "            onPressed: () => _animationController.reverse(),",
      "            child: Text('Reverse'),",
      "          ),",
      "        ],",
      "      ),",
      "      CupertinoFullscreenDialogTransition(",
      "        animation: _animationController,",
      "        child: Container(",
      "          color: Colors.blueGrey,",
      "          height: 300,",
      "        ),",
      "      ),",
      "",
      "    ],",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-CupertinoNavigationBar": {
    "scope": "dart",
    "prefix": "ft-CupertinoNavigationBar",
    "body": [
      "CupertinoNavigationBar",
      "ios风格的导航条，对应Material风格的AppBar，用法如下：",
      "",
      "CupertinoNavigationBar(",
      "  middle: Text('老孟'),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "middle表示中间的控件，效果如下：",
      "",
      "",
      "",
      "导航条左边的控件：",
      "",
      "CupertinoPageScaffold(",
      "  navigationBar: CupertinoNavigationBar(",
      "    leading: Icon(Icons.arrow_back),",
      "    middle: Text('老孟'),",
      "  ),",
      "  child: FirstPage(),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "leading为null而且automaticallyImplyLeading设置true(默认就是true)",
      "",
      "在fullscreenDialog上显示一个“关闭”图标。",
      "如果previousPageTitle不为null，显示一个“返回”图标+previousPageTitle的值。",
      "如果当前路由和前一个路由都是CupertinoPageRoute类型，显示“返回”图标+上一个路由的title。",
      "第二张情况的第一个页面：",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  return Center(",
      "    child: RaisedButton(",
      "      child: Text('去下一个页面'),",
      "      onPressed: () {",
      "        Navigator.of(context).push(CupertinoPageRoute(builder: (context) {",
      "          return SecondPage();",
      "        });",
      "      },",
      "    ),",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "第二个页面：",
      "",
      "class SecondPage extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return CupertinoPageScaffold(",
      "      navigationBar: CupertinoNavigationBar(",
      "        previousPageTitle: '返回',",
      "        middle: Text('老孟'),",
      "      ),",
      "      child: Center(",
      "        child: RaisedButton(",
      "          child: Text('to third'),",
      "          onPressed: () {",
      "            Navigator.of(context).push(CupertinoPageRoute(builder: (context) {",
      "              return ThirdPage();",
      "            }));",
      "          },",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "middle和trailing分别表示中间和末尾的控件，用法如下：",
      "",
      "CupertinoNavigationBar(",
      "  middle: Text('老孟'),",
      "  trailing: Icon(Icons.timer),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "设置背景颜色和padding：",
      "",
      "CupertinoNavigationBar(",
      "  middle: Text('老孟'),",
      "  backgroundColor: Colors.red,",
      "  padding: EdgeInsetsDirectional.only(start: 10),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#CupertinoSliverNavigationBar",
      "CupertinoSliverNavigationBar的属性CupertinoNavigationBar基本一样，比CupertinoNavigationBar多了一个largeTitle属性，而且CupertinoSliverNavigationBar是Sliver控件，通常用于CustomScrollView中。",
      "",
      "CustomScrollView(",
      "  slivers: <Widget>[",
      "    CupertinoSliverNavigationBar(",
      "      largeTitle: Text('老孟'),",
      "    ),",
      "  ],",
      ")"
    ]
  },
  "ft-CupertinoNavigationBarBackButton": {
    "scope": "dart",
    "prefix": "ft-CupertinoNavigationBarBackButton",
    "body": [
      "CupertinoNavigationBarBackButton是一个导航后退按钮，通常用在CupertinoNavigationBar中，用法如下：",
      "",
      "CupertinoNavigationBarBackButton(",
      "  color: Colors.red,",
      "  previousPageTitle: '返回',",
      "  onPressed: (){},",
      ")",
      " "
    ]
  },
  "ft-CupertinoPageScaffold": {
    "scope": "dart",
    "prefix": "ft-CupertinoPageScaffold",
    "body": [
      "CupertinoPageScaffold和Material 风格的Scaffold的作用是一样的，是应用程序整体布局的控件，但比Scaffold的功能要少的多，为什么呢？嗯，我猜，Google想让你使用Scaffold。",
      "",
      "CupertinoPageScaffold只有顶部的导航条和内容区域（导航条下面的部分）两部分，用法如下：",
      "",
      "CupertinoApp(",
      "  home: CupertinoPageScaffold(",
      "    navigationBar: CupertinoNavigationBar(",
      "      middle: Text('老孟'),",
      "    ),",
      "    child: FirstPage(),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "CupertinoNavigationBar 是导航控件，效果如下：",
      "",
      "",
      "",
      "child属性表示导航条下面的部分，系统并没有提供类似Scaffold的抽屉控件和底部导航控件。"
    ]
  },
  "ft-CupertinoPicker": {
    "scope": "dart",
    "prefix": "ft-CupertinoPicker",
    "body": [
      "ios风格的选择器，和ListWheelScrollView类似。",
      "",
      "基本用法如下：",
      "",
      "CupertinoPicker(",
      "  itemExtent: 45,",
      "  onSelectedItemChanged: (index){",
      "	},",
      "  children: <Widget>[",
      "    Container(color: Colors.primaries[1],),",
      "    Container(color: Colors.primaries[2],),",
      "    Container(color: Colors.primaries[3],),",
      "    Container(color: Colors.primaries[4],),",
      "    Container(color: Colors.primaries[5],),",
      "    Container(color: Colors.primaries[6],),",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "itemExtent每个子控件的高度。",
      "",
      "onSelectedItemChanged：选择的选项发生变化回调。"
    ]
  },
  "ft-Scrollbar": {
    "scope": "dart",
    "prefix": "ft-Scrollbar",
    "body": [
      "Scrollbar",
      "Material风格的滚动条，比如ListView等可滚动控件默认情况下是没有滚动指示器的，如果想给其加滚动条，用法如下：",
      "",
      "Scrollbar(",
      "  child: ListView.builder(",
      "    itemBuilder: (BuildContext context, int index) {",
      "      return Text('Item$index');",
      "    },",
      "    itemExtent: 50,",
      "    itemCount: 50,",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "image-20200529175625014",
      "",
      "#CupertinoScrollbar",
      "CupertinoScrollbar是iOS风格的滚动条，用法和Scrollbar一样。"
    ]
  },
  "ft-CupertinoSegmentedControl": {
    "scope": "dart",
    "prefix": "ft-CupertinoSegmentedControl",
    "body": [
      "CupertinoSegmentedControl",
      "iOS样式的分段控制组件，用法如下：",
      "",
      "CupertinoSegmentedControl(",
      "  children: {",
      "    '语文':Container(child: Text('语文'), padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),),",
      "    '数学':Container(child: Text('数学'), padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),),",
      "    '体育':Container(child: Text('体育'), padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),)",
      "  },",
      "  onValueChanged: (value){",
      "    print(value);",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "image-20200526181817167",
      "",
      "groupValue表示当前选中的值，",
      "",
      "String _value = '语文';",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  return Center(",
      "    child: CupertinoSegmentedControl(",
      "      children: {",
      "        '语文':Container(child: Text('语文'), padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),),",
      "        '数学':Container(child: Text('数学'), padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),),",
      "        '体育':Container(child: Text('体育'), padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),)",
      "      },",
      "      groupValue: _value,",
      "      onValueChanged: (value){",
      "        setState(() {",
      "          _value = value;",
      "        });",
      "      },",
      "    ),",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "CupertinoSegmentedControl",
      "",
      "unselectedColor表示未选中的背景颜色和选中的字体颜色：",
      "",
      "CupertinoSegmentedControl(",
      "  unselectedColor: Colors.yellow,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "image-20200526182812968",
      "",
      "selectedColor表示选中的背景颜色和未选中的字体颜色：",
      "",
      "CupertinoSegmentedControl(",
      "  selectedColor: Colors.red,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "image-20200526182915710",
      "",
      "pressedColor表示按住时的颜色：",
      "",
      "CupertinoSegmentedControl(",
      "  pressedColor: Colors.red,",
      "  ...",
      ") ",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "image-20200526183107025",
      "",
      "borderColor表示边框颜色：",
      "",
      "CupertinoSegmentedControl(",
      "  borderColor: Colors.red,",
      "  ...",
      ") ",
      " ",
      " "
    ]
  },
  "ft-Slider": {
    "scope": "dart",
    "prefix": "ftSlider-",
    "body": [
      "Slider",
      "Slider可以快速的从一系列值中做出选择，Slider需要设置value和onChanged属性，用法如下：",
      "",
      "double _sliderValue = 0;",
      "Slider(",
      "  value: _sliderValue,",
      "  onChanged: (v){",
      "    setState(() {",
      "      _sliderValue = v;",
      "    });",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "如果不设置onChanged属性，Slider控件处于禁用状态，不可滑动，另外Slider控件本身没有滑动效果，需要通过onChanged回调动态改变value的值，效果如下：",
      "",
      "",
      "",
      "更改Slider值的范围：",
      "",
      "Slider(",
      "  min: 0,",
      "  max: 100,",
      "  ...",
      "  ）",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "通过设置divisions属性使Slider停留在某些点上，Slider只能滑动到这些点，效果如下：",
      "",
      "",
      "",
      "注意看Slider上分了3个点。",
      "",
      "设置label参数则可以在拖动Slider时在其上方显示一个标签，显示标签需要设置divisions参数：",
      "",
      "Slider(",
      "  label: '$_sliderValue',",
      "  divisions: 5,",
      "  ...",
      "  )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "通过activeColor和inactiveColor参数设置其颜色：",
      "",
      "Slider(",
      "  activeColor: Colors.red,",
      "  inactiveColor: Colors.blue,",
      "  ...",
      "  )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "#RangeSlider",
      "如果想要选择一段值，可以使用RangeSlider，用法和Slider一样，如下：",
      "",
      "RangeValues _rangeValues = RangeValues(0, 1);",
      "RangeSlider(",
      "  values: _rangeValues,",
      "  onChanged: (v) {",
      "    setState(() {",
      "      _rangeValues = v;",
      "    });",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果：",
      "",
      "",
      "",
      "#CupertinoSlider",
      "如果想用ios风格的Slider，可以使用CupertinoSlider:",
      "",
      "double _sliderValue = 0;",
      "CupertinoSlider(",
      "  value: _sliderValue,",
      "  onChanged: (v) {",
      "    setState(() {",
      "      _sliderValue = v;",
      "    });",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "当然我们也可以根据平台显示不同风格的Slider，ios平台显示CupertinoSlider效果，其他平台显示Material风格，用法如下：",
      "",
      "Slider.adaptive(",
      "  value: _sliderValue,",
      "  onChanged: (v) {",
      "    setState(() {",
      "      _sliderValue = v;",
      "    });",
      "  },",
      ")",
      " ",
      " "
    ]
  },
  "ft-CupertinoSlidingSegmentedControl": {
    "scope": "dart",
    "prefix": "ft-CupertinoSlidingSegmentedControl",
    "body": [
      "CupertinoSlidingSegmentedControl",
      "iOS 13 样式分段控件。",
      "",
      "String _value = '语文';",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  return Center(",
      "    child: CupertinoSlidingSegmentedControl(",
      "      children: {",
      "        '语文':Container(child: Text('语文'), padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),),",
      "        '数学':Container(child: Text('数学'), padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),),",
      "        '体育':Container(child: Text('体育'), padding: EdgeInsets.symmetric(vertical: 5,horizontal: 10),)",
      "      },",
      "      groupValue: _value,",
      "      onValueChanged: (value){",
      "        setState(() {",
      "          _value = value;",
      "        });",
      "      },",
      "    ),",
      "  );",
      "}",
      " "
    ]
  },
  "ft-RefreshIndicator": {
    "scope": "dart",
    "prefix": "ft-RefreshIndicator",
    "body": [
      "RefreshIndicator",
      "RefreshIndicator是Material风格的下拉刷新组件。",
      "",
      "基本用法如下：",
      "",
      "var _list = [1, 2, 3, 4, 5];",
      "",
      "RefreshIndicator(",
      "      onRefresh: () async {",
      "        setState(() {",
      "          _list.add(_list.length + 1);",
      "        });",
      "      },",
      "      child: ListView.builder(",
      "        itemBuilder: (context, index) {",
      "          return ListTile(",
      "            title: Text('老孟${_list[index]}'),",
      "          );",
      "        },",
      "        itemExtent: 50,",
      "        itemCount: _list.length,",
      "      ),",
      "    )",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "RefreshIndicator和ListView组合 下拉刷新功能，效果如下：",
      "",
      "",
      "",
      "设置指示器到顶部或者底部到距离：",
      "",
      "RefreshIndicator(",
      "  displacement: 10,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "设置指示器的前置颜色和背景颜色：",
      "",
      "RefreshIndicator(",
      "  color: Colors.red,",
      "  backgroundColor: Colors.lightBlue,",
      "    ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "#CupertinoSliverRefreshControl",
      "CupertinoSliverRefreshControl 是ios风格的下拉刷新控件。",
      "",
      "基本用法：",
      "",
      "var _list = [1, 2, 3, 4, 5];",
      "CustomScrollView(",
      "  slivers: <Widget>[",
      "    CupertinoSliverRefreshControl(",
      "      onRefresh: () async {",
      "        setState(() {",
      "          _list.add(_list.length + 1);",
      "        });",
      "      },",
      "    ),",
      "    SliverList(",
      "      delegate: SliverChildBuilderDelegate((content, index) {",
      "        return ListTile(",
      "          title: Text('老孟${_list[index]}'),",
      "        );",
      "      }, childCount: _list.length),",
      "    )",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "CupertinoSliverRefreshControl的用法和RefreshIndicator不同，CupertinoSliverRefreshControl需要放在CustomScrollView中。",
      "",
      "效果如下："
    ]
  },
  "ft-Switch": {
    "scope": "dart",
    "prefix": "ft-Switch",
    "body": [
      "Switch",
      "Switch为material风格的开关组件，基本用法如下：",
      "",
      "var _switchValue = false;",
      "_buildSwitch(){",
      "  return Switch(",
      "    value: _switchValue,",
      "    onChanged: (value){",
      "      setState(() {",
      "        _switchValue = value;",
      "      });",
      "    },",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "设置激活状态下thumb及track颜色，用法如下：",
      "",
      "Switch(",
      "      activeColor: Colors.red,",
      "      activeTrackColor: Colors.blue,",
      "      ...",
      "    ）",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "注意红色区域为thumb，蓝色区域为track。",
      "",
      "thumb区域也可以设置图片，用法如下：",
      "",
      "Switch(",
      "  activeThumbImage: AssetImage('images/bird.png',),",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "有激活状态样式的设置，也有未激活样式的设置，用法如下：",
      "",
      "Switch(",
      "  inactiveThumbColor: Colors.black54,",
      "  inactiveThumbImage: AssetImage('images/bird.png',),",
      "  inactiveTrackColor: Colors.blue,",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#SwitchListTile",
      "SwitchListTile是Switch和ListTile组合控件，基本用法如下：",
      "",
      "var _switchValue = false;",
      "_buildSwitch(){",
      "  return SwitchListTile(",
      "    title:Text('是否允许4G下载'),",
      "    value: _switchValue,",
      "    onChanged: (value){",
      "      setState(() {",
      "        _switchValue = value;",
      "      });",
      "    },",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "所有的属性都是Switch和ListTile属性的组合，可到具体控件查看其属性。",
      "",
      "#CupertinoSwitch",
      "CupertinoSwitch是ios风格控件，用法和Switch一样，用法如下：",
      "",
      "var _switchValue = false;",
      "_buildSwitch(){",
      "  return CupertinoSwitch(",
      "    value: _switchValue,",
      "    onChanged: (value){",
      "      setState(() {",
      "        _switchValue = value;",
      "      });",
      "    },",
      "  );",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下："
    ]
  },
  "ft-CupertinoTabBar": {
    "scope": "dart",
    "prefix": "ft-CupertinoTabBar",
    "body": [
      "CupertinoTabBar",
      "CupertinoTaBar并不是对应TabBar，CupertinoTaBar和CupertinoTabScaffold配合使用，是一个底部导航。",
      "",
      "基本用法如下：",
      "",
      "CupertinoTabScaffold(",
      "  tabBar: CupertinoTabBar(",
      "    items: [",
      "      BottomNavigationBarItem(icon: Icon(Icons.home), title: Text('tab1')),",
      "      BottomNavigationBarItem(icon: Icon(Icons.home), title: Text('tab2')),",
      "    ],",
      "  )",
      "  ...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "items表示每一个tab，类型是BottomNavigationBarItem，效果如下：",
      "",
      "",
      "onTap是点击tab时的回调，背景色、选中状态icon颜色、未选中颜色设置如下：",
      "",
      "CupertinoTabBar(",
      "  items: [",
      "    BottomNavigationBarItem(icon: Icon(Icons.home), title: Text('tab1')),",
      "    BottomNavigationBarItem(icon: Icon(Icons.home), title: Text('tab2')),",
      "  ],",
      "  onTap: (index){",
      "    print('$index');",
      "  },",
      "  currentIndex: 1,",
      "  backgroundColor: Colors.blue,",
      "  activeColor: Colors.red,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "#CupertinoTabView",
      "CupertinoTabView是拥有导航状态和历史的单独控件，用法如下：",
      "",
      "CupertinoTabScaffold(",
      "  tabBar: CupertinoTabBar(",
      "    items: [",
      "      BottomNavigationBarItem(icon: Icon(Icons.home), title: Text('tab1')),",
      "      BottomNavigationBarItem(icon: Icon(Icons.home), title: Text('tab2')),",
      "    ],",
      "  ),",
      "  tabBuilder: (context, index) {",
      "    return CupertinoTabView(",
      "      defaultTitle: '老孟',",
      "      builder: (context){",
      "        return Center(",
      "          child: Text('$index'),",
      "        );",
      "      },",
      "    );",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "builder构建当前的控件，defaultTitle并不是显示在顶部的title，而是路由的title。",
      "",
      "routes、onGenerateRoute、onUnknownRoute、navigatorObservers的用法和MaterialApp对应参数用法一样。"
    ]
  },
  "ft-TextField": {
    "scope": "dart",
    "prefix": "ft-TextField",
    "body": [
      "TextField",
      "#EditableText",
      "EditableText是一个基本的文本输入组件，此组件和TextInput一起让用户编辑输入框的内容，提供滚动、选择、光标运动，但不提供焦点管理。通常情况下我们不会直至使用此组件，而是使用Material风格的TextField组件。",
      "",
      "#TextInput",
      "TextInput并不是组件，而是Flutter与原生交互的服务，控制键盘的显示。TextField组件的TextInputAction属性通过此服务实现。",
      "",
      "#TextField",
      "TextField是文本输入组件，即输入框，常用组件之一。基本用法：",
      "",
      "TextField()",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "不需要任何参数，一个最简单的文本输入组件就出来了，效果如下：",
      "",
      "",
      "",
      "#decoration",
      "decoration是TextField组件的装饰（外观）参数，类型是InputDecoration。",
      "",
      "#icon",
      "显示在输入框的前面，用法如下：",
      "",
      "TextField(",
      "  decoration: InputDecoration(",
      "    icon: Icon(Icons.person),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "#labelText labelStyle hasFloatingPlaceholder",
      "当输入框是空而且没有焦点时，labelText显示在输入框上边，当获取焦点或者不为空时labelText往上移动一点，labelStyle参数表示文本样式，具体参考TextStyle， 用法如下：",
      "",
      "TextField(",
      "  decoration: InputDecoration(",
      "    labelText: '姓名：',",
      "    labelStyle: TextStyle(color:Colors.red)",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "hasFloatingPlaceholder参数控制当输入框获取焦点或者不为空时是否还显示labelText，默认为true，显示。",
      "",
      "#helperText helperStyle helperMaxLines",
      "helperText显示在输入框的左下部，用于提示用户，helperStyle参数表示文本样式，具体参考TextStyle用法如下：",
      "",
      "TextField(",
      "  decoration: InputDecoration(",
      "    helperText: '用户名长度为6-10个字母',",
      "    helperStyle: TextStyle(color: Colors.blue),",
      "    helperMaxLines: 1",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "#hintText hintStyle hintMaxLines",
      "hintText是当输入框为空时的提示，不为空时不在显示，用法如下：",
      "",
      "TextField(",
      "  decoration: InputDecoration(",
      "    hintText: '请输入用户名',",
      "    hintStyle: TextStyle(color: Colors.grey),",
      "    hintMaxLines: 1",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "",
      "",
      "#errorText errorStyle errorMaxLines errorBorder",
      "errorText显示在输入框的左下部，默认字体为红色，用法如下：",
      "",
      "TextField(",
      "  decoration: InputDecoration(",
      "    errorText: '用户名输入错误',",
      "    errorStyle: TextStyle(fontSize: 12),",
      "    errorMaxLines: 1,",
      "    errorBorder: OutlineInputBorder(borderSide: BorderSide(color: Colors.red)),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "#prefixIcon prefix prefixText prefixStyle",
      "prefix系列的组件是输入框前面的部分，用法如下：",
      "",
      "TextField(",
      "  decoration: InputDecoration(",
      "    prefixIcon: Icon(Icons.person)",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "注意prefix和icon的区别，icon是在输入框边框的外部，而prefix在里面，效果如下：",
      "",
      "",
      "",
      "#suffix suffixIcon suffixText suffixStyle",
      "suffix和prefix相反，suffix在输入框的尾部，用法如下：",
      "",
      "TextField(",
      "  decoration: InputDecoration(",
      "      suffixIcon: Icon(Icons.person)",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果：",
      "",
      "",
      "",
      "#counter counterText counterStyle",
      "counter组件统计输入框文字的个数，counter仅仅是展示效果，不具备自动统计字数的功能， 自动统计字数代码如下：",
      "",
      "var _textFieldValue = '';",
      "TextField(",
      "  onChanged: (value){",
      "    setState(() {",
      "      _textFieldValue = value;",
      "    });",
      "  },",
      "  decoration: InputDecoration(",
      "    counterText: '${_textFieldValue.length}/32'",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "#filled fillColor focusedBorder disabledBorder",
      "filled为true时，输入框将会被fillColor填充，仿QQ登录输入框代码如下：",
      "",
      "Container(",
      "  height: 60,",
      "  width: 250,",
      "  child: TextField(",
      "    decoration: InputDecoration(",
      "      fillColor: Color(0x30cccccc),",
      "      filled: true,",
      "      enabledBorder: OutlineInputBorder(",
      "          borderSide: BorderSide(color: Color(0x00FF0000)),",
      "          borderRadius: BorderRadius.all(Radius.circular(100))),",
      "      hintText: 'QQ号/手机号/邮箱',",
      "      focusedBorder: OutlineInputBorder(",
      "          borderSide: BorderSide(color: Color(0x00000000)),",
      "          borderRadius: BorderRadius.all(Radius.circular(100))),",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "#isDense contentPadding",
      "isDense：设置为true则输入框的文本垂直方向空隙更小。",
      "contentPadding：内边距。",
      "#controller",
      "controller是输入框文本编辑的控制器，可以获取TextField的内容、设置TextField的内容，下面将输入的英文变为大写：",
      "",
      "TextEditingController _controller;",
      "",
      "@override",
      "void initState() {",
      "  super.initState();",
      "  _controller = TextEditingController()",
      "    ..addListener(() {",
      "      //获取输入框的内容，变为大写",
      "      _controller.text = _controller.text.toUpperCase();",
      "",
      "    });",
      "}",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  return TextField(",
      "    controller: _controller,",
      "  );",
      "}",
      "",
      "@override",
      "dispose() {",
      "  super.dispose();",
      "  _controller.dispose();",
      "}",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "有时输入框后面带有“清除”功能，需要controller来实现。如果需要2个TextField的内容进行同步，只需要给2个TextField设置同一个controller即可实现。",
      "",
      "#keyboardType",
      "keyboardType参数控制软键盘的类型，说明如下：",
      "",
      "text：通用键盘。",
      "multiline：当TextField为多行时（maxLines设置大于1），右下角的为“换行” 按键。",
      "number：数字键盘。",
      "phone：手机键盘，比数字键盘多\"*\"和 \"#\"。",
      "datetime：在ios上和text一样，在android上出现数字键盘、\":\"和 \"-\"。",
      "emailAddress：邮箱键盘，有\"@\" 和 \".\"按键。",
      "url：url键盘，有\"/\" 和 \".\"按键。",
      "visiblePassword：既有字幕又有数字的键盘。",
      "#textInputAction",
      "textInputAction参数控制软键盘右下角的按键，说明如下：",
      "",
      "none：android上显示返回键，ios不支持。",
      "unspecified：让操作系统自己决定哪个合适，一般情况下，android显示“完成”或者“返回”。",
      "done：android显示代表“完成”的按钮，ios显示“Done”（中文：完成）。",
      "go：android显示表达用户去向目的地的图标，比如向右的箭头，ios显示“Go”（中文：前往）。",
      "search：android显示表达搜索的按钮，ios显示\"Search\"（中文：搜索）。",
      "send：android显示表达发送意思的按钮，比如“纸飞机”按钮，ios显示\"Send\"（中文：发送）。",
      "next：android显示表达“前进”的按钮，比如“向右的箭头”,ios显示\"Next\"（中文：下一项）。",
      "previous：android显示表达“后退”的按钮，比如“向左的箭头”,ios不支持。",
      "continueAction：android 不支持，ios仅在ios9.0+显示\"Continue\"（中文：继续）。",
      "join：Android和ios显示\"Join\"（中文：加入）。",
      "route：android 不支持，ios显示\"Route\"（中文：路线）。",
      "emergencyCall：android 不支持，ios显示\"Emergency Call\"（中文：紧急电话）。",
      "newline：android显示表达“换行”的按钮，ios显示”换行“。",
      "大家可能发现了，Android上显示的按钮大部分是不确定的，比如next有的显示向右的箭头，有的显示前进，这是因为各大厂商对Android ROM定制引发的。",
      "",
      "#textCapitalization",
      "textCapitalization参数是配置键盘是大写还是小写，仅支持键盘模式为text，其他模式下忽略此配置，说明如下：",
      "",
      "words：每一个单词的首字母大写。",
      "sentences：每一句话的首字母大写。",
      "characters：每个字母都大写",
      "none：都小写",
      "这里仅仅是控制软键盘是大写模式还是小写模式，你也可以切换大小写，系统并不会改变输入框内的内容。",
      "",
      "#textAlign textAlignVertical textDirection",
      "textAlign表示文本的对齐方式，用法参考【TextAlign】。",
      "",
      "textAlignVertical表示垂直方向的对齐方式，textDirection表示文本方向，用法如下：",
      "",
      "TextField(",
      "  textAlignVertical: TextAlignVertical.center,",
      "  textDirection: TextDirection.rtl,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#toolbarOptions",
      "toolbarOptions表示长按时弹出的菜单，有copy、cut、paste、selectAll，用法如下：",
      "",
      "TextField(",
      "  toolbarOptions: ToolbarOptions(",
      "    copy: true,",
      "    cut: true,",
      "    paste: true,",
      "    selectAll: true",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#showCursor cursorWidth cursorRadius cursorColor",
      "cursor表示光标，用法如下：",
      "",
      "TextField(",
      "  showCursor: true,",
      "  cursorWidth: 3,",
      "  cursorRadius: Radius.circular(10),",
      "  cursorColor: Colors.red,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "",
      "",
      "#密码输入框",
      "将输入框设置为密码框，只需obscureText属性设置true即可，用法如下：",
      "",
      "TextField(",
      "  obscureText: true,",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#输入格式匹配",
      "通过inputFormatters可以限制用户输入的内容，比如只想让用户输入字符，设置如下：",
      "",
      "TextField(",
      "  inputFormatters: [",
      "    WhitelistingTextInputFormatter(RegExp(\"[a-zA-Z]\")),",
      "  ],",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "这时用户是无法输入数字的。",
      "",
      "#onChanged onSubmitted onTap",
      "onChanged是当内容发生变化时回调，onSubmitted是点击回车或者点击软键盘上的完成回调，onTap点击输入框时回调，用法如下：",
      "",
      "TextField(",
      "  onChanged: (value){",
      "    print('onChanged:$value');",
      "  },",
      "  onEditingComplete: (){",
      "    print('onEditingComplete');",
      "  },",
      "  ",
      "  onTap: (){",
      "    print('onTap');",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#字数统计",
      "输入框右下角经常需要字数统计，除了使用上面介绍的方法外，还可以使用buildCounter，建议使用此方法，用法如下：",
      "",
      "TextField(",
      "  maxLength: 100,",
      "  buildCounter: (",
      "    BuildContext context, {",
      "    int currentLength,",
      "    int maxLength,",
      "    bool isFocused,",
      "  }) {",
      "    return Text(",
      "      '$currentLength/$maxLength',",
      "    );",
      "  },",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#动态获取焦点",
      "FocusScope.of(context).requestFocus(_focusNode);",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "_focusNode为TextField的focusNode：",
      "",
      "_focusNode = FocusNode();",
      "",
      "TextField(",
      "	focusNode: _focusNode,",
      "	...",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#动态失去焦点",
      "_focusNode.unfocus();",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "#CupertinoTextField",
      "CupertinoTextField和TextField基本一样，TextField是基于Material风格的，而CupertinoTextField是ios风格的输入框。ios风格默认效果如下："
    ]
  },
  "ft-Theme": {
    "scope": "dart",
    "prefix": "ft-Theme",
    "body": [
      "Theme",
      "Theme是一个将主题应用于子组件的组件，用法如下：",
      "",
      "Theme(",
      "  data: ThemeData(",
      "    primaryColor: Colors.red,",
      "  ),",
      "  child: Scaffold(",
      "    appBar: AppBar(",
      "      title: Text('老孟程序员'),",
      "    ),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "image-20200422175923986",
      "",
      "Theme下有很多主题可以设置：",
      "",
      "ThemeData({",
      "  Brightness brightness, //深色还是浅色",
      "  MaterialColor primarySwatch, //主题颜色样本，见下面介绍",
      "  Color primaryColor, //主色，决定导航栏颜色",
      "  Color accentColor, //次级色，决定大多数Widget的颜色，如进度条、开关等。",
      "  Color cardColor, //卡片颜色",
      "  Color dividerColor, //分割线颜色",
      "  ButtonThemeData buttonTheme, //按钮主题",
      "  Color cursorColor, //输入框光标颜色",
      "  Color dialogBackgroundColor,//对话框背景颜色",
      "  String fontFamily, //文字字体",
      "  TextTheme textTheme,// 字体主题，包括标题、body等文字样式",
      "  IconThemeData iconTheme, // Icon的默认样式",
      "  TargetPlatform platform, //指定平台，应用特定平台控件风格",
      "  ...",
      "})",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "还有很多主题，可以查看ThemeData类，通过名称基本就明白其表示的意思了。",
      "",
      "#CupertinoTheme",
      "CupertinoThemeData组件是将主题应用于IOS风格的子组件，用法如下：",
      "",
      "CupertinoTheme(",
      "  data: CupertinoThemeData(",
      "    barBackgroundColor: Colors.red,",
      "  ),",
      "  child: CupertinoPageScaffold(",
      "    navigationBar: CupertinoNavigationBar(",
      "      leading: Icon(Icons.arrow_back),",
      "      middle: Text('老孟'),",
      "    ),",
      "    child: Container(),",
      "  ),",
      ")",
      " ",
      "        🌈复制成功！🌈",
      "    ",
      "效果如下：",
      "",
      "image-20200422181322709",
      "",
      "CupertinoThemeData主题包括：",
      "",
      "const CupertinoThemeData({",
      "  Brightness brightness, //深色还是浅色",
      "  Color primaryColor, //主色，决定导航栏颜色",
      "  Color primaryContrastingColor, //在[primaryColor]背景上呈现时必须易于查看的颜色。",
      "  CupertinoTextThemeData textTheme, // 字体主题",
      "  Color barBackgroundColor, //导航背景颜色",
      "  Color scaffoldBackgroundColor, //整体布局背景颜色",
      "})",
      " "
    ]
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  },
  "ft-": {
    "scope": "dart",
    "prefix": "ft-",
    "body": []
  }
}
