{
  // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "jv-mode-proxy": {
    "scope": "java",
    "prefix": "jv-mode-proxy",
    "body": [
      "public interface Image {",
      "    void showImage();",
      "}",
      "public class HighResolutionImage implements Image {",
      "",
      "    private URL imageURL;",
      "    private long startTime;",
      "    private int height;",
      "    private int width;",
      "",
      "    public int getHeight() {",
      "        return height;",
      "    }",
      "",
      "    public int getWidth() {",
      "        return width;",
      "    }",
      "",
      "    public HighResolutionImage(URL imageURL) {",
      "        this.imageURL = imageURL;",
      "        this.startTime = System.currentTimeMillis();",
      "        this.width = 600;",
      "        this.height = 600;",
      "    }",
      "",
      "    public boolean isLoad() {",
      "        // 模拟图片加载，延迟 3s 加载完成",
      "        long endTime = System.currentTimeMillis();",
      "        return endTime - startTime > 3000;",
      "    }",
      "",
      "    @Override",
      "    public void showImage() {",
      "        System.out.println(\"Real Image: \" + imageURL);",
      "    }",
      "}",
      "public class ImageProxy implements Image {",
      "",
      "    private HighResolutionImage highResolutionImage;",
      "",
      "    public ImageProxy(HighResolutionImage highResolutionImage) {",
      "        this.highResolutionImage = highResolutionImage;",
      "    }",
      "",
      "    @Override",
      "    public void showImage() {",
      "        while (!highResolutionImage.isLoad()) {",
      "            try {",
      "                System.out.println(\"Temp Image: \" + highResolutionImage.getWidth() + \" \" + highResolutionImage.getHeight());",
      "                Thread.sleep(100);",
      "            } catch (InterruptedException e) {",
      "                e.printStackTrace();",
      "            }",
      "        }",
      "        highResolutionImage.showImage();",
      "    }",
      "}",
      "public class ImageViewer {",
      "",
      "    public static void main(String[] args) throws Exception {",
      "        String image = \"http://image.jpg\";",
      "        URL url = new URL(image);",
      "        HighResolutionImage highResolutionImage = new HighResolutionImage(url);",
      "        ImageProxy imageProxy = new ImageProxy(highResolutionImage);",
      "        imageProxy.showImage();",
      "    }",
      "}"
    ]
  },
  "jv-mode-简单工厂模式": {
    "scope": "java",
    "prefix": "jv-mode-简单工厂模式",
    "body": [
      "public interface Ball {",
      "    public String create();",
      "}",
      "复制代码public class Soccer implements Ball {",
      "    @Override",
      "    public String create() {",
      "        return \"give you a soccer\";",
      "    }",
      "}",
      "复制代码public class BasketBall implements Ball {",
      "    @Override",
      "    public String create() {",
      "        return \"give you a basketBall\";",
      "    }",
      "}",
      "复制代码public class EasyBallFactory  {",
      "    public static Ball createBall(String name){",
      "        if (name.equals(\"basketball\")){",
      "            return new BasketBall();",
      "        }else if(name.equals(\"soccer\")){",
      "            return new Soccer();",
      "        }else {",
      "            return null;",
      "        }",
      "    }",
      "    public static void main(String[] args) {",
      "        Ball soccer = EasyBallFactory.createBall(\"soccer\");",
      "        Ball basketBall = EasyBallFactory.createBall(\"basketball\");",
      "        System.out.println(soccer.create()); //give you a soccer",
      "        System.out.println(basketBall.create()); //give you a basketBall",
      "    }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-单例模式": {
    "scope": "java",
    "prefix": "jv-mode-单例模式",
    "body": [
      "public class ShiroUtils {",
      "    public  static Session session;",
      "    public static Session getSession() {",
      "        if (session == null){",
      "            synchronized(ShiroUtils.class){",
      "                if (session == null){",
      "                    session = SecurityUtils.getSubject().getSession();",
      "                }",
      "            }",
      "        }",
      "        return session;",
      "    }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-建造者模式": {
    "scope": "java",
    "prefix": "jv-mode-建造者模式",
    "body": [
      "@Data",
      "public class Computer{",
      "    private CPU cpu;//cpu 是个接口，有不同实现如InterCPU AMDCPU 等等",
      "    private MainBoard mainBoard;//mainBoard 是个接口，有不同的实现",
      "    private DisPlayer disPlayer;//disPlayer 是个接口，有不同的实现",
      "}",
      "复制代码public abstract class Builder { ",
      "    abstract void buildCPU(); ",
      "    abstract void buildMainBoard(); ",
      "    abstract void buildDisPlayer(); ",
      "    abstract Computer createComputer(); ",
      "} ",
      "复制代码public class XiaoMiBuilder extends Builder{",
      "    private Computer computer = new Computer();",
      "    @Override",
      "    void buildCPU() {",
      "        computer.setCpu(new InterCPU());",
      "    }",
      "    @Override",
      "    void buildMainBoard() {",
      "        computer.setMainBoard(new AMainBoard());",
      "    }",
      "    @Override",
      "    void buildDisPlayer() {",
      "        computer.setDisPlayer(new ADisPlayer());",
      "    }",
      "    @Override",
      "    Computer createComputer() {",
      "        return computer;",
      "    }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-原型模式": {
    "scope": "java",
    "prefix": "jv-mode-原型模式",
    "body": [
      "原型模式用的比较少，用于创建重复对象。需要实现Cloneable 可以选择重写clone()方法。clone分为浅克隆和深克隆。浅克隆只是克隆引用，对象还是一个。深克隆是对象也新创建了一个，如下：",
      "@Data",
      "@Builder",
      "public class User implements Cloneable{",
      "    private String name;",
      "    private int age;",
      "    @Override",
      "    protected User clone() throws CloneNotSupportedException {",
      "        return new User(this.name,this.age);",
      "    }",
      "    public static void main(String[] args) throws CloneNotSupportedException {",
      "        User user1 = new User(\"pjjlt\",25);",
      "        User user2 = user1.clone();",
      "        user1.setAge(18);",
      "        System.out.println(user2.getAge()); //25",
      "    }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-代理模式": {
    "scope": "java",
    "prefix": "jv-mode-代理模式",
    "body": [
      "public interface Buy {",
      "    public void buyCar();",
      "}",
      "复制代码public class People implements Buy {",
      "    @Override",
      "    public void buyCar() {",
      "        System.out.println(\"you get a car\");",
      "    }",
      "}",
      "复制代码public class ProxyPeople implements Buy{",
      "    private People people;",
      "    public ProxyPeople(People people){",
      "        this.people=people;",
      "    }",
      "    @Override",
      "    public void buyCar() {",
      "        System.out.println(\"4s店帮你纳税、上保险...\");",
      "        people.buyCar();",
      "    }",
      "    public static void main(String[] args) {",
      "        Buy buy = new ProxyPeople(new People());",
      "        buy.buyCar();",
      "    }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-适配器模式": {
    "scope": "java",
    "prefix": "jv-mode-适配器模式",
    "body": [
      "public interface ATopIntf {",
      "    public void one();",
      "    public void two();",
      "    public void three();",
      "}",
      "复制代码public class Adapter implements ATopIntf {",
      "    @Override",
      "    public void one() { }",
      "    @Override",
      "    public void two() { }",
      "    @Override",
      "    public void three() { }",
      "}",
      "复制代码public class You extends Adapter {",
      "    @Override",
      "    public void one() {",
      "        super.one();",
      "        System.out.println(\"one\");",
      "    }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-桥接模式": {
    "scope": "java",
    "prefix": "jv-mode-桥接模式",
    "body": [
      "public  class BallCut {",
      "    private Ball ball;",
      "    public Ball getBall() {",
      "        return ball;",
      "    }",
      "    public void setBall(Ball ball) {",
      "        this.ball = ball;",
      "    }",
      "    public void create(){",
      "         System.out.println(ball.create());",
      "    }",
      "    public static void main(String[] args) {",
      "        BallCut ballCut = new BallCut();",
      "        ballCut.setBall(new Soccer());",
      "        ballCut.create(); //give you a soccer",
      "        ballCut.setBall(new BasketBall());",
      "        ballCut.create(); //give you a basketBall",
      "    }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-策略模式": {
    "scope": "java",
    "prefix": "jv-mode-策略模式",
    "body": [
      "定义一组算法, 将每个算法都封装起来, 并且使它们之间可以互换。可以说是一组算法的封装，根据客户端给出的不同要求，进行不同的运算。比如下面这个简易计算器。",
      "public interface Strategy {",
      "   public int doOperation(int num1, int num2);",
      "}",
      "public class OperationAdd implements Strategy{",
      "   @Override",
      "   public int doOperation(int num1, int num2) {",
      "      return num1 + num2;",
      "   }",
      "}",
      "public class OperationSubstract implements Strategy{",
      "   @Override",
      "   public int doOperation(int num1, int num2) {",
      "      return num1 - num2;",
      "   }",
      "}",
      "public class Context {",
      "   private Strategy strategy;",
      "   public Context(Strategy strategy){",
      "      this.strategy = strategy;",
      "   }",
      "   public int executeStrategy(int num1, int num2){",
      "      return strategy.doOperation(num1, num2);",
      "   }",
      "}",
      "复制代码public class StrategyPatternDemo {",
      "   public static void main(String[] args) {",
      "      Context context = new Context(new OperationAdd());    ",
      "      System.out.println(\"10 + 5 = \" + context.executeStrategy(10, 5));",
      "      context = new Context(new OperationSubstract());      ",
      "      System.out.println(\"10 - 5 = \" + context.executeStrategy(10, 5));",
      "   }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-观察者模式": {
    "scope": "java",
    "prefix": "jv-mode-观察者模式",
    "body": [
      "@Data",
      "public class Student {",
      "    private String name;",
      "    public Student(String name){",
      "        this.name=name;",
      "    }",
      "    public void dosomething(){",
      "        System.out.println(getName()+\"交卷了\");",
      "    }",
      "}",
      "复制代码public class Teacher {",
      "    private Set<Student> students = new HashSet<>();",
      "    public void addStudent(Student student){",
      "        students.add(student);",
      "    }",
      "    public void removeStudent(Student student){",
      "        students.remove(student);",
      "    }",
      "    public void doNotify(){",
      "        for(Student student:students){",
      "            student.dosomething();",
      "        }",
      "    }",
      "    public static void main(String[] args) {",
      "        Teacher teacher = new Teacher();",
      "        Student student = new Student(\"张三\");",
      "        Student student1 = new Student(\"李四\");",
      "        teacher.addStudent(student);",
      "        teacher.addStudent(student1);",
      "        teacher.doNotify();",
      "    }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-责任链模式": {
    "scope": "java",
    "prefix": "jv-mode-责任链模式",
    "body": [
      "责任链模式为请求创建一个接收者对象的链，对发送者和接受者进行解耦合。filter链就是责任链模式。",
      "public abstract class Handler {",
      "    //下一个处理者",
      "    private Handler nextHandler;",
      "    public final Response handleMessage(Request request){",
      "        Response response =null;",
      "        if (this.getHandlerLevel().equals(request.getRequestLevel())){",
      "            response = this.echo(request);",
      "        }else {",
      "            if (this.nextHandler!=null){",
      "                //传递给下一个",
      "                response = this.nextHandler.handleMessage(request);",
      "            }else {",
      "                response =new Response()",
      "            }",
      "        }",
      "        return response;",
      "    }",
      "    public Handler getNextHandler() {",
      "        return nextHandler;",
      "    }",
      "    public void setNextHandler(Handler nextHandler) {",
      "        this.nextHandler = nextHandler;",
      "    }",
      "    protected abstract Level getHandlerLevel();",
      "    protected abstract Response echo(Request request);",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-模板方式模式": {
    "scope": "java",
    "prefix": "jv-mode-模板方式模式",
    "body": [
      "public abstract class DBTemplate {",
      "    abstract void open();",
      "    abstract void select();",
      "    abstract void close();",
      "    //一个搜索模板",
      "    public final void selectTemplate(){",
      "        open();",
      "        select();",
      "        close();",
      "    }",
      "}",
      "复制代码public class MysqlDB extends DBTemplate {",
      "    @Override",
      "    void open() {",
      "        System.out.println(\"Mysql open...\");",
      "    }",
      "    @Override",
      "    void select() {",
      "        System.out.println(\"Mysql select...\");",
      "    }",
      "    @Override",
      "    void close() {",
      "        System.out.println(\"Mysql close...\");",
      "    }",
      "",
      "    public static void main(String[] args) {",
      "        DBTemplate mysql = new MysqlDB();",
      "        mysql.selectTemplate();",
      "    }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-状态模式": {
    "scope": "java",
    "prefix": "jv-mode-状态模式",
    "body": [
      "简单来说，就是一个对象有不同的状态，根据状态不同，可能有不同的行为。",
      "public interface State {",
      "   public void doAction(Context context);",
      "}",
      "public class StartState implements State {",
      "   public void doAction(Context context) {",
      "      System.out.println(\"Player is in start state\");",
      "      context.setState(this); ",
      "   }",
      "   public String toString(){",
      "      return \"Start State\";",
      "   }",
      "}",
      "public class StopState implements State {",
      "   public void doAction(Context context) {",
      "      System.out.println(\"Player is in stop state\");",
      "      context.setState(this); ",
      "   }",
      "   public String toString(){",
      "      return \"Stop State\";",
      "   }",
      "}",
      "public class Context {",
      "   private State state;",
      "   public Context(){",
      "      state = null;",
      "   }",
      "   public void setState(State state){",
      "      this.state = state;     ",
      "   }",
      "   public State getState(){",
      "      return state;",
      "   }",
      "}",
      "public class StatePatternDemo {",
      "   public static void main(String[] args) {",
      "      Context context = new Context();",
      "      StartState startState = new StartState();",
      "      startState.doAction(context);",
      "      System.out.println(context.getState().toString());",
      "      StopState stopState = new StopState();",
      "      stopState.doAction(context);",
      "      System.out.println(context.getState().toString());",
      "   }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-命令模式": {
    "scope": "java",
    "prefix": "jv-mode-命令模式",
    "body": [
      "命令模式是将请求以命令的形式包裹在对象中，并传递给对象，调用对象寻找到处理该命令的合适的对象，并将该命令传递给相应的对象，该对象执行。简单点说就是不同请求都封装成一个对象，不同的请求调用不同的执行者。",
      "//真正干活的对象",
      "public class Receiver {",
      "    public void doSomething(){",
      "        System.out.println(\"Receiver干活\");",
      "    }",
      "}",
      "复制代码//命令对象",
      "public abstract class Command {",
      "    public abstract void exectue();",
      "}",
      "复制代码//命令实现类",
      "public class ConcreteComand extends Command{",
      "    //干活那个",
      "    private Receiver receiver;",
      "    public ConcreteComand(Receiver receiver) {",
      "        this.receiver = receiver;",
      "    }",
      "    @Override",
      "    public void exectue() {",
      "        this.receiver.doSomething();",
      "    }",
      "",
      "    public static void main(String[] args) {",
      "        Receiver receiver = new Receiver();",
      "        Command command =new ConcreteComand(receiver);",
      "        command.exectue();//Receiver干活",
      "    }",
      "}",
      "",
      "作者：啤酒就辣条",
      "链接：https://juejin.im/post/5d27495fe51d4556dc2936c3",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-单例模式2": {
    "scope": "java",
    "prefix": "jv-mode-单例模式2",
    "body": [
      "/**",
      " * 饿汉式（单例模式）",
      " */",
      "public class HungrySingleton {",
      "",
      "  // 私有构造方法",
      "  private HungrySingleton() {",
      "  }",
      "",
      "  // 创建一个实例",
      "  private static final HungrySingleton ",
      "                HUNGRY_SINGLETON_INSTANCE = new HungrySingleton();",
      "",
      "  /**",
      "   * 获取实例的方法",
      "   */",
      "  public static HungrySingleton getHungrySingleton() {",
      "    return HUNGRY_SINGLETON_INSTANCE;",
      "  }",
      "}",
      "/**",
      " * 使用静态内部类完成单例模式",
      " */",
      "public class HungrySingleton {",
      "",
      "  // 私有构造方法",
      "  private HungrySingleton() {",
      "  }",
      "",
      "  // 利用静态类的加载时机实现懒加载",
      "  private static class InnerHungrySingleton{",
      "    private static final HungrySingleton ",
      "                    HUNGRY_SINGLETON_INSTANCE = new HungrySingleton();",
      "  }",
      "",
      "  /**",
      "   * 获取实例的方法",
      "   */",
      "  public static HungrySingleton getHungrySingleton() {",
      "    return InnerHungrySingleton.HUNGRY_SINGLETON_INSTANCE;",
      "  }",
      "}",
      "",
      "作者：编程小菜鸟",
      "链接：https://juejin.im/post/5eae3680f265da7bb56382b7",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",
      "/**",
      " * 懒汉式（单例模式）",
      " */",
      "public class LazySingleton {",
      "",
      "  // 私有构造方法",
      "  private LazySingleton() {",
      "  }",
      "",
      "  // 私有静态属性",
      "  private static LazySingleton lazySingletonInstance;",
      "",
      "  /**",
      "   * 获取实例的方法",
      "   */",
      "  public static LazySingleton getLazySingleton() {",
      "    // 双重判断",
      "    if (null == lazySingletonInstance) {",
      "      synchronized (LazySingleton.class) {",
      "        if (null == lazySingletonInstance) {",
      "          lazySingletonInstance = new LazySingleton();",
      "        }",
      "      }",
      "    }",
      "    return lazySingletonInstance;",
      "  }",
      "}",
      "",
      "作者：编程小菜鸟",
      "链接：https://juejin.im/post/5eae3680f265da7bb56382b7",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",
      "/**",
      " * 使用枚举实现单例",
      " */",
      "public enum SingletonEnum {",
      "  INSTANCE;",
      "",
      "  private People people;",
      "",
      "  SingletonEnum(){",
      "    people = new People();",
      "  }",
      "",
      "  public People getPeople() {",
      "    return people;",
      "  }",
      "",
      "  // 定义了一个内部类，为了方便代码展示，也可以是一个独立的类。",
      "  class People {",
      "  }",
      "}",
      "复制代码使用枚举有一个缺点是需要更多的内存空间。",
      "",
      "作者：编程小菜鸟",
      "链接：https://juejin.im/post/5eae3680f265da7bb56382b7",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-开闭原则": {
    "scope": "java",
    "prefix": "jv-mode-开闭原则",
    "body": [
      "// 水果店",
      "public class FruitShop {",
      "",
      "  // 卖水果",
      "  public void sellFruit(Fruit fruit) {",
      "    if (fruit.fruit_type == 1) {",
      "      sellApple(fruit);",
      "    } else if (fruit.fruit_type == 2) {",
      "      sellBanana(fruit);",
      "    }",
      "  }",
      "",
      "  // 卖苹果",
      "  public void sellApple(Fruit fruit) {",
      "    System.out.println(\"卖出一斤苹果！\");",
      "  }",
      "",
      "  // 卖香蕉",
      "  public void sellBanana(Fruit fruit) {",
      "    System.out.println(\"卖出一斤香蕉！\");",
      "  }",
      "}",
      "",
      "// 水果的基类",
      "public class Fruit {",
      "",
      "  int fruit_type;",
      "}",
      "",
      "// 苹果",
      "public class Apple extends Fruit {",
      "",
      "  Apple() {",
      "    super.fruit_type = 1;",
      "  }",
      "}",
      "",
      "// 香蕉",
      "public class Banana extends Fruit {",
      "",
      "  Banana() {",
      "    super.fruit_type = 2;",
      "  }",
      "}",
      "复制代码现在水果店扩张，添加了一种新的水果（西瓜）。根据以上示例代码我们需要作出如下新增。",
      "1、新增西瓜类",
      "public class Watermelon extends Fruit {",
      "",
      "  Watermelon() {",
      "    super.fruit_type = 3;",
      "  }",
      "}",
      "复制代码2、在FruitShop类中添加“卖西瓜”的方法。",
      "public void sellWatermelon(Fruit fruit) {",
      "    System.out.println(\"卖出一斤西瓜！\");",
      "}",
      "复制代码3、修改FruitShop类中的sellFruit方法。",
      "public void sellFruit(Fruit fruit) {",
      "    if (fruit.fruit_type == 1) {",
      "      sellApple(fruit);",
      "    } else if (fruit.fruit_type == 2) {",
      "      sellBanana(fruit);",
      "    } else if(fruit.fruit_type == 3){",
      "      sellWatermelon(fruit);",
      "    }",
      "}",
      "复制代码通过以上三步就实现了增加一种水果的需求，但是大家有没有发现，这种方式虽然容易理解，可是当功能发生变动时，代码的修改量会特别大。并且这种方式也不符合“开闭原则”，大家能看出来吗？",
      "各种各样的水果类就是“提供者”，FruitShop类就是使用这些水果类的“使用者”。开闭原则中，提到对修改关闭，但是现在当提供者新增功能后，使用者（FruitShop类）也需要修改，这就违背了该原则。",
      "我们可以将以上代码进行如下优化：",
      "// 水果店",
      "public class FruitShop {",
      "",
      "  // 卖水果的方法",
      "  public void sellFruit(Fruit fruit) {",
      "    fruit.sell();",
      "  }",
      "",
      "}",
      "",
      "// 水果的基类",
      "public abstract class Fruit {",
      "",
      "  int fruit_type;",
      "",
      "  // 出售的方法",
      "  public abstract void sell();",
      "}",
      "",
      "// 苹果",
      "public class Apple extends Fruit {",
      "",
      "  Apple() {",
      "    super.fruit_type = 1;",
      "  }",
      "",
      "  @Override",
      "  public void sell() {",
      "    System.out.println(\"卖出一斤苹果！\");",
      "  }",
      "}",
      "",
      "// 香蕉",
      "public class Banana extends Fruit {",
      "",
      "  Banana() {",
      "    super.fruit_type = 2;",
      "  }",
      "",
      "  @Override",
      "  public void sell() {",
      "    System.out.println(\"卖出一斤香蕉！\");",
      "  }",
      "}",
      "复制代码此时当我们需要新增一种水果时，只需要提供者新增一个继承自Fruit类的子类就可以了。",
      "// 西瓜",
      "public class Watermelon extends Fruit {",
      "",
      "  Watermelon() {",
      "    super.fruit_type = 3;",
      "  }",
      "",
      "  @Override",
      "  public void sell() {",
      "    System.out.println(\"卖出一斤西瓜！\");",
      "  }",
      "}",
      "",
      "作者：编程小菜鸟",
      "链接：https://juejin.im/post/5ef73e8fe51d4534af686143",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-通过数组实现栈：": {
    "scope": "java",
    "prefix": "jv-mode-通过数组实现栈：",
    "body": [
      "public class ArrayStack {",
      "",
      "  // 栈的最大容量",
      "  private int maxSize;",
      "  // 存放数据（使用数组）",
      "  private int[] stack;",
      "  // 栈顶指针",
      "  private int top = -1;",
      "  ",
      "  /**",
      "   * 构造方法",
      "   *",
      "   * @param maxSize 栈的最大容量",
      "   */",
      "  public ArrayStack(int maxSize) {",
      "    this.maxSize = maxSize;",
      "    // 初始化数组",
      "    this.stack = new int[this.maxSize];",
      "  }",
      "",
      "}",
      "复制代码判断栈空的方法：",
      "public boolean isEmpty() {",
      "    // 当栈顶指针为-1时代表当前栈还没有存入元素",
      "    return this.top == -1;",
      "}",
      "复制代码判断栈满的方法：",
      "public boolean isFull() {",
      "    // 当栈顶的指针等于栈最大容量减一时，代表栈满了（指针指向的是stack的索引，是从0开始的）。",
      "    return this.top == this.maxSize - 1;",
      "}",
      "复制代码压栈（入栈）的方法：",
      "public void push(int value) {",
      "    // 验证是否还可以压入数据",
      "    if (this.isFull()) {",
      "      System.out.println(\"栈满了！\");",
      "      return;",
      "    }",
      "    // 先移动栈顶指针",
      "    this.top++;",
      "    // 保存数据",
      "    this.stack[this.top] = value;",
      "}",
      "复制代码弹栈（出栈）的方法：",
      "public int pop() {",
      "    // 验证是否还可以取出数据",
      "    if (this.isEmpty()) {",
      "      throw new RuntimeException(\"栈空了！\");",
      "    }",
      "    // 取出栈顶数据",
      "    int value = this.stack[this.top];",
      "    // 将栈顶指针向下移动",
      "    this.top--;",
      "    return value;",
      "}",
      "",
      "作者：编程小菜鸟",
      "链接：https://juejin.im/post/5ebbf0895188255fb4057d71",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-慎用包装类型": {
    "scope": "java",
    "prefix": "jv-mode-慎用包装类型",
    "body": [
      "public static void main(String[] args) {",
      "",
      "    // 获取开始时间",
      "    long packingTypeStartTime = System.currentTimeMillis();",
      "    Integer packingTypeSum = 0;",
      "    for (int i = 0; i < 100000; i++) {",
      "      packingTypeSum += i;",
      "    }",
      "    System.out.println(\"总和为：\" + packingTypeSum);",
      "    // 获取结束时间",
      "    long packingTypeEndTime = System.currentTimeMillis();",
      "    System.out.println(\"使用包装类型求和耗时：\"",
      "        + (packingTypeEndTime - packingTypeStartTime) + \"毫秒。\");",
      "",
      "    System.out.println(\"========我是分割线========\");",
      "",
      "    // 获取开始时间",
      "    long basicTypeStartTime = System.currentTimeMillis();",
      "    int basicTypeSum = 0;",
      "    for (int i = 0; i < 100000; i++) {",
      "      basicTypeSum += i;",
      "    }",
      "    System.out.println(\"总和为：\" + basicTypeSum);",
      "    // 获取结束时间",
      "    long basicTypeEndTime = System.currentTimeMillis();",
      "    System.out.println(\"使用基本数据类型求和耗时：\"",
      "        + (basicTypeEndTime - basicTypeStartTime) + \"毫秒。\");",
      "  }",
      "",
      "作者：编程小菜鸟",
      "链接：https://juejin.im/post/5eb160ba5188256d95625881",
      "来源：掘金",
      "著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"
    ]
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  },
  "jv-mode-": {
    "scope": "java",
    "prefix": "jv-mode-",
    "body": []
  }
}
